!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
A	geom.h	/^	double *A, *phase;$/;"	m	struct:__anon30
A	geom.h	/^	double *A;$/;"	m	struct:__anon31
A	geom.h	/^        double A;$/;"	m	struct:__anon50
ABOVE_TO_BELOW	int.h	/^        ABOVE_TO_BELOW = 4$/;"	e	enum:_CROSSING_DIRECTION
ACCURATE_INTEGRAL	../util/cdecs.h	/^        ACCURATE_INTEGRAL    = 0,$/;"	e	enum:_QUADRATURE_STATUS
ADD	../util/output.c	/^	ADD    = 1$/;"	e	enum:_ADD_OR_DELETE	file:
ADD_MAX_LEN	../util/times.c	257;"	d	file:
ADD_OR_DELETE	../util/output.c	/^typedef enum _ADD_OR_DELETE ADD_OR_DELETE;$/;"	t	typeref:enum:_ADD_OR_DELETE	file:
ADD_TO_DEBUG	../util/navdecs.h	222;"	d
ADD_TO_DEBUG_CNT	../util/navdecs.h	152;"	d
ADD_TO_DEBUG_STRING	../util/navdecs.h	178;"	d
ALIGN	../util/cdecs.h	/^typedef	double 	ALIGN;	\/* Strictest alignment type of all data types *\/$/;"	t
ALL	../util/cdecs.h	/^	ALL=              2,	\/* Indicates all was the first request *\/$/;"	e	enum:_DEBUG_MODE
ALLOC_HEADER	../util/vectormalloc.c	/^typedef struct _ALLOC_HEADER ALLOC_HEADER;$/;"	t	typeref:struct:_ALLOC_HEADER	file:
ALL_GATHER_TAG	../util/cdecs.h	/^	ALL_GATHER_TAG,$/;"	e	enum:__anon78
AMR_SUBDOMAIN_BOUNDARY	int.h	/^        AMR_SUBDOMAIN_BOUNDARY = 100000$/;"	e	enum:__anon64
ANGLE_DIRECTION	geom.h	/^} ANGLE_DIRECTION;$/;"	t	typeref:enum:__anon29
ANGLE_DIRECTION_NOT_SET	geom.h	/^	ANGLE_DIRECTION_NOT_SET=-1$/;"	e	enum:__anon29
ANG_COMP	comp3d.c	/^}    ANG_COMP;$/;"	t	typeref:struct:__anon5	file:
ARRAY_ID	int.h	/^	ARRAY_ID = USER_MIN_MESG_ID + 1000,$/;"	e	enum:__anon69
ASSIGN_ARRAY_POINTER	../util/vmalloc.h	144;"	d
A_sd	geom.h	/^        double A_sd, P_sd, av_phase;$/;"	m	struct:__anon30
Absolute	triangle.c	1865;"	d	file:
Area	geom.h	/^	    double          (*Area)(const double*,const struct _RECT_GRID*);$/;"	m	struct:_RECT_GRID::_REMAP
ArrayOfCurvePoints	map.c	/^EXPORT	void ArrayOfCurvePoints($/;"	f
ArrayOfCurves	map.c	/^EXPORT	void ArrayOfCurves($/;"	f
ArrayOfIntfcPoints	map.c	/^EXPORT	void ArrayOfIntfcPoints(INTERFACE *intfc, double *coords)$/;"	f
ArrayOfIntfcTris	map.c	/^EXPORT  void ArrayOfIntfcTris($/;"	f
ArrayOfIntfcTris_FT	map.c	/^EXPORT	void ArrayOfIntfcTris_FT($/;"	f
ArrayOfSurfTris	map.c	/^EXPORT	void ArrayOfSurfTris($/;"	f
ArrayOfSurfTris_FT	map.c	/^EXPORT	void ArrayOfSurfTris_FT(SURFACE *surface, TRI **tris)$/;"	f
ArrayOfSurfaces	map.c	/^EXPORT	void ArrayOfSurfaces($/;"	f
BAD_ANGLE	iredist.c	/^        BAD_ANGLE,$/;"	e	enum:_TRI_STATUS	file:
BAD_ANGLE	iredist_o2.c	/^        BAD_ANGLE,$/;"	e	enum:_TRI_STATUS	file:
BBI_POINT	int.h	/^typedef struct _BBI_POINT BBI_POINT;$/;"	t	typeref:struct:_BBI_POINT
BBI_POINT2	int.h	/^typedef struct _BBI_POINT2 BBI_POINT2;$/;"	t	typeref:struct:_BBI_POINT2
BDRY_BLOCK	int.h	/^        BDRY_BLOCK = 0,$/;"	e	enum:_BLK_TYPE
BDRY_BOX_PARAMS	geom.h	/^} BDRY_BOX_PARAMS;$/;"	t	typeref:struct:__anon32
BDRY_EDGE	int.h	/^        BDRY_EDGE = 3$/;"	e	enum:_ELEMENT_TYPE
BDRY_MASK	int.h	/^	BDRY_MASK = 077$/;"	e	enum:__anon63
BDRY_SIDE	int.h	/^typedef enum _BDRY_SIDE BDRY_SIDE;$/;"	t	typeref:enum:_BDRY_SIDE
BEGIN_BRIEFLY	../util/navdecs.h	233;"	d
BEGIN_DETAILS	../util/navdecs.h	239;"	d
BEGIN_EXPLAIN	../util/navdecs.h	242;"	d
BEGIN_FORCE	../util/navdecs.h	245;"	d
BEGIN_SUMMARY	../util/navdecs.h	236;"	d
BELOW_TO_ABOVE	int.h	/^        BELOW_TO_ABOVE = 3,$/;"	e	enum:_CROSSING_DIRECTION
BINARY_VERSION	../util/plotdecs.h	/^	BINARY_VERSION	  = 1$/;"	e	enum:__anon82
BIN_SIDE01	int.h	/^	BIN_SIDE01 = 0x1,$/;"	e	enum:__anon67
BIN_SIDE12	int.h	/^	BIN_SIDE12 = 0x2,$/;"	e	enum:__anon67
BIN_SIDE20	int.h	/^	BIN_SIDE20 = 0x4$/;"	e	enum:__anon67
BLACK	../util/plotdecs.h	/^	BLACK = 0,$/;"	e	enum:__anon83
BLK_BOND	int.h	/^typedef struct _BLK_BOND BLK_BOND;$/;"	t	typeref:struct:_BLK_BOND
BLK_CRX	int.h	/^typedef struct _BLK_CRX BLK_CRX;$/;"	t	typeref:struct:_BLK_CRX
BLK_CRX2	int.h	/^typedef struct _BLK_CRX2 BLK_CRX2;$/;"	t	typeref:struct:_BLK_CRX2
BLK_CRX_2D	imkcurve.c	/^typedef struct _BLK_CRX_2D BLK_CRX_2D;$/;"	t	typeref:struct:_BLK_CRX_2D	file:
BLK_EDGE	int.h	/^typedef struct _BLK_EDGE BLK_EDGE;$/;"	t	typeref:struct:_BLK_EDGE
BLK_INFO	int.h	/^typedef struct _BLK_INFO BLK_INFO;$/;"	t	typeref:struct:_BLK_INFO
BLK_SURF	int.h	/^typedef struct _BLK_SURF BLK_SURF;$/;"	t	typeref:struct:_BLK_SURF
BLK_TRI	int.h	/^typedef struct _BLK_TRI BLK_TRI;$/;"	t	typeref:struct:_BLK_TRI
BLK_TYPE	int.h	/^typedef enum _BLK_TYPE BLK_TYPE;$/;"	t	typeref:enum:_BLK_TYPE
BLOCK_CORRUPTED	../util/vectormalloc.c	224;"	d	file:
BLUE	../util/plotdecs.h	/^	BLUE,$/;"	e	enum:__anon83
BOND	int.h	/^typedef struct _BOND BOND;$/;"	t	typeref:struct:_BOND
BOND_SET	iTaps.h	/^	BOND_SET,$/;"	e	enum:_ES_TYPE
BOND_TRI	int.h	/^typedef struct _BOND_TRI BOND_TRI;$/;"	t	typeref:struct:_BOND_TRI
BOTH_FOUND	int.h	/^        BOTH_FOUND$/;"	e	enum:_COMP_EQUIV_LIST
BOTTOM	int.h	/^	BOTTOM	  = 001,$/;"	e	enum:__anon63
BOUNDARY	int.h	/^	BOUNDARY = 3$/;"	e	enum:_CELL_TYPE
BPOINT	setb2d.c	/^} BPOINT;$/;"	t	typeref:struct:_BPOINT	file:
BRIEFLY	../util/navdecs.h	200;"	d
BRIEFLY	../util/navdecs.h	316;"	d
BRIEFLY_CNT	../util/navdecs.h	146;"	d
Between	../util/cdecs.h	447;"	d
Between	../util/cdecs.h	453;"	d
Bin_side	int.h	1189;"	d
BinaryDigit	triangledefs.h	/^enum BinaryDigit { ZERO = 0, ONE = 1};$/;"	g
BinaryDigit	triangledefs.h	/^typedef enum BinaryDigit BinaryDigit;$/;"	t	typeref:enum:BinaryDigit
Bond	userhooks.c	/^EXPORT	BOND *Bond($/;"	f
BondAndNeighbors	isub.c	/^EXPORT	void	BondAndNeighbors($/;"	f
Bond_at_node	int.h	1108;"	d
Bond_at_node_of_o_curve	int.h	1111;"	d
Bond_at_opp_node_of_o_curve	int.h	1115;"	d
Bond_blocks	comp2d.c	/^LOCAL int *Bond_blocks,		\/* Temporary Array *\/	$/;"	v
Bond_of_hse	int.h	838;"	d
Bond_of_q	iredist.c	568;"	d	file:
Bond_of_q	iredist_o2.c	857;"	d	file:
Bond_on_side	int.h	1245;"	d
Bond_on_side01	int.h	1242;"	d
Bond_on_side12	int.h	1243;"	d
Bond_on_side20	int.h	1244;"	d
Bond_tri_on_side	int.h	1240;"	d
Bond_tri_on_side01	int.h	1237;"	d
Bond_tri_on_side12	int.h	1238;"	d
Bond_tri_on_side20	int.h	1239;"	d
Boundary	int.h	896;"	d
Boundary_hs	int.h	897;"	d
Boundary_hsb	int.h	898;"	d
Boundary_point	int.h	1157;"	d
Boundary_tri	int.h	1188;"	d
Btris	int.h	1159;"	d
CBond	userhooks.c	/^EXPORT	C_BOND *CBond($/;"	f
CELL_TYPE	int.h	/^typedef enum _CELL_TYPE CELL_TYPE;$/;"	t	typeref:enum:_CELL_TYPE
CHAR	../util/vmalloc.h	63;"	d
CHECK_ADD_TO_DEBUG	../util/navdecs.h	260;"	d
CHECK_ALLOC_SIZE	../util/vmalloc.h	72;"	d
CHECK_REMOVE_FROM_DEBUG	../util/navdecs.h	262;"	d
CHECK_START_TRACE	../util/navdecs.h	257;"	d
CHECK_STOP_TRACE	../util/navdecs.h	258;"	d
CHUNK0_ID	int.h	/^	CHUNK0_ID,$/;"	e	enum:__anon69
CHUNK_ADDR_ID	int.h	/^	CHUNK_ADDR_ID,$/;"	e	enum:__anon69
CIRCLE_PARAMS	geom.h	/^} CIRCLE_PARAMS;$/;"	t	typeref:struct:__anon48
CLEAN_UP	../util/cleanup.c	115;"	d	file:
CLEAN_UP	../util/cleanup.c	136;"	d	file:
CLK_TCK	../util/times.c	72;"	d	file:
CLOCKWISE	geom.h	/^	CLOCKWISE=2,$/;"	e	enum:__anon29
COMMAND_NOT_IMPLEMENTED	../util/ppsub.c	127;"	d	file:
COMM_BOX	geom.h	/^typedef struct _COMM_BOX COMM_BOX;$/;"	t	typeref:struct:_COMM_BOX
COMP1_FOUND	int.h	/^        COMP1_FOUND,$/;"	e	enum:_COMP_EQUIV_LIST
COMP2_BLOCK	int.h	/^        COMP2_BLOCK = 1,$/;"	e	enum:_BLK_TYPE
COMP2_FOUND	int.h	/^        COMP2_FOUND,$/;"	e	enum:_COMP_EQUIV_LIST
COMP3_BLOCK	int.h	/^        COMP3_BLOCK = 2$/;"	e	enum:_BLK_TYPE
COMPLEX	../util/cdecs.h	/^typedef struct _COMPLEX	COMPLEX;$/;"	t	typeref:struct:_COMPLEX
COMPONENT	int.h	/^typedef int COMPONENT;		\/* Labels Connected Domains *\/$/;"	t
COMP_EQUIV_LIST	int.h	/^typedef enum _COMP_EQUIV_LIST COMP_EQUIV_LIST;$/;"	t	typeref:enum:_COMP_EQUIV_LIST
COMP_GRID	geom.h	/^	COMP_GRID = 1,$/;"	e	enum:__anon26
COMP_LIST	int.h	/^typedef struct _COMP_LIST COMP_LIST;$/;"	t	typeref:struct:_COMP_LIST
COORDINATE_PLANE	int.h	/^typedef enum _COORDINATE_PLANE COORDINATE_PLANE;$/;"	t	typeref:enum:_COORDINATE_PLANE
COORDS	int.h	1068;"	d
COPLANAR	geom.h	/^    COPLANAR      =  4$/;"	e	enum:_SIDE
COSMOS_PARAMS	geom.h	/^} COSMOS_PARAMS;$/;"	t	typeref:struct:__anon41
COUNTER_CLOCK	geom.h	/^	COUNTER_CLOCK=1,$/;"	e	enum:__anon29
CPOINTER	../util/cdecs.h	/^typedef  const void *CPOINTER;	\/* Constant Pointer to Unknown Data Types. *\/$/;"	t
CROSS	int.h	/^typedef struct _Cross CROSS;$/;"	t	typeref:struct:_Cross
CROSSING_DIRECTION	int.h	/^typedef enum _CROSSING_DIRECTION CROSSING_DIRECTION;$/;"	t	typeref:enum:_CROSSING_DIRECTION
CRXING	int.h	/^typedef struct _CRXING CRXING;$/;"	t	typeref:struct:_CRXING
CRX_STORE	int.h	/^} CRX_STORE;$/;"	t	typeref:struct:__anon61
CRX_TYPE	int.h	/^typedef enum _CRX_TYPE CRX_TYPE;$/;"	t	typeref:enum:_CRX_TYPE
CURVE	int.h	/^typedef struct _CURVE CURVE;$/;"	t	typeref:struct:_CURVE
CURVE_SET	iTaps.h	/^        CURVE_SET,$/;"	e	enum:_ES_TYPE
CURV_STITCH	isurgery.c	/^enum {SURF_STITCH,CURV_STITCH};$/;"	e	enum:__anon9	file:
CYAN	../util/plotdecs.h	/^	CYAN,$/;"	e	enum:__anon83
CYLINDRICAL_REMAP	geom.h	/^	CYLINDRICAL_REMAP = 2,	\/* cylindrical geometry *\/$/;"	e	enum:__anon25
C_BOND	int.h	/^typedef struct _C_BOND   C_BOND;$/;"	t	typeref:struct:_C_BOND
C_COUNT	../util/navdecs.h	154;"	d
C_CURVE	int.h	/^typedef struct _C_CURVE C_CURVE;$/;"	t	typeref:struct:_C_CURVE
C_MAIN_PROGRAM	../util/cdecs.h	374;"	d
C_MAIN_PROGRAM	../util/cdecs.h	377;"	d
C_SURF	int.h	/^typedef struct _C_SURF C_SURF;$/;"	t	typeref:struct:_C_SURF
C_SURF_FLAG	int.h	/^typedef struct _C_SURF_FLAG C_SURF_FLAG;$/;"	t	typeref:struct:_C_SURF_FLAG
Check_return	../util/fnamedebug.h	64;"	d
Check_return	../util/fnamedebug.h	67;"	d
Chunk	table.h	/^struct Chunk {$/;"	s
ChunkSize	userint.h	312;"	d
ChunkTop	table.h	61;"	d
CloseAndCleanUpAllFiles	../util/fsort.c	/^EXPORT	void	CloseAndCleanUpAllFiles(void)$/;"	f
CloseAndCleanUpTmpFiles	../util/fsort.c	/^EXPORT	void	CloseAndCleanUpTmpFiles($/;"	f
Coords	int.h	1067;"	d
Cor_point	int.h	109;"	d
Cross2d	int.h	1035;"	d
Cross3d	int.h	1040;"	d
CursorAfterString	../util/fgetstrin.c	/^EXPORT	void CursorAfterString($/;"	f
CursorAfterStringOpt	../util/fgetstrin.c	/^EXPORT	boolean CursorAfterStringOpt($/;"	f
Curve_of_hs	int.h	830;"	d
Curve_of_hsb	int.h	847;"	d
DATA	igview.c	/^struct DATA$/;"	s	file:
DEADPOINT	triangle.c	/^LOCAL const int DEADPOINT = INT_MIN;$/;"	v
DEBUG	../util/fnamedebug.h	82;"	d
DEBUG	../util/fnamedebug.h	83;"	d
DEBUG	../util/fnamedebug.h	87;"	d
DEBUG	../util/fnamedebug.h	88;"	d
DEBUG	table.h	201;"	d
DEBUG_CROSS_BONDS	isub.c	2137;"	d	file:
DEBUG_ENTER	../util/fnamedebug.h	78;"	d
DEBUG_ENTER	../util/fnamedebug.h	85;"	d
DEBUG_ENTER	../util/navdecs.h	289;"	d
DEBUG_ENTER	../util/navdecs.h	338;"	d
DEBUG_ENTER	../util/navdecs.h	340;"	d
DEBUG_ENTER	../util/navdecs.h	69;"	d
DEBUG_LEAVE	../util/fnamedebug.h	80;"	d
DEBUG_LEAVE	../util/fnamedebug.h	86;"	d
DEBUG_LEAVE	../util/navdecs.h	290;"	d
DEBUG_LEAVE	../util/navdecs.h	343;"	d
DEBUG_LEAVE	../util/navdecs.h	345;"	d
DEBUG_LEAVE	../util/navdecs.h	70;"	d
DEBUG_MODE	../util/cdecs.h	/^typedef enum _DEBUG_MODE DEBUG_MODE;$/;"	t	typeref:enum:_DEBUG_MODE
DEBUG_PARAMS	../util/cdecs.h	/^typedef struct _DEBUG_PARAMS DEBUG_PARAMS;$/;"	t	typeref:struct:_DEBUG_PARAMS
DEBUG_STRING	../util/ppsub.c	120;"	d	file:
DEBUG_STRING	comp2d.c	42;"	d	file:
DEBUG_STRING	comp3d.c	49;"	d	file:
DEBUG_STRING	iblkb.c	39;"	d	file:
DEBUG_STRING	iblkc2.c	13;"	d	file:
DEBUG_STRING	iblkc3.c	14;"	d	file:
DEBUG_STRING	imkcurve.c	37;"	d	file:
DEBUG_STRING	imksurf.c	38;"	d	file:
DEBUG_STRING	iredist.c	39;"	d	file:
DEBUG_STRING	iredist_o2.c	39;"	d	file:
DEBUG_STRING	isect3d.c	37;"	d	file:
DEBUG_STRING	itrisset.c	3;"	d	file:
DEBUG_STRING	iwallsurf.c	36;"	d	file:
DEBUG_STRING	ppcopy.c	119;"	d	file:
DEBUG_STRING	setb1d.c	36;"	d	file:
DEBUG_STRING	setb2d.c	36;"	d	file:
DEBUG_STRING	setb3d.c	37;"	d	file:
DEBUG_VARIABLES	../util/navdecs.h	248;"	d
DEFAULT_ALLOC	arrayutils.c	/^	DEFAULT_ALLOC	      = USE_VMALLOC_FOR_ALLOC$/;"	e	enum:_PQ_ALLOCATOR	file:
DEFAULT_N_PQS_IN_BLK	arrayutils.c	/^enum { DEFAULT_N_PQS_IN_BLK = 5 };$/;"	e	enum:__anon1	file:
DELETE	../util/output.c	/^	DELETE = 0,$/;"	e	enum:_ADD_OR_DELETE	file:
DEPTH_LIMITING	../util/navdecs.h	215;"	d
DETAILS	../util/navdecs.h	206;"	d
DETAILS	../util/navdecs.h	318;"	d
DETAILS_CNT	../util/navdecs.h	148;"	d
DOMAIN_FLAG	int.h	/^typedef enum _DOMAIN_FLAG DOMAIN_FLAG;$/;"	t	typeref:enum:_DOMAIN_FLAG
DONT_COMPILE	../util/cdecs.h	249;"	d
DOUBLE	../util/vmalloc.h	66;"	d
DUAL_GRID	geom.h	/^	DUAL_GRID = 2,$/;"	e	enum:__anon26
DUMBBELL_PARAMS	geom.h	/^} DUMBBELL_PARAMS;$/;"	t	typeref:struct:__anon35
DUPLICATEPOINT	triangle.c	/^    DUPLICATEPOINT$/;"	e	enum:insertsiteresult	file:
DbParams	../util/debug.c	/^LOCAL	INTERNAL_DEBUG_PARAMS	DbParams = {$/;"	v
Det3d	int.h	1052;"	d
Dimension	int.h	459;"	d
Dnm	geom.h	/^	                   *Dnm[3],$/;"	m	struct:_RECT_GRID::_REMAP
Dot3d	int.h	1027;"	d
EAST	int.h	/^        EAST  = 0x01,$/;"	e	enum:_GRID_DIRECTION
EDGE	int.h	/^typedef struct _EDGE EDGE;$/;"	t	typeref:struct:_EDGE
EDGE_FLAG	int.h	/^typedef enum _EDGE_FLAG EDGE_FLAG;$/;"	t	typeref:enum:_EDGE_FLAG
EG_CRX	int.h	/^typedef struct _EG_CRX EG_CRX;$/;"	t	typeref:struct:_EG_CRX
EG_CRX_2D	imkcurve.c	/^typedef struct _EG_CRX_2D EG_CRX_2D;$/;"	t	typeref:struct:_EG_CRX_2D	file:
EHhol	iTaps.h	/^	struct _FTEHANDLE *EHhol; \/*head of Entity Handle list*\/$/;"	m	struct:_FTMESH	typeref:struct:_FTMESH::_FTEHANDLE
EHtol	iTaps.h	/^	struct _FTEHANDLE *EHtol; \/*tail of Entity Handle list*\/$/;"	m	struct:_FTMESH	typeref:struct:_FTMESH::_FTEHANDLE
ELEMENT_TYPE	int.h	/^typedef enum _ELEMENT_TYPE ELEMENT_TYPE;$/;"	t	typeref:enum:_ELEMENT_TYPE
ELLIP2D_PARAMS	geom.h	/^} ELLIP2D_PARAMS;$/;"	t	typeref:struct:__anon37
ELLIP2D_TILT_PARAMS	geom.h	/^} ELLIP2D_TILT_PARAMS;$/;"	t	typeref:struct:__anon38
ELLIP_PARAMS	geom.h	/^} ELLIP_PARAMS;$/;"	t	typeref:struct:__anon33
ENCROACHINGPOINT	triangle.c	/^    ENCROACHINGPOINT,$/;"	e	enum:insertsiteresult	file:
END_BOND	comp2d.c	/^enum { END_BOND = -1 }; \/* Any integer that cannot be a grid block index *\/$/;"	e	enum:__anon2	file:
END_BRIEFLY	../util/navdecs.h	234;"	d
END_DETAILS	../util/navdecs.h	240;"	d
END_EXPLAIN	../util/navdecs.h	243;"	d
END_FORCE	../util/navdecs.h	246;"	d
END_OF_CURVE	userint.h	318;"	d
END_SUMMARY	../util/navdecs.h	237;"	d
END_TRI	comp3d.c	/^enum { END_TRI = -1 };	\/* Any integer that cannot be a grid block index *\/$/;"	e	enum:__anon4	file:
EPSILON	geom.h	/^IMPORT	double	EPSILON;$/;"	v
EPSILON	geomutils.c	/^EXPORT	double	EPSILON	= 1.e-4;	\/* TOLERANCE *\/$/;"	v
EQUIV_COMPS	int.h	/^typedef struct  _EQUIV_COMPS    EQUIV_COMPS;$/;"	t	typeref:struct:_EQUIV_COMPS
EQUIV_COMPS_LEN	int.h	/^enum { EQUIV_COMPS_LEN  = 5 };$/;"	e	enum:__anon73
ERROR	../util/cdecs.h	/^enum {ERROR=-1};$/;"	e	enum:__anon77
ERROR	../util/cdecs.h	182;"	d
ERROR_COMP	int.h	/^	ERROR_COMP       = -6$/;"	e	enum:__anon65
ERROR_FLOAT	../util/cdecs.h	189;"	d
ES_TYPE	iTaps.h	/^typedef enum _ES_TYPE ES_TYPE;$/;"	t	typeref:enum:_ES_TYPE
EXIT	../util/cleanup.c	117;"	d	file:
EXIT	../util/cleanup.c	138;"	d	file:
EXPANDED_DUAL_GRID	geom.h	/^	EXPANDED_DUAL_GRID = 3$/;"	e	enum:__anon26
EXPLAIN	../util/navdecs.h	209;"	d
EXPLAIN	../util/navdecs.h	317;"	d
EXPLAIN_CNT	../util/navdecs.h	149;"	d
EXPORT	../util/cdecs.h	297;"	d
EXTERIOR_COMP	table.h	/^	EXTERIOR_COMP     = 0,$/;"	e	enum:__anon75
EXTERNAL	int.h	/^        EXTERNAL = 0,$/;"	e	enum:_CELL_TYPE
E_comps	iecomps.c	46;"	d	file:
E_comps	int.h	1477;"	d
EndOfBlock	../util/vectormalloc.c	/^	ALIGN                *EndOfBlock;$/;"	m	struct:_ALLOC_HEADER	file:
EndOfBlockTag	../util/vectormalloc.c	/^LOCAL	ALIGN	EndOfBlockTag;$/;"	v
EnsureSufficientMessageBufferSize	../util/ppsub.c	/^EXPORT	void	EnsureSufficientMessageBufferSize($/;"	f
Error	../util/cdecs.h	398;"	d
Error_handler	../util/cleanup.c	/^typedef void (Error_handler)(int);$/;"	t	file:
Error_handler	../util/cleanup.c	/^typedef void (Error_handler)(int,siginfo_t*,ucontext_t*);$/;"	t	file:
FAILURE	iTaps.h	81;"	d
FALSE	../util/cdecs.h	/^enum _boolean { FALSE              = 0,$/;"	e	enum:_boolean
FFMT	../util/cdecs.h	149;"	d
FIRST_USER_BOUNDARY_TYPE	int.h	/^	FIRST_USER_BOUNDARY_TYPE$/;"	e	enum:__anon64
FIRST_USER_MESSAGE_ID	int.h	/^	FIRST_USER_MESSAGE_ID = USER_MIN_MESG_ID + 10000$/;"	e	enum:__anon69
FLI	../util/ppsub.c	/^typedef union _FLI {double f;long l;int i;} FLI;$/;"	t	typeref:union:_FLI	file:
FLIST	../util/fsort.c	/^typedef	struct	_FLIST	FLIST;$/;"	t	typeref:struct:_FLIST	file:
FLOAT	../util/vmalloc.h	65;"	d
FLOAT0	../util/navdecs.h	168;"	d
FLOAT0	../util/navdecs.h	329;"	d
FLOAT1	../util/navdecs.h	169;"	d
FLOAT1	../util/navdecs.h	330;"	d
FLOAT2	../util/navdecs.h	170;"	d
FLOAT2	../util/navdecs.h	331;"	d
FORCE	../util/navdecs.h	212;"	d
FORCE_CNT	../util/navdecs.h	151;"	d
FORTRAN	../util/cdecs.h	343;"	d
FORTRAN	../util/cdecs.h	345;"	d
FORTRAN	../util/cdecs.h	350;"	d
FORTRAN	../util/cdecs.h	352;"	d
FORTRAN	../util/cdecs.h	354;"	d
FORTRAN_NAME	../util/cdecs.h	359;"	d
FORTRAN_NAME	../util/cdecs.h	361;"	d
FOURIER_POLY	geom.h	/^} FOURIER_POLY;$/;"	t	typeref:struct:__anon30
FOutput	../util/sigplot.c	165;"	d	file:
FTEHANDLE	iTaps.h	/^typedef struct _FTEHANDLE FTEHANDLE;$/;"	t	typeref:struct:_FTEHANDLE
FTMESH	iTaps.h	/^typedef struct _FTMESH FTMESH;$/;"	t	typeref:struct:_FTMESH
FT_BIG_ENDIAN	../util/cdecs.h	/^	FT_BIG_ENDIAN     =  1 \/* Big endian byte ordering *\/$/;"	e	enum:_FT_ENDIAN
FT_ENDIAN	../util/cdecs.h	/^typedef enum _FT_ENDIAN FT_ENDIAN;$/;"	t	typeref:enum:_FT_ENDIAN
FT_ESET_HANDLE	iTaps.h	/^typedef struct _FT_ESET_HANDLE FT_ESET_HANDLE;$/;"	t	typeref:struct:_FT_ESET_HANDLE
FT_ETAG	iTaps.h	/^typedef struct _FT_ETAG FT_ETAG;$/;"	t	typeref:struct:_FT_ETAG
FT_LITTLE_ENDIAN	../util/cdecs.h	/^	FT_LITTLE_ENDIAN  = -1, \/* Little endian byte ordering *\/$/;"	e	enum:_FT_ENDIAN
FT_UNKNOWN_ENDIAN	../util/cdecs.h	/^	FT_UNKNOWN_ENDIAN =  0, \/* Undetermined byte ordering *\/$/;"	e	enum:_FT_ENDIAN
FT_last_error	iMesh.c	/^struct iBase_Error FT_last_error;$/;"	v	typeref:struct:iBase_Error
FULL_EDGE	int.h	/^        FULL_EDGE = 2,$/;"	e	enum:_ELEMENT_TYPE
FULL_TRI_GEOMETRY	int.h	/^	FULL_TRI_GEOMETRY = 0x100$/;"	e	enum:_TRI_STORAGE_TYPE
FUNCTION_ENTRY	../util/navdecs.h	265;"	d
FUNCTION_EXIT	../util/navdecs.h	266;"	d
FUNCTION_FAILED	../util/cdecs.h	/^		FUNCTION_FAILED    = FALSE,$/;"	e	enum:_boolean
FUNCTION_SUCCEEDED	../util/cdecs.h	/^		FUNCTION_SUCCEEDED = TRUE};$/;"	e	enum:_boolean
Fast_Two_Sum	triangle.c	1885;"	d	file:
Fast_Two_Sum_Tail	triangle.c	1881;"	d	file:
Fclose	../util/output.c	/^EXPORT int Fclose($/;"	f
FirstFreeChunk	intfc.c	/^LOCAL	struct Chunk	*FirstFreeChunk = NULL, *LastFreeChunk = NULL;$/;"	v	typeref:struct:Chunk
FirstFreeTable	intfc.c	/^LOCAL	struct Table	*FirstFreeTable = NULL, *LastFreeTable = NULL;$/;"	v	typeref:struct:Table
FirstIT	intfc.c	/^LOCAL struct Table *FirstIT = NULL;	\/* The Interface Table List *\/$/;"	v	typeref:struct:Table
FirstItemInBlock	triangle.c	/^LOCAL void *FirstItemInBlock($/;"	f
Following_bond	int.h	1122;"	d
Following_side_at_vertex	int.h	1289;"	d
Following_tri_at_vertex	int.h	1274;"	d
FronTier_COMM	../util/ppsub.c	/^LOCAL   MPI_Comm FronTier_COMM;$/;"	v
GEOMETRY_REMAP	geom.h	/^} GEOMETRY_REMAP;$/;"	t	typeref:enum:__anon25
GL	geom.h	/^	double GL[3];	  \/* Lower corner of global grid *\/$/;"	m	struct:_RECT_GRID
GLINE	iprt3d.c	/^} GLINE;$/;"	t	typeref:struct:__anon8	file:
GLOBAL_IMAX_TAG	../util/cdecs.h	/^	GLOBAL_IMAX_TAG,$/;"	e	enum:__anon78
GLOBAL_IMIN_TAG	../util/cdecs.h	/^	GLOBAL_IMIN_TAG,$/;"	e	enum:__anon78
GLOBAL_INDICES	int.h	/^	GLOBAL_INDICES = 0,$/;"	e	enum:__anon68
GLOBAL_IOR_TAG	../util/cdecs.h	/^	GLOBAL_IOR_TAG,$/;"	e	enum:__anon78
GLOBAL_ISUM_TAG	../util/cdecs.h	/^	GLOBAL_ISUM_TAG,$/;"	e	enum:__anon78
GLOBAL_MAX_TAG	../util/cdecs.h	/^	GLOBAL_MAX_TAG,$/;"	e	enum:__anon78
GLOBAL_MIN_TAG	../util/cdecs.h	/^	GLOBAL_MIN_TAG,$/;"	e	enum:__anon78
GLOBAL_STATUS_TAG	../util/cdecs.h	/^	GLOBAL_STATUS_TAG,$/;"	e	enum:__anon78
GLOBAL_SUM_TAG	../util/cdecs.h	/^	GLOBAL_SUM_TAG,$/;"	e	enum:__anon78
GOOD_ANGLE	iredist.c	/^        GOOD_ANGLE$/;"	e	enum:_TRI_STATUS	file:
GOOD_ANGLE	iredist_o2.c	/^        GOOD_ANGLE$/;"	e	enum:_TRI_STATUS	file:
GPT	iprt3d.c	/^} GPT;$/;"	t	typeref:struct:__anon6	file:
GREEN	../util/plotdecs.h	/^	GREEN,$/;"	e	enum:__anon83
GRID_DIRECTION	int.h	/^typedef enum _GRID_DIRECTION GRID_DIRECTION;$/;"	t	typeref:enum:_GRID_DIRECTION
GRID_TYPE	geom.h	/^} GRID_TYPE;$/;"	t	typeref:enum:__anon26
GTRI	iprt3d.c	/^} GTRI;$/;"	t	typeref:struct:__anon7	file:
GU	geom.h	/^	double GU[3];	  \/* Upper corner of global grid *\/$/;"	m	struct:_RECT_GRID
GetNextFreeChunk	intfc.c	/^LOCAL	struct Chunk *GetNextFreeChunk($/;"	f
GetNextFreeTable	intfc.c	/^LOCAL	struct Table	*GetNextFreeTable(void)$/;"	f
Gets	../util/screen.c	/^EXPORT	char *Gets(char *s)$/;"	f
Gets_BUF_SIZE	../util/cdecs.h	/^	Gets_BUF_SIZE = 513$/;"	e	enum:__anon76
Global_grid	int.h	/^	RECT_GRID Global_grid;	\/* Rect_grid of total region		*\/$/;"	m	struct:__anon70
GridIntfcComp	map.c	/^EXPORT	COMPONENT *GridIntfcComp($/;"	f
GridSegCrossing	map.c	/^EXPORT	int GridSegCrossing($/;"	f
H	geom.h	/^        double H;$/;"	m	struct:__anon48
HEADER_OFFSET	../util/vectormalloc.c	/^LOCAL const int HEADER_OFFSET = sizeof(ALIGN)*num_aligns(sizeof(ALLOC_HEADER));$/;"	v
HR	iprt3d.c	/^LOCAL int HR;$/;"	v
HUGE	../util/cdecs.h	116;"	d
HUGE	../util/cdecs.h	117;"	d
HYPER_SURF	int.h	/^typedef struct _HYPER_SURF HYPER_SURF;$/;"	t	typeref:struct:_HYPER_SURF
HYPER_SURF_BDRY	int.h	/^typedef struct _HYPER_SURF_BDRY HYPER_SURF_BDRY;$/;"	t	typeref:struct:_HYPER_SURF_BDRY
HYPER_SURF_ELEMENT	int.h	/^typedef union _HYPER_SURF_ELEMENT HYPER_SURF_ELEMENT;$/;"	t	typeref:union:_HYPER_SURF_ELEMENT
HasGen	../util/cdecs.h	102;"	d
HasGen	../util/cdecs.h	98;"	d
Hyper_surf	int.h	825;"	d
Hyper_surf_bdry	int.h	843;"	d
Hyper_surf_element	int.h	837;"	d
Hyper_surf_index	int.h	826;"	d
I1	int.h	/^	int I1, I2, I3;  $/;"	m	struct:_INDEX
I2	int.h	/^	int I1, I2, I3;  $/;"	m	struct:_INDEX
I3	int.h	/^	int I1, I2, I3;  $/;"	m	struct:_INDEX
IDENTITY_REMAP	geom.h	/^	IDENTITY_REMAP    = 1,	\/* identity conformal map *\/$/;"	e	enum:__anon25
IGEOM_CBIND_H__	iGeom.h	2;"	d
IG_NTOL	int.h	1399;"	d
IG_ONEMNTOL	int.h	1401;"	d
IG_ONEMTOL	int.h	1402;"	d
IG_TOL	int.h	1400;"	d
IMESH_CBIND_H__	iMesh.h	2;"	d
IMESH_MAJOR_VERSION	iMesh.h	4;"	d
IMESH_MINOR_VERSION	iMesh.h	5;"	d
IMPORT	../util/cdecs.h	295;"	d
INACCURATE_INTEGRAL	../util/cdecs.h	/^	INACCURATE_INTEGRAL  = 1,$/;"	e	enum:_QUADRATURE_STATUS
INCLUDE_BOUNDARIES	int.h	/^	INCLUDE_BOUNDARIES    = 1,$/;"	e	enum:_USE_BOUNDARIES
INDEX	int.h	/^typedef struct _INDEX INDEX;$/;"	t	typeref:struct:_INDEX
INEXACT	triangle.c	232;"	d	file:
INIT_DATA	../util/cdecs.h	/^typedef struct _INIT_DATA INIT_DATA;$/;"	t	typeref:struct:_INIT_DATA
INSIDE	int.h	/^	INSIDE 	  = 000,$/;"	e	enum:__anon63
INSIDE_DOMAIN	int.h	/^        INSIDE_DOMAIN = -3,$/;"	e	enum:_DOMAIN_FLAG
INSIDE_WALL	int.h	/^        INSIDE_WALL = 0,$/;"	e	enum:_EDGE_FLAG
INT	../util/vmalloc.h	64;"	d
INT0	../util/navdecs.h	158;"	d
INT0	../util/navdecs.h	323;"	d
INT1	../util/navdecs.h	159;"	d
INT1	../util/navdecs.h	324;"	d
INTEGER0	../util/navdecs.h	163;"	d
INTEGER0	../util/navdecs.h	326;"	d
INTEGER1	../util/navdecs.h	164;"	d
INTEGER1	../util/navdecs.h	327;"	d
INTERFACE	int.h	/^typedef struct _INTERFACE INTERFACE;$/;"	t	typeref:struct:_INTERFACE
INTERFACE_ADDRESSES	iloc.h	/^} INTERFACE_ADDRESSES;$/;"	t	typeref:struct:__anon51
INTERFACE_SET	iTaps.h	/^        INTERFACE_SET$/;"	e	enum:_ES_TYPE
INTERNAL	int.h	/^        INTERNAL = 2,$/;"	e	enum:_CELL_TYPE
INTERNAL_DEBUG_PARAMS	../util/debug.c	/^typedef struct _INTERNAL_DEBUG_PARAMS INTERNAL_DEBUG_PARAMS;$/;"	t	typeref:struct:_INTERNAL_DEBUG_PARAMS	file:
INTRIANGLE	triangle.c	/^    INTRIANGLE,$/;"	e	enum:locateresult	file:
INVALID_EPSILON	../util/cdecs.h	/^	INVALID_EPSILON      = 6$/;"	e	enum:_QUADRATURE_STATUS
INVALID_REMAP	geom.h	/^	INVALID_REMAP     = 0,$/;"	e	enum:__anon25
IOUTPUT	../util/output.c	/^typedef struct _IOUTPUT IOUTPUT;$/;"	t	typeref:struct:_IOUTPUT	file:
IO_NODE_ID	../util/cdecs.h	/^	IO_NODE_ID = 0,    \/* processor node used as IO node*\/$/;"	e	enum:__anon78
IO_TYPE	../util/cdecs.h	/^typedef struct _IO_TYPE IO_TYPE;$/;"	t	typeref:struct:_IO_TYPE
ITAPS	iBase.h	5;"	d
ITAPS	iGeom.h	61;"	d
ITAPS	iMesh.h	88;"	d
ITAPS	iTaps.h	2;"	d
I_INIT_DATA	int.h	/^typedef struct _I_INIT_DATA I_INIT_DATA;$/;"	t	typeref:struct:_I_INIT_DATA
I_INTERFACE	userint.h	/^typedef struct _I_INTERFACE I_INTERFACE;$/;"	t	typeref:struct:_I_INTERFACE
I_INTERFACE_TOLERANCES	userint.h	/^typedef I_USER_INTERFACE::_I_INTERFACE_TOLERANCES I_INTERFACE_TOLERANCES;$/;"	t
I_INTERFACE_TOLERANCES	userint.h	/^typedef struct _I_INTERFACE_TOLERANCES I_INTERFACE_TOLERANCES;$/;"	t	typeref:struct:_I_INTERFACE_TOLERANCES
I_USER_INTERFACE	userint.h	/^typedef struct _I_USER_INTERFACE I_USER_INTERFACE;$/;"	t	typeref:struct:_I_USER_INTERFACE
I_user_intfc	userint.h	/^	I_USER_INTERFACE I_user_intfc;$/;"	m	struct:_I_INTERFACE
IfaceType	iRel.h	/^  enum IfaceType $/;"	g
Index_of_point	int.h	102;"	d
Index_on_side	int.h	1255;"	d
Index_on_side01	int.h	1252;"	d
Index_on_side12	int.h	1253;"	d
Index_on_side20	int.h	1254;"	d
InterfaceTolerances	userint.h	313;"	d
Intfc	userint.h	/^	INTERFACE Intfc;$/;"	m	struct:_I_INTERFACE
IntfcGetPointChain	map.c	/^EXPORT	boolean IntfcGetPointChain($/;"	f
Io_type	../util/output.c	/^	IO_TYPE Io_type;$/;"	m	struct:_IOUTPUT	file:
Is_outside	int.h	819;"	d
IterData	iTaps.h	/^typedef struct _IterData IterData;$/;"	t	typeref:struct:_IterData
L	geom.h	/^	double *L,*U; 		\/* domain length in each direction *\/$/;"	m	struct:__anon30
L	geom.h	/^	double L[3];	  \/* Lower corner of rectangle containing grid *\/$/;"	m	struct:_RECT_GRID
L	geom.h	/^        double *L;$/;"	m	struct:__anon32
L0	geom.h	/^        double L0;$/;"	m	struct:_COMM_BOX
L1	geom.h	/^        double L1;$/;"	m	struct:_COMM_BOX
LARGE	iredist.c	/^        LARGE,$/;"	e	enum:_TRI_STATUS	file:
LARGE	iredist_o2.c	/^        LARGE,$/;"	e	enum:_TRI_STATUS	file:
LEFTCOLLINEAR	triangle.c	/^    LEFTCOLLINEAR,$/;"	e	enum:finddirectionresult	file:
LEFT_BDRY	int.h	/^    LEFT_BDRY	=  0,$/;"	e	enum:_BDRY_SIDE
LEFT_TO_RIGHT	int.h	/^        LEFT_TO_RIGHT  = 1,$/;"	e	enum:_CROSSING_DIRECTION
LEGENDRE_POLY	geom.h	/^} LEGENDRE_POLY;$/;"	t	typeref:struct:__anon31
LIB_LOCAL	../util/cdecs.h	298;"	d
LIMIT_CNT	../util/navdecs.h	156;"	d
LIMIT_TRACE	../util/navdecs.h	268;"	d
LIMIT_VALUE	../util/navdecs.h	155;"	d
LINE_PARAMS	geom.h	/^} LINE_PARAMS;$/;"	t	typeref:struct:__anon36
LOCAL	../util/cdecs.h	296;"	d
LOCAL_INDICES	int.h	/^	LOCAL_INDICES  = 1$/;"	e	enum:__anon68
LONGEST	iredist.c	/^        LONGEST  = 1$/;"	e	enum:_SPQ_FLAG	file:
LONGEST	iredist_o2.c	/^        LONGEST  = 1$/;"	e	enum:_SPQ_FLAG	file:
LOOK	../util/navdecs.h	193;"	d
LOOP_SMOOTH_PARA	itrisset.c	2623;"	d	file:
LOWER	int.h	/^        LOWER = 0x20$/;"	e	enum:_GRID_DIRECTION
LOWER_BDRY	int.h	/^    LOWER_BDRY	=  2,$/;"	e	enum:_BDRY_SIDE
LSODE_FUNC	../util/cdecs.h	/^typedef void (LSODE_FUNC)(int*,double*,double*,double*);$/;"	t
LSODE_JAC	../util/cdecs.h	/^typedef void (LSODE_JAC)(int*,double*,double*,int*,int*,double*,int*);$/;"	t
LastFreeChunk	intfc.c	/^LOCAL	struct Chunk	*FirstFreeChunk = NULL, *LastFreeChunk = NULL;$/;"	v	typeref:struct:
LastFreeTable	intfc.c	/^LOCAL	struct Table	*FirstFreeTable = NULL, *LastFreeTable = NULL;$/;"	v	typeref:struct:
LastIT	intfc.c	/^LOCAL struct Table *LastIT = NULL;$/;"	v	typeref:struct:Table
M	iprt3d.c	/^LOCAL double M[3][3];$/;"	v
MACH_EPS	../util/cdecs.h	137;"	d
MAGENTA	../util/plotdecs.h	/^	MAGENTA,$/;"	e	enum:__anon83
MATRIX	../util/vmalloc.h	140;"	d
MAXD	geom.h	/^	MAXD = 3$/;"	e	enum:__anon23
MAXNCORNERS	int.h	/^	MAXNCORNERS = (1<<MAXD)	\/* MAX no. corners *\/$/;"	e	enum:__anon66
MAX_ANG_COMP	comp3d.c	4045;"	d	file:
MAX_BYTES	../util/debug.c	/^enum { MAX_BYTES = 500 };	\/* Max Number of characters in names (total) *\/$/;"	e	enum:__anon15	file:
MAX_CHARS	../util/debug.c	/^enum { MAX_CHARS = 8 };	\/* Max Number of characters used per name *\/$/;"	e	enum:__anon16	file:
MAX_CHARS	../util/navdecs.h	67;"	d
MAX_CRX_FILL	int.h	/^        MAX_CRX_FILL = 100  \/* Maximum number of missing crxings to be filled *\/$/;"	e	enum:__anon62
MAX_CURVE	imksurf.c	3460;"	d	file:
MAX_DEBUG_LINES	../util/debug.c	/^	MAX_DEBUG_LINES = 2*MAX_TRACE,$/;"	e	enum:__anon18	file:
MAX_FLOATS	../util/other.c	/^enum { MAX_FLOATS = 255 };$/;"	e	enum:__anon19	file:
MAX_LINE_LEN	../util/debug.c	/^	MAX_LINE_LEN    = 77$/;"	e	enum:__anon18	file:
MAX_LSQ_PTS	geom.h	/^	MAX_LSQ_PTS = 100$/;"	e	enum:__anon24
MAX_NAMES	../util/debug.c	/^enum { MAX_NAMES = 50 };	\/* Max Number of debugging names *\/$/;"	e	enum:__anon14	file:
MAX_NEW_TRIS	itrisset.c	1775;"	d	file:
MAX_NULL_SIDE_LOOP	itrisset.c	2182;"	d	file:
MAX_NUM_CRX	int.h	/^        MAX_NUM_CRX  = 100, \/* Maximum number of crossing on a block side *\/$/;"	e	enum:__anon62
MAX_NUM_CRXINGS_ON_SEG	map.c	569;"	d	file:
MAX_NUM_CURVES	imksurf.c	2241;"	d	file:
MAX_NUM_SEGMENTS	imkcurve.c	94;"	d	file:
MAX_ORDER	../util/vectormalloc.c	/^LOCAL const unsigned int MAX_ORDER = 10;$/;"	v
MAX_ORDER	../util/vectormalloc.c	/^enum { MAX_ORDER = 10 };$/;"	e	enum:__anon21	file:
MAX_OUT_TRIS	itrisset.c	2930;"	d	file:
MAX_PTS	isub.c	992;"	d	file:
MAX_RING1_PTS	isub.c	3419;"	d	file:
MAX_RING2_PTS	isub.c	3420;"	d	file:
MAX_RING_PTS	iredist_o2.c	1611;"	d	file:
MAX_SIDES_TRIS	itrisset.c	1876;"	d	file:
MAX_TANGLED_TRIS	itrisset.c	1046;"	d	file:
MAX_TEST_TRIS	itrisset.c	1047;"	d	file:
MAX_TIMES	../util/times.c	/^LOCAL	int  MAX_TIMES = 0;	\/* Length of cputime stack *\/$/;"	v
MAX_TRACE	../util/debug.c	/^enum { MAX_TRACE = 50 };	\/* Length of traceback *\/$/;"	e	enum:__anon17	file:
MAX_TRIS_AT_VERTEX	isurgery.c	/^	MAX_TRIS_AT_VERTEX =  100$/;"	e	enum:__anon10	file:
MAX_TRIS_SET	itrisset.c	1170;"	d	file:
MAX_TRI_LISTS	itrisset.c	1448;"	d	file:
MAX_TRI_PAIRS	itrisset.c	2091;"	d	file:
MC_PARAMS	geom.h	/^} MC_PARAMS;$/;"	t	typeref:struct:__anon46
MESH	iTaps.h	78;"	d
MINUS_CUT	geom.h	/^	MINUS_CUT = -1$/;"	e	enum:__anon27
MIN_INTERIOR_COMP	table.h	/^	MIN_INTERIOR_COMP = 1$/;"	e	enum:__anon75
MIN_SCALED_LENGTH	userint.h	317;"	d
MIN_SC_SEP	userint.h	316;"	d
MIN_SIN_SQR	userint.h	315;"	d
MIN_TRI_STORAGE	int.h	/^	MIN_TRI_STORAGE   = 0x001,$/;"	e	enum:_TRI_STORAGE_TYPE
MIXED_TYPE_BOUNDARY	int.h	/^	MIXED_TYPE_BOUNDARY,$/;"	e	enum:__anon64
MPI_FLOAT_OR_DOUBLE	../util/ppsub.c	814;"	d	file:
MSG_BUF_SIZE	../util/ppsub.c	/^LOCAL	size_t MSG_BUF_SIZE = 32000000;$/;"	v
MULTIPLE	int.h	/^        MULTIPLE = 1$/;"	e	enum:_CRX_TYPE
M_ELLIP_PARAMS	geom.h	/^} M_ELLIP_PARAMS;$/;"	t	typeref:struct:__anon47
Mag3d	int.h	1030;"	d
N	geom.h	/^        double N[MAXD];		\/* normal of the plane *\/$/;"	m	struct:__anon34
NALegendre	../util/sphhar.c	/^EXPORT	double	NALegendre($/;"	f
NAME_LIST	../util/fsort.c	/^typedef struct _NAME_LIST NAME_LIST;$/;"	t	typeref:struct:_NAME_LIST	file:
NAVIGATE	../util/navdecs.h	197;"	d
NAVIGATE_CNT	../util/navdecs.h	150;"	d
NAVIGATING	../util/navdecs.h	189;"	d
NAV_ENTER	../util/navdecs.h	276;"	d
NAV_ENTER	../util/navdecs.h	71;"	d
NAV_LEAVE	../util/navdecs.h	283;"	d
NAV_LEAVE	../util/navdecs.h	72;"	d
NEGATIVE_ORIENTATION	geom.h	/^	NEGATIVE_ORIENTATION=2,$/;"	e	enum:__anon28
NEGATIVE_SIDE	geom.h	/^    NEGATIVE_SIDE =  1,$/;"	e	enum:_SIDE
NEIGHBORHOOD	int.h	/^typedef struct _NEIGHBORHOOD NEIGHBORHOOD;$/;"	t	typeref:struct:_NEIGHBORHOOD
NEITHER_FOUND	int.h	/^        NEITHER_FOUND = 0,$/;"	e	enum:_COMP_EQUIV_LIST
NEW_COMP	int.h	/^	NEW_COMP         = -3,$/;"	e	enum:__anon65
NO	../util/cdecs.h	/^		NO                 = FALSE,$/;"	e	enum:_boolean
NOBINARY	top.c	2003;"	d	file:
NOBUF	geom.h	72;"	d
NODE	int.h	/^typedef struct _NODE NODE;$/;"	t	typeref:struct:_NODE
NONE	../util/cdecs.h	/^	NONE=             0,	\/* Indicates no debugging requested *\/$/;"	e	enum:_DEBUG_MODE
NONE_EDGE	int.h	/^        NONE_EDGE = 0,$/;"	e	enum:_ELEMENT_TYPE
NORTH	int.h	/^        NORTH = 0x04,$/;"	e	enum:_GRID_DIRECTION
NOTHING	../util/debug.c	/^static const char *NOTHING = "";$/;"	v	file:
NOT_A_BDRY	int.h	/^    NOT_A_BDRY  = -1,$/;"	e	enum:_BDRY_SIDE
NO_BINARY_VERSION	../util/plotdecs.h	/^	NO_BINARY_VERSION = 0,$/;"	e	enum:__anon82
NO_BOUNDARIES	int.h	/^	NO_BOUNDARIES         = 0,$/;"	e	enum:_USE_BOUNDARIES
NO_COMP	int.h	/^	NO_COMP          = -1,$/;"	e	enum:__anon65
NO_ROBUST_CROSS_BONDS	isub.c	1856;"	d	file:
NO_SUBDOMAIN	int.h	/^	NO_SUBDOMAIN          = 2$/;"	e	enum:_USE_BOUNDARIES
NULL_LOOP	itrisset.c	/^}	NULL_LOOP;$/;"	t	typeref:struct:__anon12	file:
NUM_INTERFACES	testintfc.c	65;"	d	file:
NUM_ITER	../util/roots.c	/^enum {NUM_ITER = 50};$/;"	e	enum:__anon20	file:
N_PQ_OPTS	array.h	/^	N_PQ_OPTS$/;"	e	enum:__anon22
Ncorners	int.h	1025;"	d
Neighbor_on_side	int.h	1250;"	d
Neighbor_on_side01	int.h	1247;"	d
Neighbor_on_side12	int.h	1248;"	d
Neighbor_on_side20	int.h	1249;"	d
NextItem	triangle.c	/^LOCAL void *NextItem($/;"	f
Next_bond	int.h	1105;"	d
Next_corner	int.h	1295;"	d
Next_m3	geom.h	297;"	d
Next_m4	trisurf.c	52;"	d	file:
Next_side_at_vertex	int.h	1271;"	d
Next_tri_at_vertex	int3d.c	/^EXPORT	TRI	*Next_tri_at_vertex($/;"	f
Node_of	int.h	1141;"	d
Node_of_hsb	int.h	845;"	d
Node_of_o_curve	int.h	1147;"	d
NofW	geom.h	/^	int NofW;$/;"	m	struct:__anon44
Null	../util/cdecs.h	383;"	d
NumOfCurveBonds	map.c	/^EXPORT int NumOfCurveBonds(CURVE *c)$/;"	f
NumOfCurvePoints	map.c	/^EXPORT 	int NumOfCurvePoints(CURVE *c)$/;"	f
NumOfCurves	map.c	/^EXPORT  int NumOfCurves(INTERFACE *intfc)$/;"	f
NumOfInteriorPoints	map.c	/^EXPORT	int NumOfInteriorPoints($/;"	f
NumOfIntfcBonds	map.c	/^EXPORT int NumOfIntfcBonds(INTERFACE *intfc)$/;"	f
NumOfIntfcPoints	map.c	/^EXPORT  int NumOfIntfcPoints(INTERFACE *intfc)$/;"	f
NumOfIntfcTris	map.c	/^EXPORT	int NumOfIntfcTris(INTERFACE *intfc)$/;"	f
NumOfNodes	map.c	/^EXPORT	int NumOfNodes(INTERFACE *intfc)$/;"	f
NumOfSurfPoints	map.c	/^EXPORT	int NumOfSurfPoints(SURFACE *surf)$/;"	f
NumOfSurfTris	map.c	/^EXPORT	int NumOfSurfTris(SURFACE *s)$/;"	f
NumOfSurfaces	map.c	/^EXPORT  int NumOfSurfaces(INTERFACE *intfc)$/;"	f
Num_curves	int.h	1321;"	d
Num_in_curves	int.h	1323;"	d
Num_neg_curves_of_surface	int.h	1304;"	d
Num_neg_surfaces_of_curve	int.h	1314;"	d
Num_nodes	int.h	1319;"	d
Num_out_curves	int.h	1325;"	d
Num_pos_curves_of_surface	int.h	1301;"	d
Num_pos_surfaces_of_curve	int.h	1311;"	d
Num_pqs_in_block	iredist.c	/^LOCAL	const int	Num_pqs_in_block = 1000;$/;"	v
Num_pqs_in_block	iredist_o2.c	/^LOCAL	const int	Num_pqs_in_block = 1000;$/;"	v
Num_surfaces	int.h	1317;"	d
Num_surfaces_bding_curve	int.h	1307;"	d
Numi	igview.c	/^	int Numi;$/;"	m	struct:DATA	file:
ONE	triangledefs.h	/^enum BinaryDigit { ZERO = 0, ONE = 1};$/;"	e	enum:BinaryDigit
ONED	geom.h	47;"	d
ONEDGE	geom.h	/^    ONEDGE	  =  2,$/;"	e	enum:_SIDE
ONEDGE	triangle.c	/^    ONEDGE,$/;"	e	enum:locateresult	file:
ONFRONT	int.h	/^	ONFRONT          = -2,$/;"	e	enum:__anon65
ONVERTEX	geom.h	/^    ONVERTEX      =  3,$/;"	e	enum:_SIDE
ONVERTEX	triangle.c	/^    ONVERTEX,$/;"	e	enum:locateresult	file:
ON_RECT_BOUNDARY	int.h	/^	ON_RECT_BOUNDARY = -4,$/;"	e	enum:__anon65
ON_WALL	int.h	/^        ON_WALL = 1,$/;"	e	enum:_EDGE_FLAG
OPEN_BOUNDARY	int.h	/^	OPEN_BOUNDARY,$/;"	e	enum:__anon64
OPPOSITEAPEX	triangle.c	/^    OPPOSITEAPEX$/;"	e	enum:circumcenterresult	file:
OPPOSITEDEST	triangle.c	/^    OPPOSITEDEST,$/;"	e	enum:circumcenterresult	file:
OPPOSITEORG	triangle.c	/^    OPPOSITEORG,$/;"	e	enum:circumcenterresult	file:
ORIENTATION	geom.h	/^} ORIENTATION;$/;"	t	typeref:enum:__anon28
ORIENTATION_NOT_SET	geom.h	/^	ORIENTATION_NOT_SET=-1$/;"	e	enum:__anon28
OUTPUT	../util/cdecs.h	/^typedef void OUTPUT;$/;"	t
OUTSIDE	triangle.c	/^    OUTSIDE$/;"	e	enum:locateresult	file:
OUTSIDE_DOMAIN	int.h	/^	OUTSIDE_DOMAIN = -2,$/;"	e	enum:_DOMAIN_FLAG
OUTSIDE_WALL	int.h	/^	OUTSIDE_WALL = 2$/;"	e	enum:_EDGE_FLAG
O_CURVE	int.h	/^typedef struct _O_CURVE O_CURVE;$/;"	t	typeref:struct:_O_CURVE
O_CURVE_FAMILY	int.h	/^typedef struct _O_CURVE_FAMILY O_CURVE_FAMILY;$/;"	t	typeref:struct:_O_CURVE_FAMILY
O_NODE	int.h	/^typedef struct _O_NODE O_NODE;$/;"	t	typeref:struct:_O_NODE
O_SURFACE	int.h	/^typedef struct _O_SURFACE O_SURFACE;$/;"	t	typeref:struct:_O_SURFACE
OmitVertexInPlaneFit	isub.c	/^LOCAL	boolean	OmitVertexInPlaneFit = NO;$/;"	v
Opp_node_of	int.h	1144;"	d
Opp_node_of_o_curve	int.h	1151;"	d
Opposite_ang_dir	geom.h	288;"	d
Opposite_orient	geom.h	283;"	d
Opposite_side	geomutils.c	/^EXPORT	SIDE Opposite_side($/;"	f
Opts	triangledefs.h	/^    TriangulateOpts Opts;$/;"	m	struct:triangulateio
Order_data	int.h	107;"	d
Output	../util/output.c	/^	IOUTPUT Output;$/;"	m	struct:_READ_LIST	file:
P	geom.h	/^        double P[MAXD];		\/* a point on the plane *\/$/;"	m	struct:__anon34
P2_from_p2str	arrayutils.c	479;"	d	file:
PARALLEL	userint.h	314;"	d
PARTIAL	int.h	/^        PARTIAL = 1,$/;"	e	enum:_CELL_TYPE
PARTIAL_EDGE	int.h	/^        PARTIAL_EDGE = 1,$/;"	e	enum:_ELEMENT_TYPE
PERIODIC_BOUNDARY	int.h	/^	PERIODIC_BOUNDARY     =  1,$/;"	e	enum:__anon64
PI	../util/cdecs.h	385;"	d
PI	triangle.c	/^LOCAL const double PI = 3.141592653589793238462643383279502884197169399375105820974944592308;$/;"	v
PI	triangle.c	260;"	d	file:
PLANE_PARAMS	geom.h	/^} PLANE_PARAMS;$/;"	t	typeref:struct:__anon34
PLOTFILE	../util/plotdecs.h	333;"	d
PLOTFILE	iprt3d.c	55;"	d	file:
PLOTFILE	iprt3d.c	56;"	d	file:
PLOTFILE	top.c	2006;"	d	file:
PLOTFILE	top.c	2007;"	d	file:
PLOT_DATA	igview.c	/^struct DATA PLOT_DATA;$/;"	v	typeref:struct:DATA
PLUS_CUT	geom.h	/^	PLUS_CUT  =  1,$/;"	e	enum:__anon27
POINT	int.h	/^typedef struct _POINT POINT;$/;"	t	typeref:struct:_POINT
POINTER	../util/cdecs.h	/^typedef  void	    *POINTER;	\/* Pointer to Unknown Data Types. *\/$/;"	t
POINTER_Q	array.h	/^typedef struct _POINTER_Q POINTER_Q;$/;"	t	typeref:struct:_POINTER_Q
POINTPERBLOCK	triangle.c	/^LOCAL const int POINTPERBLOCK = 4092; \/* Number of points allocated at once. *\/$/;"	v
POINTR	../util/navdecs.h	174;"	d
POINTR	../util/navdecs.h	333;"	d
POINT_SET	iTaps.h	/^	POINT_SET		= 	1,$/;"	e	enum:_ES_TYPE
POSITIVE_ORIENTATION	geom.h	/^	POSITIVE_ORIENTATION=1,$/;"	e	enum:__anon28
POSITIVE_SIDE	geom.h	/^    POSITIVE_SIDE =  0,$/;"	e	enum:_SIDE
PP_GRID	int.h	/^} PP_GRID; $/;"	t	typeref:struct:__anon70
PQ_ALLOCATOR	arrayutils.c	/^typedef enum _PQ_ALLOCATOR PQ_ALLOCATOR;$/;"	t	typeref:enum:_PQ_ALLOCATOR	file:
PQ_ALLOC_SIZE_FOR_POINTERS	array.h	/^	PQ_ALLOC_SIZE_FOR_POINTERS,$/;"	e	enum:__anon22
PQ_ALLOC_TYPE	array.h	/^	PQ_ALLOC_TYPE,$/;"	e	enum:__anon22
PQ_BLOCK_SIZE	array.h	/^	PQ_BLOCK_SIZE,$/;"	e	enum:__anon22
PQ_DEFAULTS	array.h	/^	PQ_DEFAULTS		    = 0,$/;"	e	enum:__anon22
PQ_HEADER	arrayutils.c	/^typedef struct _PQ_HEADER PQ_HEADER;$/;"	t	typeref:struct:_PQ_HEADER	file:
PQ_for_tri	iredist.c	566;"	d	file:
PQ_for_tri	iredist_o2.c	855;"	d	file:
PRESERVE_USER_HOOKS	userint.h	/^typedef enum _PRESERVE_USER_HOOKS PRESERVE_USER_HOOKS;$/;"	t	typeref:enum:_PRESERVE_USER_HOOKS
PRINT_GRID_DIMENSION	igrid.c	927;"	d	file:
PROJECTILE_PARAMS	geom.h	/^} PROJECTILE_PARAMS;$/;"	t	typeref:struct:__anon49
PROMPT_FOR_DEBUG	../util/cdecs.h	/^	PROMPT_FOR_DEBUG=-1,	\/*Initiate debug prompting*\/$/;"	e	enum:_DEBUG_MODE
PROPELLER_PARAMS	geom.h	/^} PROPELLER_PARAMS;$/;"	t	typeref:struct:__anon44
PTR_LIST	arrayutils.c	/^typedef struct _PTR_LIST PTR_LIST;$/;"	t	typeref:struct:_PTR_LIST	file:
P_LINK	int.h	/^typedef struct _P_LINK P_LINK;$/;"	t	typeref:struct:_P_LINK
P_q	arrayutils.c	/^	POINTER_Q P_q;$/;"	m	struct:_PTR_LIST	file:
P_sd	geom.h	/^        double A_sd, P_sd, av_phase;$/;"	m	struct:__anon30
Patch_bdry_flag	int_amr.h	/^typedef struct _PATCH_BDRY_FLAG Patch_bdry_flag;$/;"	t	typeref:struct:_PATCH_BDRY_FLAG
Point	userhooks.c	/^EXPORT	POINT *Point($/;"	f
PointArrayRing1	isub.c	/^EXPORT	void	PointArrayRing1($/;"	f
PointArrayRing2	isub.c	/^EXPORT	void	PointArrayRing2($/;"	f
Point_adjacent_to_node	int.h	1134;"	d
Point_flags	int.h	1156;"	d
Point_of_bond	int.h	1128;"	d
Point_of_hs	int.h	828;"	d
Point_of_tri	int.h	1160;"	d
Point_on_tri	int.h	1257;"	d
Point_order	int.h	108;"	d
Pointer_q_from_pq_str	arrayutils.c	477;"	d	file:
Pointer_queue_header	arrayutils.c	475;"	d	file:
PoolBlock	triangle.c	/^struct PoolBlock {$/;"	s	file:
PoolBlock	triangle.c	/^typedef struct PoolBlock PoolBlock;$/;"	t	typeref:struct:PoolBlock	file:
PoolBlockSize	triangle.c	/^LOCAL size_t PoolBlockSize($/;"	f
Powerof2	../util/fft.c	/^EXPORT boolean Powerof2($/;"	f
Prev_bond	int.h	1102;"	d
Prev_corner	int.h	1297;"	d
Prev_m3	geom.h	299;"	d
Prev_m4	trisurf.c	53;"	d	file:
Prev_side_at_vertex	int.h	1267;"	d
Prev_tri_at_vertex	int3d.c	/^EXPORT	TRI	*Prev_tri_at_vertex($/;"	f
Previous_side_at_vertex	int.h	1279;"	d
Previous_tri_at_vertex	int.h	1284;"	d
Private_data	int.h	101;"	d
Prompt_type	../util/cdecs.h	/^typedef struct _Prompt_type Prompt_type;$/;"	t	typeref:struct:_Prompt_type
QCross3d	int.h	1047;"	d
QDet3d	int.h	1054;"	d
QDot3d	int.h	1032;"	d
QUADRATURE_STATUS	../util/cdecs.h	/^typedef enum _QUADRATURE_STATUS QUADRATURE_STATUS;$/;"	t	typeref:enum:_QUADRATURE_STATUS
R	geom.h	/^        double R;$/;"	m	struct:__anon35
R	geom.h	/^        double R;$/;"	m	struct:__anon48
R	geom.h	/^        double R;$/;"	m	struct:__anon49
RADIAL_MOTION_PARAMS	testintfc.c	/^typedef struct _RADIAL_MOTION_PARAMS RADIAL_MOTION_PARAMS;$/;"	t	typeref:struct:_RADIAL_MOTION_PARAMS	file:
RCBC_ROBUST_FAC	userint.h	324;"	d
RCB_MACH_TOL	userint.h	323;"	d
RCB_MIN_SC_SEP	userint.h	321;"	d
READ	../util/cdecs.h	/^	READ	  = 0,$/;"	e	enum:__anon80
READ_LIST	../util/output.c	/^typedef struct _READ_LIST READ_LIST;$/;"	t	typeref:struct:_READ_LIST	file:
READ_WRITE	../util/cdecs.h	/^	READ_WRITE$/;"	e	enum:__anon80
REAL	../util/cdecs.h	146;"	d
RECTANGLE_PARAMS	geom.h	/^} RECTANGLE_PARAMS;$/;"	t	typeref:struct:__anon40
RECT_BOX	geom.h	/^typedef struct _RECT_BOX RECT_BOX;$/;"	t	typeref:struct:_RECT_BOX
RECT_GRID	geom.h	/^typedef struct _RECT_GRID RECT_GRID;$/;"	t	typeref:struct:_RECT_GRID
RED	../util/plotdecs.h	/^	RED,$/;"	e	enum:__anon83
REDIRECT_FILES	../util/cdecs.h	/^} REDIRECT_FILES;$/;"	t	typeref:struct:__anon79
REFLECTION_BOUNDARY	int.h	/^	REFLECTION_BOUNDARY,$/;"	e	enum:__anon64
REMAP	geom.h	/^typedef	struct _REMAP REMAP;$/;"	t	typeref:struct:_REMAP
REMAP	geom.h	/^typedef struct _RECT_GRID::_REMAP REMAP;$/;"	t	typeref:struct:_REMAP
REMEMBER_FILENAME	../util/debug.c	/^static const char *REMEMBER_FILENAME = "dnames";     \/* Name of remember file *\/$/;"	v	file:
REMOVE_FROM_DEBUG	../util/navdecs.h	226;"	d
REMOVE_FROM_DEBUG_CNT	../util/navdecs.h	153;"	d
REMOVE_FROM_DEBUG_STRING	../util/navdecs.h	181;"	d
RESTORE_HOOKS	userint.h	/^	RESTORE_HOOKS$/;"	e	enum:_PRESERVE_USER_HOOKS
RETURN	iTaps.h	79;"	d
RIGHTCOLLINEAR	triangle.c	/^    RIGHTCOLLINEAR$/;"	e	enum:finddirectionresult	file:
RIGHT_BDRY	int.h	/^    RIGHT_BDRY	=  1,$/;"	e	enum:_BDRY_SIDE
RIGHT_TO_LEFT	int.h	/^        RIGHT_TO_LEFT  = 2,$/;"	e	enum:_CROSSING_DIRECTION
ROBUST_FAC	userint.h	322;"	d
RTOL	userint.h	325;"	d
Random01_seed	userint.h	329;"	d
Remap	geom.h	/^	} Remap;$/;"	m	struct:_RECT_GRID	typeref:struct:_RECT_GRID::_REMAP
Remap	igrid.c	/^LOCAL	REMAP	Remap = { IDENTITY_REMAP,$/;"	v
ReturnChunksToFreeList	intfc.c	/^LOCAL	void	ReturnChunksToFreeList($/;"	f
ReturnTableToFreeList	intfc.c	/^LOCAL	void	ReturnTableToFreeList($/;"	f
Rotation_matrix	iprt3d.c	/^LOCAL void Rotation_matrix(void)$/;"	f
SAMPLEFACTOR	triangle.c	/^LOCAL const int SAMPLEFACTOR = 11;$/;"	v
SAVE_HOOKS	userint.h	/^	SAVE_HOOKS,$/;"	e	enum:_PRESERVE_USER_HOOKS
SA_FLAGS	../util/cleanup.c	118;"	d	file:
SA_FLAGS	../util/cleanup.c	139;"	d	file:
SEAM	isurgery.c	/^typedef struct _SEAM SEAM;$/;"	t	typeref:struct:_SEAM	file:
SECOND_CLEAN_UP	../util/cleanup.c	116;"	d	file:
SECOND_CLEAN_UP	../util/cleanup.c	137;"	d	file:
SFMT	../util/cdecs.h	148;"	d
SFORTRAN_NAME	../util/cdecs.h	364;"	d
SFORTRAN_NAME	../util/cdecs.h	370;"	d
SHEAR_MOTION_PARAMS	testintfc.c	/^typedef struct _SHEAR_MOTION_PARAMS SHEAR_MOTION_PARAMS;$/;"	t	typeref:struct:_SHEAR_MOTION_PARAMS	file:
SHELLEPERBLOCK	triangle.c	/^LOCAL const int SHELLEPERBLOCK = 508;\/* Number of shell edges allocated at once. *\/$/;"	v
SHORTEST	iredist.c	/^        SHORTEST = 0,$/;"	e	enum:_SPQ_FLAG	file:
SHORTEST	iredist_o2.c	/^        SHORTEST = 0,$/;"	e	enum:_SPQ_FLAG	file:
SHORT_CURVE_NUM_POINTS	userint.h	326;"	d
SHOW_ALLOC	../util/vectormalloc.c	189;"	d	file:
SIDE	geom.h	/^typedef enum _SIDE SIDE;$/;"	t	typeref:enum:_SIDE
SIG_PP_TRAP	../util/cleanup.c	165;"	d	file:
SINE_MOTION_PARAMS	testintfc.c	/^typedef struct _SINE_MOTION_PARAMS SINE_MOTION_PARAMS;$/;"	t	typeref:struct:_SINE_MOTION_PARAMS	file:
SINE_PARAMS	geom.h	/^} SINE_PARAMS;$/;"	t	typeref:struct:__anon50
SINGLE	int.h	/^        SINGLE = 0,$/;"	e	enum:_CRX_TYPE
SMALL	iredist.c	/^        SMALL = 1,$/;"	e	enum:_TRI_STATUS	file:
SMALL	iredist_o2.c	/^        SMALL = 1,$/;"	e	enum:_TRI_STATUS	file:
SMOOTH_PARA	int.h	/^}       SMOOTH_PARA;$/;"	t	typeref:struct:__anon71
SMOOTH_TOL	int.h	/^}       SMOOTH_TOL;$/;"	t	typeref:struct:__anon72
SOME	../util/cdecs.h	/^	SOME=             1,	\/* Indicates debugging requested not with all *\/$/;"	e	enum:_DEBUG_MODE
SOUTH	int.h	/^        SOUTH = 0x08,$/;"	e	enum:_GRID_DIRECTION
SPHERICAL_REMAP	geom.h	/^	SPHERICAL_REMAP   = 3	\/* spherical geometry (oned) *\/$/;"	e	enum:__anon25
SPQ_FLAG	iredist.c	/^typedef enum _SPQ_FLAG SPQ_FLAG;$/;"	t	typeref:enum:_SPQ_FLAG	file:
SPQ_FLAG	iredist_o2.c	/^typedef enum _SPQ_FLAG SPQ_FLAG;$/;"	t	typeref:enum:_SPQ_FLAG	file:
START_OF_CURVE	userint.h	319;"	d
START_TRACE	../util/navdecs.h	190;"	d
STAT_MATRIX	../util/vmalloc.h	169;"	d
STAT_TRI_ARRAY	../util/vmalloc.h	171;"	d
STAT_VECTOR	../util/vmalloc.h	167;"	d
STITCH	isurgery.c	/^typedef struct _STITCH STITCH;$/;"	t	typeref:struct:_STITCH	file:
STOP_TRACE	../util/navdecs.h	191;"	d
STRING_BUG	../util/navdecs.h	184;"	d
STRING_BUG	../util/navdecs.h	335;"	d
STRING_PRECISION	../util/plotdecs.h	/^	STRING_PRECISION = 0,$/;"	e	enum:__anon84
STROKE_PRECISION	../util/plotdecs.h	/^	STROKE_PRECISION = 1$/;"	e	enum:__anon84
SUBDOMAIN_BOUNDARY	int.h	/^	SUBDOMAIN_BOUNDARY    =  1,$/;"	e	enum:__anon64
SUCCESS	iTaps.h	80;"	d
SUCCESSFULPOINT	triangle.c	/^    SUCCESSFULPOINT,$/;"	e	enum:insertsiteresult	file:
SUMMARY	../util/navdecs.h	203;"	d
SUMMARY	../util/navdecs.h	319;"	d
SUMMARY_CNT	../util/navdecs.h	147;"	d
SUPPRESS	../util/navdecs.h	218;"	d
SUPPRESS_CNT	../util/navdecs.h	157;"	d
SURF	int.h	/^typedef struct _SURF SURF;$/;"	t	typeref:struct:_SURF
SURFACE	int.h	/^typedef struct _SURFACE SURFACE;$/;"	t	typeref:struct:_SURFACE
SURFACE_COLOR	int.h	/^typedef enum _SURFACE_COLOR SURFACE_COLOR;$/;"	t	typeref:enum:_SURFACE_COLOR
SURFACE_SET	iTaps.h	/^        SURFACE_SET,$/;"	e	enum:_ES_TYPE
SURF_STITCH	isurgery.c	/^enum {SURF_STITCH,CURV_STITCH};$/;"	e	enum:__anon9	file:
SURGERY	isurgery.c	/^typedef struct _SURGERY SURGERY;$/;"	t	typeref:struct:_SURGERY	file:
SYNC_TAG	../util/cdecs.h	/^	SYNC_TAG,$/;"	e	enum:__anon78
Scanf	../util/screen.c	/^EXPORT	int	Scanf(const char *fmt, ...)$/;"	f
SetChunkSize	iuserintfc.c	/^EXPORT	void	SetChunkSize($/;"	f
Set_free	../util/vmalloc.h	134;"	d
SimpRule	../util/quad.c	/^EXPORT double SimpRule($/;"	f
SizeWork	../util/ppsub.c	/^static	size_t	SizeWork = sizeof(FLI);$/;"	v	file:
SphericalHarmonic	../util/sphhar.c	/^EXPORT	double	*SphericalHarmonic($/;"	f
SphericalHarmonic_i	../util/sphhar.c	/^EXPORT	double	SphericalHarmonic_i($/;"	f
SphericalHarmonic_r	../util/sphhar.c	/^EXPORT	double	SphericalHarmonic_r($/;"	f
SphericalHarmonic_s	../util/sphhar.c	/^EXPORT	double	SphericalHarmonic_s($/;"	f
Split	triangle.c	1911;"	d	file:
Square	triangle.c	1948;"	d	file:
Square_Tail	triangle.c	1942;"	d	file:
Static_point	userhooks.c	/^EXPORT	POINT *Static_point($/;"	f
Store	intfc.c	/^EXPORT	POINTER Store($/;"	f
Store_tri	comp3d.c	2781;"	d	file:
Surface_of_hs	int.h	832;"	d
Surface_of_tri	int.h	1222;"	d
TABLE_ID	int.h	/^	TABLE_ID = USER_MIN_MESG_ID + 1000,$/;"	e	enum:__anon69
TAEGEUK_PARAMS	geom.h	/^} TAEGEUK_PARAMS;$/;"	t	typeref:struct:__anon42
TAGhol	iTaps.h	/^	struct _FT_ETAG *TAGhol; \/* = NULL;*\/$/;"	m	struct:_FTMESH	typeref:struct:_FTMESH::_FT_ETAG
TAGtol	iTaps.h	/^	struct _FT_ETAG *TAGtol;$/;"	m	struct:_FTMESH	typeref:struct:_FTMESH::_FT_ETAG
TDISK_PARAMS	geom.h	/^} TDISK_PARAMS;$/;"	t	typeref:struct:__anon45
TEC_MAX_TRIS	igview.c	576;"	d	file:
TG_PT	int.h	/^typedef struct { double _coords[MAXD];} TG_PT;$/;"	t	typeref:struct:__anon60
THREED	geom.h	49;"	d
TINY	../util/quad.c	/^LOCAL	const double TINY = 5e-29;$/;"	v
TOL_FAC	userint.h	320;"	d
TOP	int.h	/^	TOP	  = 002,$/;"	e	enum:__anon63
TRACE_ONLY	../util/cdecs.h	/^	TRACE_ONLY=	  3	\/* Trace debug calls but don't print messages*\/$/;"	e	enum:_DEBUG_MODE
TRANS_PARAMS	testintfc.c	/^typedef struct _TRANS_PARAMS TRANS_PARAMS;$/;"	t	typeref:struct:_TRANS_PARAMS	file:
TRI	int.h	/^typedef struct _TRI TRI;$/;"	t	typeref:struct:_TRI
TRIANGLE_PARAMS	geom.h	/^} TRIANGLE_PARAMS;$/;"	t	typeref:struct:__anon39
TRIPERBLOCK	triangle.c	/^LOCAL const int TRIPERBLOCK = 4092;\/* Number of triangles allocated at once. *\/$/;"	v
TRI_ARRAY	../util/vmalloc.h	142;"	d
TRI_FullGeometry	isub.c	/^typedef struct _TRI_FullGeometry TRI_FullGeometry;$/;"	t	typeref:struct:_TRI_FullGeometry	file:
TRI_LIST_AT_VERTEX	isub.c	/^typedef struct  _TRI_LIST_AT_VERTEX TRI_LIST_AT_VERTEX;$/;"	t	typeref:struct:_TRI_LIST_AT_VERTEX	file:
TRI_LIST_HEAD	int.h	/^typedef struct {struct _TRI tri; struct _SURFACE *s;} TRI_LIST_HEAD;$/;"	t	typeref:struct:__anon57
TRI_NEIGHBOR	int.h	/^typedef union  _TRI_NEIGHBOR TRI_NEIGHBOR;$/;"	t	typeref:union:_TRI_NEIGHBOR
TRI_PAIR	itrisset.c	/^}	TRI_PAIR;$/;"	t	typeref:struct:__anon11	file:
TRI_PLUS_NORMAL	int.h	/^	TRI_PLUS_NORMAL   = 0x010,$/;"	e	enum:_TRI_STORAGE_TYPE
TRI_PROJECTION	comp3d.c	/^} TRI_PROJECTION;$/;"	t	typeref:struct:__anon3	file:
TRI_Plus_normal	isub.c	/^typedef struct _TRI_Plus_normal TRI_Plus_normal;$/;"	t	typeref:struct:_TRI_Plus_normal	file:
TRI_REDIST_PARAMS	int.h	/^typedef struct _TRI_REDIST_PARAMS TRI_REDIST_PARAMS;$/;"	t	typeref:struct:_TRI_REDIST_PARAMS
TRI_SET	iTaps.h	/^	TRI_SET,$/;"	e	enum:_ES_TYPE
TRI_SORT	itrisset.c	/^}    TRI_SORT;$/;"	t	typeref:struct:__anon13	file:
TRI_STATUS	iredist.c	/^typedef enum _TRI_STATUS TRI_STATUS;$/;"	t	typeref:enum:_TRI_STATUS	file:
TRI_STATUS	iredist_o2.c	/^typedef enum _TRI_STATUS TRI_STATUS;$/;"	t	typeref:enum:_TRI_STATUS	file:
TRI_STORAGE_TYPE	int.h	/^typedef enum _TRI_STORAGE_TYPE TRI_STORAGE_TYPE;$/;"	t	typeref:enum:_TRI_STORAGE_TYPE
TRI_SURF	iredist.c	/^typedef struct _TRI_SURF	TRI_SURF; $/;"	t	typeref:struct:_TRI_SURF	file:
TRI_SURF	iredist_o2.c	/^typedef struct _TRI_SURF	TRI_SURF; $/;"	t	typeref:struct:_TRI_SURF	file:
TRUE	../util/cdecs.h	/^		TRUE               = 1,$/;"	e	enum:_boolean
TRUEfloat	../util/cdecs.h	/^typedef float   TRUEfloat;$/;"	t
TWOD	geom.h	48;"	d
Table	table.h	/^struct Table {$/;"	s
Table	table.h	/^typedef struct Table Table;$/;"	t	typeref:struct:Table
ThetaE	geom.h	/^		      ThetaE[2];	\/* Spherical coords of start and end *\/$/;"	m	struct:__anon33
ThetaS	geom.h	/^	double 	      ThetaS[2],$/;"	m	struct:__anon33
Top_grid	int.h	1367;"	d
Tri	isub.c	/^	TRI Tri;$/;"	m	struct:_TRI_Plus_normal	file:
TriAndFirstRing	isub.c	/^EXPORT	void	TriAndFirstRing($/;"	f
TriAndFirstTwoRings	isub.c	/^EXPORT	void	TriAndFirstTwoRings($/;"	f
TriOpts	triangle.c	/^LOCAL TriangulateOpts TriOpts;$/;"	v
TriPN	isub.c	/^	TRI_Plus_normal TriPN;$/;"	m	struct:_TRI_FullGeometry	file:
Tri_blocks	comp3d.c	/^LOCAL	int *Tri_blocks = NULL;	\/* Temporary Array *\/$/;"	v
Tri_cross_list	int.h	1225;"	d
Tri_icoords	int.h	1226;"	d
Tri_index	int.h	1224;"	d
Tri_list_at_vertex	isub.c	/^LOCAL	TRI_LIST_AT_VERTEX Tri_list_at_vertex;$/;"	v
Tri_modified	int.h	1227;"	d
Tri_neighbor	int.h	1231;"	d
Tri_normal	isub.c	/^EXPORT	const double	*Tri_normal($/;"	f
Tri_normal_vector	isub.c	1439;"	d	file:
Tri_of_hse	int.h	839;"	d
Tri_of_q	iredist.c	569;"	d	file:
Tri_of_q	iredist_o2.c	858;"	d	file:
Tri_on_side	int.h	1235;"	d
Tri_on_side01	int.h	1232;"	d
Tri_on_side12	int.h	1233;"	d
Tri_on_side20	int.h	1234;"	d
Tri_order	int.h	1221;"	d
Tri_projection_computed	int.h	1228;"	d
Tri_surf	iredist.c	565;"	d	file:
Tri_surf	iredist_o2.c	854;"	d	file:
Tri_workspace	int.h	1223;"	d
TriangulateNeighborOnSide	triangledefs.h	368;"	d
TriangulateOpts	triangledefs.h	/^struct TriangulateOpts$/;"	s
TriangulateOpts	triangledefs.h	/^typedef struct TriangulateOpts TriangulateOpts;$/;"	t	typeref:struct:TriangulateOpts
Two_Diff	triangle.c	1907;"	d	file:
Two_Diff_Tail	triangle.c	1900;"	d	file:
Two_One_Diff	triangle.c	1959;"	d	file:
Two_One_Sum	triangle.c	1955;"	d	file:
Two_Product	triangle.c	1925;"	d	file:
Two_Product_Presplit	triangle.c	1932;"	d	file:
Two_Product_Tail	triangle.c	1917;"	d	file:
Two_Sum	triangle.c	1896;"	d	file:
Two_Sum_Tail	triangle.c	1889;"	d	file:
Two_Two_Diff	triangle.c	1967;"	d	file:
Two_Two_Sum	triangle.c	1963;"	d	file:
U	geom.h	/^	double *L,*U; 		\/* domain length in each direction *\/$/;"	m	struct:__anon30
U	geom.h	/^	double U[3];	  \/* Upper corner of rectangle containing grid *\/$/;"	m	struct:_RECT_GRID
U	geom.h	/^        double *U;$/;"	m	struct:__anon32
U0	geom.h	/^        double U0;$/;"	m	struct:_COMM_BOX
U1	geom.h	/^        double U1;$/;"	m	struct:_COMM_BOX
UNKNOWN_BLOCK	int.h	/^        UNKNOWN_BLOCK = -1,$/;"	e	enum:_BLK_TYPE
UNKNOWN_BOUNDARY_TYPE	int.h	/^	UNKNOWN_BOUNDARY_TYPE = -3,$/;"	e	enum:__anon64
UNKNOWN_DOMAIN	int.h	/^	UNKNOWN_DOMAIN = -1$/;"	e	enum:_DOMAIN_FLAG
UNKNOWN_SIDE	geom.h	/^    UNKNOWN_SIDE  = -3,$/;"	e	enum:_SIDE
UNLIMIT_TRACE	../util/navdecs.h	272;"	d
UNUSED_COMP	int.h	/^	UNUSED_COMP      = -5,$/;"	e	enum:__anon65
UPPER	int.h	/^        UPPER = 0x10,$/;"	e	enum:_GRID_DIRECTION
UPPER_BDRY	int.h	/^    UPPER_BDRY	=  3,$/;"	e	enum:_BDRY_SIDE
USER_MIN_MESG_ID	../util/cdecs.h	/^	USER_MIN_MESG_ID = GLOBAL_STATUS_TAG + 10$/;"	e	enum:__anon78
USE_BOUNDARIES	int.h	/^typedef enum _USE_BOUNDARIES USE_BOUNDARIES;$/;"	t	typeref:enum:_USE_BOUNDARIES
USE_STORE_FOR_ALLOC	arrayutils.c	/^	USE_STORE_FOR_ALLOC   = 1,$/;"	e	enum:_PQ_ALLOCATOR	file:
USE_VMALLOC_FOR_ALLOC	arrayutils.c	/^	USE_VMALLOC_FOR_ALLOC,$/;"	e	enum:_PQ_ALLOCATOR	file:
U_init_data	int.h	/^	INIT_DATA	U_init_data;$/;"	m	struct:_I_INIT_DATA
UncompressAndOpenFile	../util/fsort.c	/^EXPORT	FILE	*UncompressAndOpenFile($/;"	f
VECTOR	../util/vmalloc.h	138;"	d
VIOLATINGPOINT	triangle.c	/^    VIOLATINGPOINT,$/;"	e	enum:insertsiteresult	file:
VIRUSPERBLOCK	triangle.c	/^LOCAL const int VIRUSPERBLOCK = 1020; \/* Number of virus triangles allocated at once. *\/$/;"	v
VL	geom.h	/^	double VL[3];	  \/* Lower corner of virtual domain *\/$/;"	m	struct:_RECT_GRID
VOLUME_FRAC	int.h	/^typedef struct _VOLUME_FRAC VOLUME_FRAC;$/;"	t	typeref:struct:_VOLUME_FRAC
VU	geom.h	/^	double VU[3];	  \/* Upper corner of virtual domain *\/$/;"	m	struct:_RECT_GRID
VX	iprt3d.c	/^LOCAL GPT VX,VY;$/;"	v
VY	iprt3d.c	/^LOCAL GPT VX,VY;$/;"	v
Vertex_of_point	int.h	1262;"	d
WEDGE	int.h	/^typedef struct _WEDGE WEDGE;$/;"	t	typeref:struct:_WEDGE
WEST	int.h	/^        WEST  = 0x02,$/;"	e	enum:_GRID_DIRECTION
WHITE	../util/plotdecs.h	/^	WHITE$/;"	e	enum:__anon83
WING_PARAMS	geom.h	/^} WING_PARAMS;$/;"	t	typeref:struct:__anon43
WITHIN	triangle.c	/^    WITHIN,$/;"	e	enum:finddirectionresult	file:
WLSP_compute_normal2d	isub.c	/^EXPORT boolean WLSP_compute_normal2d($/;"	f
WLSP_compute_normal3d	isub.c	/^EXPORT boolean WLSP_compute_normal3d($/;"	f
WLSP_compute_normal3d0	isub.c	/^EXPORT  boolean  WLSP_compute_normal3d0($/;"	f
WLSP_compute_normal3d_cyl	isub.c	/^EXPORT boolean WLSP_compute_normal3d_cyl($/;"	f
WRITE	../util/cdecs.h	/^	WRITE,$/;"	e	enum:__anon80
WRITE_LIST	../util/output.c	/^typedef struct _WRITE_LIST WRITE_LIST;$/;"	t	typeref:struct:_WRITE_LIST	file:
XY_PLANE	int.h	/^    XY_PLANE = 2$/;"	e	enum:_COORDINATE_PLANE
XZ_PLANE	int.h	/^    XZ_PLANE = 1,$/;"	e	enum:_COORDINATE_PLANE
YELLOW	../util/plotdecs.h	/^	YELLOW,$/;"	e	enum:__anon83
YES	../util/cdecs.h	/^		YES                = TRUE,$/;"	e	enum:_boolean
YZ_PLANE	int.h	/^    YZ_PLANE = 0,$/;"	e	enum:_COORDINATE_PLANE
ZERO	triangledefs.h	/^enum BinaryDigit { ZERO = 0, ONE = 1};$/;"	e	enum:BinaryDigit
ZMAX_BDRY	int.h	/^    ZMAX_BDRY	=  5$/;"	e	enum:_BDRY_SIDE
ZMIN_BDRY	int.h	/^    ZMIN_BDRY	=  4,$/;"	e	enum:_BDRY_SIDE
Zoom_grid	int.h	/^	RECT_GRID Zoom_grid;	\/* Rect_grid for subdomain		*\/$/;"	m	struct:__anon70
_ADD_OR_DELETE	../util/output.c	/^enum _ADD_OR_DELETE {$/;"	g	file:
_ALLOC_HEADER	../util/vectormalloc.c	/^struct _ALLOC_HEADER {$/;"	s	file:
_ARRAY_H	array.h	34;"	d
_BBI_POINT	int.h	/^struct _BBI_POINT {		\/* Block based interface point *\/$/;"	s
_BBI_POINT2	int.h	/^struct _BBI_POINT2 {             \/* Block based interface point *\/$/;"	s
_BDRY_SIDE	int.h	/^enum _BDRY_SIDE {$/;"	g
_BLK_BOND	int.h	/^struct _BLK_BOND {$/;"	s
_BLK_CRX	int.h	/^struct _BLK_CRX {$/;"	s
_BLK_CRX2	int.h	/^struct _BLK_CRX2 {$/;"	s
_BLK_CRX_2D	imkcurve.c	/^struct _BLK_CRX_2D {$/;"	s	file:
_BLK_EDGE	int.h	/^struct _BLK_EDGE {$/;"	s
_BLK_INFO	int.h	/^struct _BLK_INFO {$/;"	s
_BLK_SURF	int.h	/^struct _BLK_SURF {$/;"	s
_BLK_TRI	int.h	/^struct _BLK_TRI {$/;"	s
_BLK_TYPE	int.h	/^enum _BLK_TYPE {$/;"	g
_BOND	int.h	/^struct _BOND$/;"	s
_BOND_TRI	int.h	/^struct _BOND_TRI$/;"	s
_BPOINT	setb2d.c	/^typedef struct  _BPOINT {$/;"	s	file:
_Bond	userint.h	/^	BOND	*(*_Bond)(POINT*,POINT*);$/;"	m	struct:_I_USER_INTERFACE
_CBond	userint.h	/^	C_BOND *(*_CBond)(C_BOND*,POINT*,POINT*,TRI*,TRI*);$/;"	m	struct:_I_USER_INTERFACE
_CDECS_H	../util/cdecs.h	60;"	d
_CELL_TYPE	int.h	/^enum _CELL_TYPE {$/;"	g
_COMM_BOX	geom.h	/^struct _COMM_BOX {$/;"	s
_COMPLEX	../util/cdecs.h	/^struct _COMPLEX$/;"	s
_COMP_EQUIV_LIST	int.h	/^enum _COMP_EQUIV_LIST {$/;"	g
_COMP_LIST	int.h	/^struct _COMP_LIST {$/;"	s
_COORDINATE_PLANE	int.h	/^enum _COORDINATE_PLANE {$/;"	g
_CROSSING_DIRECTION	int.h	/^enum _CROSSING_DIRECTION {$/;"	g
_CRXING	int.h	/^struct _CRXING {$/;"	s
_CRX_TYPE	int.h	/^enum _CRX_TYPE {$/;"	g
_CURVE	int.h	/^struct _CURVE$/;"	s
_C_BOND	int.h	/^struct _C_BOND   \/* cross bond *\/$/;"	s
_C_CURVE	int.h	/^struct _C_CURVE    \/* 3d Cross (intersection) Curve *\/$/;"	s
_C_SURF	int.h	/^struct _C_SURF           \/* records detailed crossing information *\/$/;"	s
_C_SURF_FLAG	int.h	/^struct _C_SURF_FLAG$/;"	s
_ChunkSize	table.h	/^	size_t		_ChunkSize;	\/* Size of interface chunks in ALIGNS*\/$/;"	m	struct:Table
_ChunkSize	userint.h	/^	size_t	_ChunkSize;$/;"	m	struct:_I_USER_INTERFACE
_ChunkTop	table.h	/^	ALIGN		_ChunkTop;$/;"	m	struct:Chunk
_Cross	int.h	/^struct _Cross$/;"	s
_DEBUG_MODE	../util/cdecs.h	/^enum _DEBUG_MODE {$/;"	g
_DEBUG_PARAMS	../util/cdecs.h	/^struct _DEBUG_PARAMS {$/;"	s
_DOMAIN_FLAG	int.h	/^enum _DOMAIN_FLAG {$/;"	g
_DYNAMIC_COMP_CHANGE	int.h	/^        struct _DYNAMIC_COMP_CHANGE {$/;"	s	struct:_HYPER_SURF
_EDGE	int.h	/^struct _EDGE {$/;"	s
_EDGE_FLAG	int.h	/^enum _EDGE_FLAG {$/;"	g
_EG_CRX	int.h	/^struct  _EG_CRX {$/;"	s
_EG_CRX_2D	imkcurve.c	/^struct  _EG_CRX_2D {$/;"	s	file:
_ELEMENT_TYPE	int.h	/^enum _ELEMENT_TYPE {$/;"	g
_EQUIV_COMPS	int.h	/^struct _EQUIV_COMPS {$/;"	s
_ES_TYPE	iTaps.h	/^enum _ES_TYPE {$/;"	g
_EndOfCurve	userint.h	/^		double   _EndOfCurve;$/;"	m	struct:_I_USER_INTERFACE::_I_INTERFACE_TOLERANCES
_Error	../util/cdecs.h	/^struct _Error {$/;"	s
_FLI	../util/ppsub.c	/^typedef union _FLI {double f;long l;int i;} FLI;$/;"	u	file:
_FLIST	../util/fsort.c	/^struct _FLIST {$/;"	s	file:
_FNAMEDEBUG_H	../util/fnamedebug.h	60;"	d
_FTEHANDLE	iTaps.h	/^struct _FTEHANDLE$/;"	s
_FTMESH	iTaps.h	/^struct _FTMESH$/;"	s
_FT_ENDIAN	../util/cdecs.h	/^enum _FT_ENDIAN {$/;"	g
_FT_ESET_HANDLE	iTaps.h	/^struct _FT_ESET_HANDLE$/;"	s
_FT_ETAG	iTaps.h	/^struct _FT_ETAG$/;"	s
_First_tri	int.h	/^	TRI_LIST_HEAD _First_tri;$/;"	m	struct:_SURFACE
_GNU_SOURCE	../util/cdecs.h	67;"	d
_GRID_DIRECTION	int.h	/^enum _GRID_DIRECTION {$/;"	g
_HYPER_SURF	int.h	/^struct _HYPER_SURF$/;"	s
_HYPER_SURF_BDRY	int.h	/^struct _HYPER_SURF_BDRY$/;"	s
_HYPER_SURF_ELEMENT	int.h	/^union _HYPER_SURF_ELEMENT {$/;"	u
_IGEOM_H	geom.h	34;"	d
_ILOCPROTOS_H	ilocprotos.h	35;"	d
_ILOC_H	iloc.h	36;"	d
_INDEX	int.h	/^struct _INDEX {$/;"	s
_INIT_DATA	../util/cdecs.h	/^struct _INIT_DATA {$/;"	s
_INTERFACE	int.h	/^struct _INTERFACE$/;"	s
_INTERNAL_DEBUG_PARAMS	../util/debug.c	/^struct _INTERNAL_DEBUG_PARAMS {$/;"	s	file:
_INT_AMR_H	int_amr.h	28;"	d
_INT_H	int.h	36;"	d
_IOUTPUT	../util/output.c	/^struct _IOUTPUT { $/;"	s	file:
_IO_TYPE	../util/cdecs.h	/^struct _IO_TYPE {$/;"	s
_IPROTOS_H	iprotos.h	35;"	d
_I_INIT_DATA	int.h	/^struct _I_INIT_DATA {$/;"	s
_I_INTERFACE	userint.h	/^struct _I_INTERFACE {$/;"	s
_I_INTERFACE_TOLERANCES	userint.h	/^	struct _I_INTERFACE_TOLERANCES {$/;"	s	struct:_I_USER_INTERFACE
_I_USER_INTERFACE	userint.h	/^struct _I_USER_INTERFACE {$/;"	s
_InterfaceTolerances	userint.h	/^	} _InterfaceTolerances;$/;"	m	struct:_I_USER_INTERFACE	typeref:struct:_I_USER_INTERFACE::_I_INTERFACE_TOLERANCES
_IterData	iTaps.h	/^struct _IterData$/;"	s
_Last_tri	int.h	/^	struct _TRI  _Last_tri;$/;"	m	struct:_SURFACE	typeref:struct:_SURFACE::_TRI
_MinScaledLength	userint.h	/^		double	_MinScaledLength;$/;"	m	struct:_I_USER_INTERFACE::_I_INTERFACE_TOLERANCES
_MinScaledSeparation	userint.h	/^		double	_MinScaledSeparation;$/;"	m	struct:_I_USER_INTERFACE::_I_INTERFACE_TOLERANCES
_Min_sin_sqr	userint.h	/^		double   _Min_sin_sqr;$/;"	m	struct:_I_USER_INTERFACE::_I_INTERFACE_TOLERANCES
_NAME_LIST	../util/fsort.c	/^struct _NAME_LIST {$/;"	s	file:
_NAVDECS_H	../util/navdecs.h	62;"	d
_NEIGHBORHOOD	int.h	/^struct _NEIGHBORHOOD{$/;"	s
_NODE	int.h	/^struct _NODE$/;"	s
_NTOL	int.h	1396;"	d
_O_CURVE	int.h	/^struct _O_CURVE$/;"	s
_O_CURVE_FAMILY	int.h	/^struct _O_CURVE_FAMILY$/;"	s
_O_NODE	int.h	/^struct _O_NODE$/;"	s
_O_SURFACE	int.h	/^struct _O_SURFACE$/;"	s
_PATCH_BDRY_FLAG	int_amr.h	/^struct _PATCH_BDRY_FLAG{$/;"	s
_PLOTDECS_H	../util/plotdecs.h	160;"	d
_POINT	int.h	/^struct _POINT$/;"	s
_POINTER_Q	array.h	/^struct _POINTER_Q {$/;"	s
_PQ_ALLOCATOR	arrayutils.c	/^enum _PQ_ALLOCATOR {$/;"	g	file:
_PQ_HEADER	arrayutils.c	/^struct _PQ_HEADER {$/;"	s	file:
_PRESERVE_USER_HOOKS	userint.h	/^enum _PRESERVE_USER_HOOKS {$/;"	g
_PTR_LIST	arrayutils.c	/^struct _PTR_LIST {$/;"	s	file:
_P_LINK	int.h	/^struct _P_LINK {$/;"	s
_Parallel	userint.h	/^		double	_Parallel;$/;"	m	struct:_I_USER_INTERFACE::_I_INTERFACE_TOLERANCES
_Point	userint.h	/^	POINT	*(*_Point)(double*);$/;"	m	struct:_I_USER_INTERFACE
_Prompt_type	../util/cdecs.h	/^struct _Prompt_type {$/;"	s
_QUADRATURE_STATUS	../util/cdecs.h	/^enum _QUADRATURE_STATUS {$/;"	g
_RADIAL_MOTION_PARAMS	testintfc.c	/^struct _RADIAL_MOTION_PARAMS$/;"	s	file:
_READ_LIST	../util/output.c	/^struct _READ_LIST {$/;"	s	file:
_RECT_BOX	geom.h	/^struct _RECT_BOX {$/;"	s
_RECT_GRID	geom.h	/^struct _RECT_GRID {$/;"	s
_REMAP	geom.h	/^	struct _REMAP {$/;"	s	struct:_RECT_GRID
_RcbMacTol	userint.h	/^		double   _RcbMacTol;$/;"	m	struct:_I_USER_INTERFACE::_I_INTERFACE_TOLERANCES
_RcbMinScaledSep	userint.h	/^		double   _RcbMinScaledSep;$/;"	m	struct:_I_USER_INTERFACE::_I_INTERFACE_TOLERANCES
_RcbcRobustFac	userint.h	/^		double   _RcbcRobustFac;$/;"	m	struct:_I_USER_INTERFACE::_I_INTERFACE_TOLERANCES
_ReflectTol	userint.h	/^		double   _ReflectTol;$/;"	m	struct:_I_USER_INTERFACE::_I_INTERFACE_TOLERANCES
_RobustFac	userint.h	/^		double   _RobustFac;$/;"	m	struct:_I_USER_INTERFACE::_I_INTERFACE_TOLERANCES
_SEAM	isurgery.c	/^struct _SEAM {$/;"	s	file:
_SHEAR_MOTION_PARAMS	testintfc.c	/^struct _SHEAR_MOTION_PARAMS$/;"	s	file:
_SIDE	geom.h	/^enum _SIDE {$/;"	g
_SINE_MOTION_PARAMS	testintfc.c	/^struct _SINE_MOTION_PARAMS$/;"	s	file:
_SPQ_FLAG	iredist.c	/^enum _SPQ_FLAG {$/;"	g	file:
_SPQ_FLAG	iredist_o2.c	/^enum _SPQ_FLAG {$/;"	g	file:
_STITCH	isurgery.c	/^struct _STITCH {$/;"	s	file:
_SURF	int.h	/^struct _SURF {$/;"	s
_SURFACE	int.h	/^struct _SURFACE$/;"	s
_SURFACE_COLOR	int.h	/^enum _SURFACE_COLOR {$/;"	g
_SURGERY	isurgery.c	/^struct _SURGERY {$/;"	s	file:
_ShortCurveNumPoints	userint.h	/^		int	_ShortCurveNumPoints;$/;"	m	struct:_I_USER_INTERFACE::_I_INTERFACE_TOLERANCES
_StartOfCurve	userint.h	/^		double   _StartOfCurve;$/;"	m	struct:_I_USER_INTERFACE::_I_INTERFACE_TOLERANCES
_Static_point	userint.h	/^	POINT	*(*_Static_point)(INTERFACE*);$/;"	m	struct:_I_USER_INTERFACE
_TABLE_H	table.h	57;"	d
_TOL	int.h	1397;"	d
_TRANS_PARAMS	testintfc.c	/^struct _TRANS_PARAMS$/;"	s	file:
_TRI	int.h	/^struct _TRI$/;"	s
_TRIANGLEDEFS_H	triangledefs.h	28;"	d
_TRI_FullGeometry	isub.c	/^struct _TRI_FullGeometry {$/;"	s	file:
_TRI_LIST_AT_VERTEX	isub.c	/^struct	_TRI_LIST_AT_VERTEX$/;"	s	file:
_TRI_NEIGHBOR	int.h	/^union _TRI_NEIGHBOR$/;"	u
_TRI_Plus_normal	isub.c	/^struct _TRI_Plus_normal {$/;"	s	file:
_TRI_REDIST_PARAMS	int.h	/^struct _TRI_REDIST_PARAMS {$/;"	s
_TRI_STATUS	iredist.c	/^enum _TRI_STATUS {$/;"	g	file:
_TRI_STATUS	iredist_o2.c	/^enum _TRI_STATUS {$/;"	g	file:
_TRI_STORAGE_TYPE	int.h	/^enum _TRI_STORAGE_TYPE {$/;"	g
_TRI_SURF	iredist.c	/^struct _TRI_SURF {$/;"	s	file:
_TRI_SURF	iredist_o2.c	/^struct _TRI_SURF {$/;"	s	file:
_TolFac	userint.h	/^		double   _TolFac;$/;"	m	struct:_I_USER_INTERFACE::_I_INTERFACE_TOLERANCES
_UPROTOS_H	../util/uprotos.h	62;"	d
_USERINT_H	userint.h	36;"	d
_USE_BOUNDARIES	int.h	/^enum _USE_BOUNDARIES {$/;"	g
_VMALLOC_H	../util/vmalloc.h	59;"	d
_VOLUME_FRAC	int.h	/^struct _VOLUME_FRAC {$/;"	s
_WEDGE	int.h	/^struct _WEDGE{$/;"	s
_WRITE_LIST	../util/output.c	/^struct _WRITE_LIST {$/;"	s	file:
__IBASE_H__	iBase.h	2;"	d
__iRel_LASSO_HPP__	iRel.h	2;"	d
__pts	int.h	/^	POINT *__pts[3];$/;"	m	struct:_TRI
_add_comp_to_list	int.h	/^	void (*_add_comp_to_list)(COMPONENT,struct _COMP_LIST*,$/;"	m	struct:_COMP_LIST
_add_to_ordered_pointers	arrayutils.c	/^EXPORT  boolean _add_to_ordered_pointers($/;"	f
_add_to_pointers	arrayutils.c	/^EXPORT  boolean _add_to_pointers($/;"	f
_assign_btri_states	userint.h	/^	boolean    (*_assign_btri_states)(BOND_TRI*,BOND_TRI*);$/;"	m	struct:_I_USER_INTERFACE
_assign_curve_boundary_flag	userint.h	/^	void	(*_assign_curve_boundary_flag)(CURVE*);$/;"	m	struct:_I_USER_INTERFACE
_assign_curve_boundary_type	userint.h	/^	void	(*_assign_curve_boundary_type)(CURVE*,int,int*);$/;"	m	struct:_I_USER_INTERFACE
_attach_curve_to_node	userint.h	/^	CURVE	*(*_attach_curve_to_node)(CURVE*,POINT*,BOND*,NODE*);$/;"	m	struct:_I_USER_INTERFACE
_average_points	userint.h	/^	POINT   *(*_average_points)(boolean,POINT*,HYPER_SURF_ELEMENT*,HYPER_SURF*,$/;"	m	struct:_I_USER_INTERFACE
_boolean	../util/cdecs.h	/^enum _boolean { FALSE              = 0,$/;"	g
_boundary	int.h	/^	    unsigned int _boundary : 1;$/;"	m	struct:_POINT::__anon52
_boundary	int.h	/^	int _boundary;		\/* Mandatory first element,  see notes on$/;"	m	struct:_CURVE
_boundary	int.h	/^	int _boundary;		\/* Mandatory first element,  see notes on$/;"	m	struct:_NODE
_boundary	int.h	/^	int _boundary;		\/* Mandatory first element,  see notes on$/;"	m	struct:_POINT
_boundary	int.h	/^	int _boundary;		\/* Mandatory first element,  see notes on$/;"	m	struct:_SURFACE
_btris	int.h	/^	struct _BOND_TRI **_btris;	\/* Bounding triangles in angle order *\/$/;"	m	struct:_BOND	typeref:struct:_BOND::_BOND_TRI
_buffer_zones	int.h	/^	int		_buffer_zones[3];	\/*COMMAND LINE*\/$/;"	m	struct:_I_INIT_DATA
_check_print_intfc	userint.h	/^	void    (*_check_print_intfc)(const char*,const char*,char,INTERFACE*,$/;"	m	struct:_I_USER_INTERFACE
_consistent_interface	userint.h	/^	boolean	(*_consistent_interface)(INTERFACE*);$/;"	m	struct:_I_USER_INTERFACE
_coords	int.h	/^	double	_coords[MAXD];$/;"	m	struct:_POINT
_coords	int.h	/^typedef struct { double _coords[MAXD];} TG_PT;$/;"	m	struct:__anon60
_copy_curve	userint.h	/^	CURVE	*(*_copy_curve)(CURVE*,NODE*,NODE*);$/;"	m	struct:_I_USER_INTERFACE
_copy_interface	userint.h	/^	INTERFACE	*(*_copy_interface)(INTERFACE*);$/;"	m	struct:_I_USER_INTERFACE
_copy_node	userint.h	/^	NODE	*(*_copy_node)(NODE*);$/;"	m	struct:_I_USER_INTERFACE
_copy_point	userint.h	/^	POINT	*(*_copy_point)(POINT*);$/;"	m	struct:_I_USER_INTERFACE
_copy_surface	userint.h	/^	SURFACE	*(*_copy_surface)(SURFACE*,CURVE**,CURVE**,boolean);$/;"	m	struct:_I_USER_INTERFACE
_cross_tolerance	userint.h	/^	double   (*_cross_tolerance)(INTERFACE*);$/;"	m	struct:_I_USER_INTERFACE
_dbparams	../util/cdecs.h	/^	DEBUG_PARAMS *_dbparams;	\/*PROMPTED*\/$/;"	m	struct:_INIT_DATA
_debug_input	../util/debug.c	/^        FILE		*_debug_input; \/* Input source for Debugging Info  *\/$/;"	m	struct:_INTERNAL_DEBUG_PARAMS	file:
_debug_mode	../util/cdecs.h	/^	DEBUG_MODE	_debug_mode;$/;"	m	struct:_DEBUG_PARAMS
_debug_names	../util/debug.c	/^	char 		_debug_names[MAX_NAMES][MAX_CHARS+1];$/;"	m	struct:_INTERNAL_DEBUG_PARAMS	file:
_debug_output	../util/debug.c	/^	FILE		*_debug_output;\/* Output Destination for Debugging *\/$/;"	m	struct:_INTERNAL_DEBUG_PARAMS	file:
_debug_params	../util/debug.c	/^	DEBUG_PARAMS	_debug_params;$/;"	m	struct:_INTERNAL_DEBUG_PARAMS	file:
_delete_curve	userint.h	/^	int	(*_delete_curve)(CURVE*);$/;"	m	struct:_I_USER_INTERFACE
_delete_end_of_bond	userint.h	/^	boolean	(*_delete_end_of_bond)(BOND*,CURVE*);$/;"	m	struct:_I_USER_INTERFACE
_delete_from_ordered_pointers	arrayutils.c	/^EXPORT boolean _delete_from_ordered_pointers($/;"	f
_delete_from_ordered_pointers_at_location	arrayutils.c	/^EXPORT boolean _delete_from_ordered_pointers_at_location($/;"	f
_delete_from_pointers	arrayutils.c	/^EXPORT boolean _delete_from_pointers($/;"	f
_delete_from_pointers_if_present	arrayutils.c	/^EXPORT boolean _delete_from_pointers_if_present($/;"	f
_delete_interface	userint.h	/^	int	(*_delete_interface)(INTERFACE*);$/;"	m	struct:_I_USER_INTERFACE
_delete_node	userint.h	/^	boolean	(*_delete_node)(NODE*);$/;"	m	struct:_I_USER_INTERFACE
_delete_point	userint.h	/^	int	(*_delete_point)(POINT*);$/;"	m	struct:_I_USER_INTERFACE
_delete_start_of_bond	userint.h	/^	boolean	(*_delete_start_of_bond)(BOND*,CURVE*);$/;"	m	struct:_I_USER_INTERFACE
_delete_surface	userint.h	/^	int	(*_delete_surface)(SURFACE*);$/;"	m	struct:_I_USER_INTERFACE
_detach_one_surface	userint.h	/^	SURFACE *(*_detach_one_surface)(SURFACE *); $/;"	m	struct:_I_USER_INTERFACE
_edge_vertex	int.h	/^	boolean _edge_vertex;    \/* only used when _on_bdry is TRUE,  TRUE if$/;"	m	struct:_C_SURF_FLAG
_excluded_comps	userint.h	/^	COMP_LIST	_excluded_comps;$/;"	m	struct:_I_USER_INTERFACE
_flag_end	int.h	/^			_flag_end;    \/* information *\/$/;"	m	struct:_C_SURF
_flag_start	int.h	/^	C_SURF_FLAG 	_flag_start,  \/* new stuff, records detailed crossing *\/$/;"	m	struct:_C_SURF
_fprint_boundary_type	userint.h	/^	void	(*_fprint_boundary_type)(FILE*,const char*,int,const char*,$/;"	m	struct:_I_USER_INTERFACE
_fprint_curve	userint.h	/^	void	(*_fprint_curve)(FILE*,CURVE*);$/;"	m	struct:_I_USER_INTERFACE
_fprint_interface	userint.h	/^	void	(*_fprint_interface)(FILE*,INTERFACE*);$/;"	m	struct:_I_USER_INTERFACE
_fprint_intfc_rect_grids	userint.h	/^	void	(*_fprint_intfc_rect_grids)(FILE*,INTERFACE*);$/;"	m	struct:_I_USER_INTERFACE
_fprint_node	userint.h	/^	void	(*_fprint_node)(FILE*,NODE*);$/;"	m	struct:_I_USER_INTERFACE
_fprint_point	userint.h	/^	void	(*_fprint_point)(FILE*,POINT*);$/;"	m	struct:_I_USER_INTERFACE
_fprint_surface	userint.h	/^	void	(*_fprint_surface)(FILE*,SURFACE*);$/;"	m	struct:_I_USER_INTERFACE
_fset_hyper_surf_color	userint.h	/^	void	(*_fset_hyper_surf_color)(FILE*,HYPER_SURF*);$/;"	m	struct:_I_USER_INTERFACE
_ftrace	../util/debug.c	/^	struct entry	_ftrace[MAX_TRACE];$/;"	m	struct:_INTERNAL_DEBUG_PARAMS	typeref:struct:_INTERNAL_DEBUG_PARAMS::entry	file:
_gview_plot_interface	userint.h	/^	void	(*_gview_plot_interface)(const char*,INTERFACE*);$/;"	m	struct:_I_USER_INTERFACE
_head	../util/debug.c	/^	struct entry	*_head;$/;"	m	struct:_INTERNAL_DEBUG_PARAMS	typeref:struct:_INTERNAL_DEBUG_PARAMS::entry	file:
_icoords	int.h	/^	    int		   _icoords[3];$/;"	m	union:_TRI::__anon55
_index	int.h	/^	    int		   _index;$/;"	m	union:_TRI::__anon55
_index	int.h	/^	    int          _index;$/;"	m	union:_POINT::__anon54
_index_of_pointer_in_array	arrayutils.c	/^EXPORT  boolean _index_of_pointer_in_array($/;"	f
_insert_point_in_bond	userint.h	/^	boolean	(*_insert_point_in_bond)(POINT*,BOND*,CURVE*);$/;"	m	struct:_I_USER_INTERFACE
_insert_point_in_tri	userint.h	/^	boolean	(*_insert_point_in_tri)(POINT*,TRI*,SURFACE*);$/;"	m	struct:_I_USER_INTERFACE
_insert_point_in_tri_side	userint.h	/^	boolean	(*_insert_point_in_tri_side)(POINT*,int,TRI*,SURFACE*);$/;"	m	struct:_I_USER_INTERFACE
_interactive_prompting	../util/cdecs.h	/^	boolean	     _interactive_prompting;$/;"	m	struct:_INIT_DATA
_interface_reconstructed	int.h	/^	boolean            _interface_reconstructed;$/;"	m	struct:_INTERFACE
_intersections	userint.h	/^	boolean	(*_intersections)(INTERFACE*,CROSS**,const boolean);$/;"	m	struct:_I_USER_INTERFACE
_intfc	int.h	/^	INTERFACE	*_intfc;$/;"	m	struct:_I_INIT_DATA
_invert_curve	userint.h	/^	void	(*_invert_curve)(CURVE*);$/;"	m	struct:_I_USER_INTERFACE
_invert_surface	userint.h	/^	void	(*_invert_surface)(SURFACE*);$/;"	m	struct:_I_USER_INTERFACE
_is_comp_in_list	int.h	/^	boolean (*_is_comp_in_list)(COMPONENT,struct _COMP_LIST*,$/;"	m	struct:_COMP_LIST
_is_subdomain_boundary	userint.h	/^	boolean	(*_is_subdomain_boundary)(HYPER_SURF*);$/;"	m	struct:_I_USER_INTERFACE
_is_subdomain_node	userint.h	/^	boolean	(*_is_subdomain_node)(NODE*);$/;"	m	struct:_I_USER_INTERFACE
_is_virtual_fixed_node	userint.h	/^	boolean	(*_is_virtual_fixed_node)(NODE*);$/;"	m	struct:_I_USER_INTERFACE
_join_surfaces	userint.h	/^	SURFACE *(*_join_surfaces)(CURVE*);$/;"	m	struct:_I_USER_INTERFACE
_length_side	isub.c	/^	double _length_side[3];    \/* length of sides                 *\/$/;"	m	struct:_TRI_FullGeometry	file:
_link_tri_to_bond	userint.h	/^	BOND_TRI *(*_link_tri_to_bond)(BOND_TRI*,TRI*,SURFACE*,BOND*,CURVE*);$/;"	m	struct:_I_USER_INTERFACE
_lnip	userint.h	/^	boolean	(*_lnip)(double*,COMPONENT,INTERFACE*,USE_BOUNDARIES,HYPER_SURF*,$/;"	m	struct:_I_USER_INTERFACE
_lnsip	userint.h	/^	boolean	(*_lnsip)(double*,COMPONENT,COMPONENT,struct _INTERFACE*,$/;"	m	struct:_I_USER_INTERFACE
_make_curve	userint.h	/^	CURVE	*(*_make_curve)(COMPONENT,COMPONENT,NODE*,NODE*);$/;"	m	struct:_I_USER_INTERFACE
_make_hypersurface	userint.h	/^	HYPER_SURF	*(*_make_hypersurface)(COMPONENT,COMPONENT);$/;"	m	struct:_I_USER_INTERFACE
_make_hypersurface_boundary	userint.h	/^	HYPER_SURF_BDRY	*(*_make_hypersurface_boundary)(void);$/;"	m	struct:_I_USER_INTERFACE
_make_interface_topology_lists	userint.h	/^	boolean	(*_make_interface_topology_lists)(INTERFACE*);$/;"	m	struct:_I_USER_INTERFACE
_make_node	userint.h	/^	NODE	*(*_make_node)(POINT*);$/;"	m	struct:_I_USER_INTERFACE
_make_point	userint.h	/^	POINT	*(*_make_point)(double*,COMPONENT,COMPONENT);$/;"	m	struct:_I_USER_INTERFACE
_make_surface	userint.h	/^	SURFACE	*(*_make_surface)(COMPONENT,COMPONENT,CURVE**,CURVE**);$/;"	m	struct:_I_USER_INTERFACE
_make_tri	userint.h	/^	TRI *(*_make_tri)(POINT*,POINT*,POINT*,$/;"	m	struct:_I_USER_INTERFACE
_modified	int.h	/^	    boolean	   _modified;$/;"	m	union:_TRI::__anon55
_move_closed_loop_node	userint.h	/^	boolean	(*_move_closed_loop_node)(CURVE*,BOND*);$/;"	m	struct:_I_USER_INTERFACE
_new_address	ppcopy.c	/^EXPORT	POINTER _new_address($/;"	f
_next_hypersurface	userint.h	/^	boolean	(*_next_hypersurface)(struct _INTERFACE*,HYPER_SURF**);$/;"	m	struct:_I_USER_INTERFACE
_next_point	userint.h	/^	boolean	(*_next_point)(struct _INTERFACE*,POINT**,$/;"	m	struct:_I_USER_INTERFACE
_nip	userint.h	/^	boolean	(*_nip)(double*,COMPONENT,INTERFACE*,USE_BOUNDARIES,HYPER_SURF*,$/;"	m	struct:_I_USER_INTERFACE
_no_topology_lists	table.h	/^	boolean         _no_topology_lists;\/*Disables topology construction*\/$/;"	m	struct:Table
_node	int.h	/^	    struct _NODE *_node;$/;"	m	union:_POINT::__anon54	typeref:struct:_POINT::__anon54::_NODE
_nor	int.h	/^	double		_nor[3];$/;"	m	struct:_POINT
_nor	isub.c	/^	double _nor[3];	          \/* normal to the tri plane	     *\/$/;"	m	struct:_TRI_Plus_normal	file:
_nor0	int.h	/^	double		_nor0[3];	\/* First order normal for WLSP *\/$/;"	m	struct:_POINT
_nsip	userint.h	/^	boolean	(*_nsip)(double*,COMPONENT,COMPONENT,INTERFACE*,USE_BOUNDARIES,$/;"	m	struct:_I_USER_INTERFACE
_num_of_debug_names	../util/debug.c	/^	int		_num_of_debug_names; \/* # names in debug_names[i]  *\/$/;"	m	struct:_INTERNAL_DEBUG_PARAMS	file:
_on_bdry	int.h	/^	boolean _on_bdry;        \/* TRUE if the crossing point is on the$/;"	m	struct:_C_SURF_FLAG
_opaque_pointer	int.h	/^	    POINTER	 _opaque_pointer;$/;"	m	union:_POINT::__anon54
_point_flags	int.h	/^	} _point_flags;$/;"	m	struct:_POINT	typeref:struct:_POINT::__anon52
_pointer_is_in_array	arrayutils.c	/^EXPORT  boolean _pointer_is_in_array($/;"	f
_pp_grid_set	int.h	/^	boolean		_pp_grid_set;		\/*COMMAND LINE*\/$/;"	m	struct:_I_INIT_DATA
_print_crossing_elements	userint.h	/^	void	(*_print_crossing_elements)(CROSS*,INTERFACE*);$/;"	m	struct:_I_USER_INTERFACE
_print_error_enum	iMesh.c	/^EXPORT void _print_error_enum(int error)$/;"	f
_print_intersections	userint.h	/^	void	(*_print_intersections)(CROSS*,INTERFACE*);$/;"	m	struct:_I_USER_INTERFACE
_print_number_of_tangles	userint.h	/^	int	(*_print_number_of_tangles)(const char*,INTERFACE*,CROSS*);$/;"	m	struct:_I_USER_INTERFACE
_print_wall_crx	userint.h	/^	void    (*_print_wall_crx)(const char*,int*,int,int,CRXING*);$/;"	m	struct:_I_USER_INTERFACE
_print_wall_curve_crx	userint.h	/^	void    (*_print_wall_curve_crx)(const char*,int*,int,int,CRXING*);$/;"	m	struct:_I_USER_INTERFACE
_print_wall_curve_crx0	userint.h	/^	void    (*_print_wall_curve_crx0)(const char*,POINT *, int,CRXING*);$/;"	m	struct:_I_USER_INTERFACE
_projection_computed	int.h	/^	    boolean           _projection_computed;$/;"	m	union:_TRI::__anon55
_random01	userint.h	/^	double	(*_random01)(INTERFACE*);$/;"	m	struct:_I_USER_INTERFACE
_random01_seed	userint.h	/^	unsigned short int _random01_seed[3];$/;"	m	struct:_I_USER_INTERFACE
_read_boundary_type_from_string	userint.h	/^	int	(*_read_boundary_type_from_string)(const char*);$/;"	m	struct:_I_USER_INTERFACE
_read_curve	userint.h	/^	CURVE	*(*_read_curve)(INTERFACE*,int);$/;"	m	struct:_I_USER_INTERFACE
_read_node	userint.h	/^	NODE	*(*_read_node)(INTERFACE*,int);$/;"	m	struct:_I_USER_INTERFACE
_read_point	userint.h	/^	POINT	*(*_read_point)(INTERFACE*,int);$/;"	m	struct:_I_USER_INTERFACE
_read_print_intfc_rect_grids	userint.h	/^	int	(*_read_print_intfc_rect_grids)(const IO_TYPE*,INTERFACE*,$/;"	m	struct:_I_USER_INTERFACE
_read_print_point	userint.h	/^	POINT	*(*_read_print_point)(INTERFACE*,const IO_TYPE*,boolean);$/;"	m	struct:_I_USER_INTERFACE
_read_surface	userint.h	/^	SURFACE	*(*_read_surface)(INTERFACE*,int);$/;"	m	struct:_I_USER_INTERFACE
_receive_interface	userint.h	/^	INTERFACE	*(*_receive_interface)(int);$/;"	m	struct:_I_USER_INTERFACE
_reconstruct_bond_pointers	userint.h	/^	void	(*_reconstruct_bond_pointers)(BOND*,INTERFACE*,INTERFACE*,$/;"	m	struct:_I_USER_INTERFACE
_reconstruct_curve_pointers	userint.h	/^	void	(*_reconstruct_curve_pointers)(CURVE*,INTERFACE*,INTERFACE*,$/;"	m	struct:_I_USER_INTERFACE
_reconstruct_interface_pointers	userint.h	/^	void	(*_reconstruct_interface_pointers)(INTERFACE*,struct Table*,$/;"	m	struct:_I_USER_INTERFACE
_reconstruct_node_pointers	userint.h	/^	void	(*_reconstruct_node_pointers)(NODE*,INTERFACE*,INTERFACE*,$/;"	m	struct:_I_USER_INTERFACE
_reconstruct_point_pointers	userint.h	/^	void	(*_reconstruct_point_pointers)(POINT*,INTERFACE*,INTERFACE*,$/;"	m	struct:_I_USER_INTERFACE
_reconstruct_surface_pointers	userint.h	/^	void	(*_reconstruct_surface_pointers)(SURFACE*,INTERFACE*,$/;"	m	struct:_I_USER_INTERFACE
_reconstruct_tri_pointers	userint.h	/^	void	(*_reconstruct_tri_pointers)(TRI*,INTERFACE*,INTERFACE*,$/;"	m	struct:_I_USER_INTERFACE
_reflect_curve	userint.h	/^	void	(*_reflect_curve)(CURVE*,double*,double*);$/;"	m	struct:_I_USER_INTERFACE
_reflect_interface	userint.h	/^	void	(*_reflect_interface)(INTERFACE*,double*,double*);$/;"	m	struct:_I_USER_INTERFACE
_reflect_node	userint.h	/^	void	(*_reflect_node)(NODE*,double*,double*);$/;"	m	struct:_I_USER_INTERFACE
_reflect_point	userint.h	/^	void	(*_reflect_point)(POINT*,double*,double*,INTERFACE*);$/;"	m	struct:_I_USER_INTERFACE
_reflect_surface	userint.h	/^	void	(*_reflect_surface)(SURFACE*,double*,double*);$/;"	m	struct:_I_USER_INTERFACE
_remember	../util/debug.c	/^        FILE		*_remember;    \/* Stores debug names from run here *\/$/;"	m	struct:_INTERNAL_DEBUG_PARAMS	file:
_reorder_curve_link_list	userint.h	/^	void 	(*_reorder_curve_link_list)(CURVE*);$/;"	m	struct:_I_USER_INTERFACE
_reverse_bond	userint.h	/^	void 	(*_reverse_bond)(BOND*);$/;"	m	struct:_I_USER_INTERFACE
_reverse_curve	userint.h	/^	void	(*_reverse_curve)(CURVE*);$/;"	m	struct:_I_USER_INTERFACE
_scaled_separation	geomutils.c	/^EXPORT	double _scaled_separation($/;"	f
_send_interface	userint.h	/^	void	(*_send_interface)(INTERFACE*,int);$/;"	m	struct:_I_USER_INTERFACE
_set_boundary	userint.h	/^	boolean	(*_set_boundary)(INTERFACE*,RECT_GRID*,COMPONENT,double);$/;"	m	struct:_I_USER_INTERFACE
_side_vector	isub.c	/^	double *_side_vector[3];	  \/* side uni_arrays v[i] = p[i+1]-p[i] *\/$/;"	m	struct:_TRI_FullGeometry	file:
_sort_bond_tris	userint.h	/^	boolean	(*_sort_bond_tris)(INTERFACE*);$/;"	m	struct:_I_USER_INTERFACE
_sorted	int.h	/^	    boolean      _sorted;$/;"	m	union:_POINT::__anon54
_sqr_norm	isub.c	/^	double _sqr_norm;	  \/* sqr(n1) + sqr(n2) +sqr(n3)      *\/$/;"	m	struct:_TRI_Plus_normal	file:
_subdomains	int.h	/^	int		_subdomains[3];		\/*COMMAND LINE*\/$/;"	m	struct:_I_INIT_DATA
_sv_store	isub.c	/^	double _sv_store[3][3];    \/* storage for _side_vector        *\/$/;"	m	struct:_TRI_FullGeometry	file:
_title	../util/cdecs.h	/^	const char   *_title;$/;"	m	struct:_INIT_DATA
_tri_cross_list	int.h	/^	    struct _C_BOND **_tri_cross_list;$/;"	m	union:_TRI::__anon55	typeref:struct:_TRI::__anon55::_C_BOND
_tri_side_index	int.h	/^	int     _tri_side_index; \/* only used when both _on_bdry iand$/;"	m	struct:_C_SURF_FLAG
_undo_insert_point_in_tri	userint.h	/^	boolean	(*_undo_insert_point_in_tri)(POINT*,TRI*,SURFACE*);$/;"	m	struct:_I_USER_INTERFACE
_undo_insert_point_in_tri_side	userint.h	/^	boolean	(*_undo_insert_point_in_tri_side)(POINT*,int,TRI*,SURFACE*);$/;"	m	struct:_I_USER_INTERFACE
_unique_add_to_pointers	arrayutils.c	/^EXPORT  boolean _unique_add_to_pointers($/;"	f
_user0	int.h	/^	    unsigned int _user0 : 1;$/;"	m	struct:_POINT::__anon52
_user1	int.h	/^	    unsigned int _user1 : 1;$/;"	m	struct:_POINT::__anon52
_user2	int.h	/^	    unsigned int _user2 : 1;$/;"	m	struct:_POINT::__anon52
_user3	int.h	/^	    unsigned int _user3 : 1;$/;"	m	struct:_POINT::__anon52
_user4	int.h	/^	    unsigned int _user4 : 1;$/;"	m	struct:_POINT::__anon52
_user5	int.h	/^	    unsigned int _user5 : 1;$/;"	m	struct:_POINT::__anon52
_user6	int.h	/^	    unsigned int _user6 : 1;$/;"	m	struct:_POINT::__anon52
_user7	int.h	/^	    unsigned int _user7 : 1;$/;"	m	struct:_POINT::__anon52
_user8	int.h	/^	    unsigned int _user8 : 1;$/;"	m	struct:_POINT::__anon52
_user9	int.h	/^	    unsigned int _user9 : 1;$/;"	m	struct:_POINT::__anon52
_user_copy_hyper_surf	userint.h	/^	void		(*_user_copy_hyper_surf)(HYPER_SURF*,HYPER_SURF*);$/;"	m	struct:_I_USER_INTERFACE
_user_fprint_curve	userint.h	/^	void	(*_user_fprint_curve)(FILE*,CURVE*);$/;"	m	struct:_I_USER_INTERFACE
_user_fprint_interface	userint.h	/^	void	(*_user_fprint_interface)(FILE*,INTERFACE*);$/;"	m	struct:_I_USER_INTERFACE
_user_fprint_intfc_rect_grids	userint.h	/^	void	(*_user_fprint_intfc_rect_grids)(FILE*,INTERFACE*);$/;"	m	struct:_I_USER_INTERFACE
_user_fprint_node	userint.h	/^	void	(*_user_fprint_node)(FILE*,NODE*);$/;"	m	struct:_I_USER_INTERFACE
_user_fprint_point	userint.h	/^	void	(*_user_fprint_point)(FILE*,POINT*);$/;"	m	struct:_I_USER_INTERFACE
_user_fprint_surface	userint.h	/^	void	(*_user_fprint_surface)(FILE*,SURFACE*);$/;"	m	struct:_I_USER_INTERFACE
_user_install_faces	userint.h	/^	void	(*_user_install_faces)(SURFACE*,int);$/;"	m	struct:_I_USER_INTERFACE
_user_join_curves	userint.h	/^	boolean	(*_user_join_curves)(CURVE*,CURVE*,CURVE*);$/;"	m	struct:_I_USER_INTERFACE
_user_make_interface	userint.h	/^	void	(*_user_make_interface)(INTERFACE*);$/;"	m	struct:_I_USER_INTERFACE
_user_read_curve	userint.h	/^	void	(*_user_read_curve)(CURVE*);$/;"	m	struct:_I_USER_INTERFACE
_user_read_node	userint.h	/^	int	(*_user_read_node)(NODE*);$/;"	m	struct:_I_USER_INTERFACE
_user_read_point	userint.h	/^	void	(*_user_read_point)(INTERFACE*,POINT*);$/;"	m	struct:_I_USER_INTERFACE
_user_read_print_curve	userint.h	/^	boolean	(*_user_read_print_curve)(CURVE*,const IO_TYPE*,boolean);$/;"	m	struct:_I_USER_INTERFACE
_user_read_print_interface	userint.h	/^	int	(*_user_read_print_interface)(INIT_DATA*,const IO_TYPE*,$/;"	m	struct:_I_USER_INTERFACE
_user_read_print_intfc_rect_grids	userint.h	/^	void	(*_user_read_print_intfc_rect_grids)(const IO_TYPE*,INTERFACE*,$/;"	m	struct:_I_USER_INTERFACE
_user_read_print_node	userint.h	/^	void	(*_user_read_print_node)(NODE*,const IO_TYPE*,boolean);$/;"	m	struct:_I_USER_INTERFACE
_user_read_print_point	userint.h	/^	void	(*_user_read_print_point)(POINT*,const IO_TYPE*,boolean);$/;"	m	struct:_I_USER_INTERFACE
_user_read_print_surface	userint.h	/^	void	(*_user_read_print_surface)(SURFACE*,const IO_TYPE*,boolean);$/;"	m	struct:_I_USER_INTERFACE
_user_read_surface	userint.h	/^	void	(*_user_read_surface)(SURFACE*);$/;"	m	struct:_I_USER_INTERFACE
_user_split_curve	userint.h	/^	boolean	(*_user_split_curve)(int,POINT*,BOND*,CURVE*,CURVE**);$/;"	m	struct:_I_USER_INTERFACE
_workspace	int.h	/^	    POINTER 	   _workspace;$/;"	m	union:_TRI::__anon55
_zoom_interface	userint.h	/^	INTERFACE	*(*_zoom_interface)(INTERFACE*,RECT_GRID*,$/;"	m	struct:_I_USER_INTERFACE
a	comp3d.c	/^	double   a[3];		\/* Parametric coordinates of projection point *\/$/;"	m	struct:__anon3	file:
a	geom.h	/^        double a;		$/;"	m	struct:__anon36
a	geom.h	/^        double a;		$/;"	m	struct:__anon37
a	geom.h	/^        double a; \/*horizontal length *\/$/;"	m	struct:__anon40
a	geom.h	/^        double a;$/;"	m	struct:__anon38
a	int.h	/^        double              a[3], dp2[3], ds2[3];$/;"	m	struct:_CRXING
a0	geom.h	/^	double a0;$/;"	m	struct:__anon43
a1	geom.h	/^	double a1;$/;"	m	struct:__anon43
act_delete	iredist.c	/^LOCAL   boolean 	act_delete = NO;$/;"	v
act_delete	iredist_o2.c	/^LOCAL   boolean 	act_delete = NO;$/;"	v
add_bdry_curve_to_hash_table	int3d.c	/^LOCAL void add_bdry_curve_to_hash_table($/;"	f
add_perturbation	geom.h	/^        boolean add_perturbation;$/;"	m	struct:__anon48
add_plan_surf	geom.h	/^        boolean add_plan_surf;$/;"	m	struct:__anon48
add_time	../util/times.c	/^LOCAL double add_time[ADD_MAX_LEN], add_time_st[ADD_MAX_LEN];$/;"	v
add_time_clear	../util/times.c	/^EXPORT void add_time_clear(int ind)$/;"	f
add_time_end	../util/times.c	/^EXPORT void add_time_end(int ind)$/;"	f
add_time_get	../util/times.c	/^EXPORT double add_time_get(int ind)$/;"	f
add_time_st	../util/times.c	/^LOCAL double add_time[ADD_MAX_LEN], add_time_st[ADD_MAX_LEN];$/;"	v
add_time_start	../util/times.c	/^EXPORT void add_time_start(int ind)$/;"	f
add_to_bls_list	comp3d.c	/^LOCAL int **add_to_bls_list($/;"	f
add_to_cross_list	cross2d.c	/^EXPORT	void add_to_cross_list($/;"	f
add_to_debug	../util/debug.c	/^EXPORT	void	add_to_debug($/;"	f
add_to_hash_table	isub.c	/^EXPORT	P_LINK *add_to_hash_table($/;"	f
add_to_o_surfaces	iwallsurf.c	/^EXPORT  int  add_to_o_surfaces($/;"	f
add_to_ordered_pointers	array.h	58;"	d
add_to_pointer_queue	array.h	48;"	d
add_to_pointers	array.h	54;"	d
add_to_tri_pairs	itrisset.c	/^LOCAL	boolean	add_to_tri_pairs($/;"	f
add_top	../util/times.c	/^LOCAL int  add_top = 0;$/;"	v
adjacent_curve	top.c	/^EXPORT CURVE *adjacent_curve($/;"	f
adjacent_curve_along_surface	top.c	/^LIB_LOCAL 	CURVE *adjacent_curve_along_surface($/;"	f
adjust_step_for_status1	../util/runga.c	131;"	d	file:
adjust_step_for_status2	../util/runga.c	146;"	d	file:
adjust_top_grid_for_square	igrid.c	/^EXPORT	boolean	adjust_top_grid_for_square($/;"	f
affine_fit	geomutils.c	/^EXPORT	void affine_fit($/;"	f
align_seam_with_point	isurgery.c	/^LOCAL   void 	align_seam_with_point($/;"	f
alignbytes	triangle.c	/^    size_t    alignbytes;$/;"	m	struct:memorypool	file:
alignment	triangle.c	/^    ALIGN             alignment;$/;"	m	struct:PoolBlock	file:
aligns	../util/vectormalloc.c	/^	ALIGN                *aligns;$/;"	m	struct:_ALLOC_HEADER	file:
alloc_and_add_to_queue	iredist.c	/^LOCAL POINTER_Q *alloc_and_add_to_queue($/;"	f
alloc_and_add_to_queue	iredist_o2.c	/^LOCAL   POINTER_Q *alloc_and_add_to_queue($/;"	f
alloc_blk_crx	iblkc2.c	/^EXPORT	BLK_CRX *alloc_blk_crx($/;"	f
alloc_blk_crx2d	imkcurve.c	/^LOCAL	BLK_CRX_2D *alloc_blk_crx2d($/;"	f
alloc_grid_crx_mem	imksurf.c	/^EXPORT	void alloc_grid_crx_mem($/;"	f
alloc_next_pointer_2_storage_block	arrayutils.c	/^LOCAL	void alloc_next_pointer_2_storage_block($/;"	f
alloc_next_pointer_queue_storage_block	arrayutils.c	/^LOCAL	void alloc_next_pointer_queue_storage_block($/;"	f
alloc_type	arrayutils.c	/^	PQ_ALLOCATOR alloc_type; \/* Storage allocation type *\/$/;"	m	struct:_PQ_HEADER	file:
alloc_view	../util/vectormalloc.c	/^EXPORT void alloc_view($/;"	f
allocate_fourier_poly	ifourier.c	/^EXPORT	FOURIER_POLY  *allocate_fourier_poly($/;"	f
allocate_legendre_poly	ifourier.c	/^EXPORT	LEGENDRE_POLY  *allocate_legendre_poly($/;"	f
allocate_storage	triangle.c	/^LOCAL void* allocate_storage($/;"	f
allow_null_sides	icheck3d.c	/^LOCAL	boolean	allow_null_sides = NO;$/;"	v
allow_pp_comm	../util/ppsub.c	/^EXPORT	boolean	allow_pp_comm = YES;$/;"	v
alpha	int.h	/^        double   alpha;          \/*alpha must be irrational. *\/$/;"	m	struct:__anon72
alternateaxes	triangle.c	/^LOCAL void alternateaxes($/;"	f
ang	int.h	/^	double		*ang;$/;"	m	struct:_O_NODE
angle	geomutils.c	/^EXPORT  double  angle($/;"	f
angle_direction_name	geomutils.c	/^EXPORT	const char *angle_direction_name($/;"	f
apex	triangle.c	867;"	d	file:
append_output	../util/output.c	/^EXPORT	boolean append_output($/;"	f
append_to_comp_equiv_list	iecomps.c	/^LOCAL EQUIV_COMPS *append_to_comp_equiv_list($/;"	f
apply_pt_constraint	itrisset.c	/^LOCAL	boolean	apply_pt_constraint($/;"	f
arc	../util/plotdecs.h	302;"	d
area	geom.h	/^	    double          area;      \/* Total (Remappped) Computational Area *\/$/;"	m	struct:_RECT_GRID::_REMAP
area	int.h	/^	double		area;$/;"	m	struct:_BLK_TRI
area	int.h	/^        double           area;$/;"	m	struct:_SURF
area	table.h	/^	double		***area;	\/* Surface area in each Grid Block *\/$/;"	m	struct:Table
area_corner1_case06	iblkc2.c	/^LOCAL double area_corner1_case06($/;"	f
area_corner1_case09	iblkc2.c	/^LOCAL double area_corner1_case09($/;"	f
area_corner1_case12	iblkc2.c	/^LOCAL double area_corner1_case12($/;"	f
area_corner1_case14	iblkc2.c	/^LOCAL double area_corner1_case14($/;"	f
area_corner2_case06	iblkc2.c	/^LOCAL double area_corner2_case06($/;"	f
area_corner2_case09	iblkc2.c	/^LOCAL double area_corner2_case09($/;"	f
area_corner2_case12	iblkc2.c	/^LOCAL double area_corner2_case12($/;"	f
area_corner2_case14	iblkc2.c	/^LOCAL double area_corner2_case14($/;"	f
area_corner3_case12	iblkc2.c	/^LOCAL double area_corner3_case12($/;"	f
area_corner3_case14	iblkc2.c	/^LOCAL double area_corner3_case14($/;"	f
area_corner4_case14	iblkc2.c	/^LOCAL double area_corner4_case14($/;"	f
area_corner_case03	iblkc2.c	/^LOCAL double area_corner_case03($/;"	f
area_corner_case08	iblkc2.c	/^LOCAL double area_corner_case08($/;"	f
area_corner_case13	iblkc2.c	/^LOCAL double area_corner_case13($/;"	f
area_edge1_case11	iblkc2.c	/^LOCAL double area_edge1_case11($/;"	f
area_edge2_case11	iblkc2.c	/^LOCAL double area_edge2_case11($/;"	f
area_edge_case02	iblkc2.c	/^LOCAL double area_edge_case02($/;"	f
area_edge_case08	iblkc2.c	/^LOCAL double area_edge_case08($/;"	f
area_glider_case04	iblkc2.c	/^LOCAL double area_glider_case04($/;"	f
area_glider_case13	iblkc2.c	/^LOCAL double area_glider_case13($/;"	f
area_hexagon_case05	iblkc2.c	/^LOCAL double area_hexagon_case05($/;"	f
area_of_closed_curve	isub.c	/^EXPORT	double area_of_closed_curve($/;"	f
area_of_rect_grid	igrid.c	/^LOCAL	double area_of_rect_grid($/;"	f
area_plane_case01	iblkc2.c	/^LOCAL double area_plane_case01($/;"	f
area_twister_case07	iblkc2.c	/^LOCAL double area_twister_case07($/;"	f
area_twister_case10	iblkc2.c	/^LOCAL double area_twister_case10($/;"	f
area_weighted_normal3d	isub.c	/^EXPORT  void area_weighted_normal3d($/;"	f
areabound	triangle.c	936;"	d	file:
areaboundindex	triangle.c	/^LOCAL size_t areaboundindex;     \/* Index to find area bound of a triangle. *\/$/;"	v
around_tris_set	itrisset.c	/^EXPORT	int	around_tris_set($/;"	f
array_T	../util/vectormalloc.c	/^EXPORT POINTER array_T($/;"	f
array_id	int.h	1339;"	d
array_size	iTaps.h	/^        int             array_size;     \/* For array iterators.. *\/$/;"	m	struct:_IterData
arrow	../util/plotdecs.h	303;"	d
arrow_3	../util/plotdecs.h	323;"	d
aspect_tol2	int.h	/^        double   aspect_tol2;    \/* square of aspect ratio tolerance *\/$/;"	m	struct:_TRI_REDIST_PARAMS
assign_2dblk_type	int.h	/^        void        (*assign_2dblk_type)(struct _BLK_CRX2*,int,$/;"	m	struct:_BLK_CRX2
assign_blk_crx	imksurf.c	/^LOCAL void assign_blk_crx($/;"	f
assign_blk_crx2d	imkcurve.c	/^LOCAL void assign_blk_crx2d($/;"	f
assign_btri_states	userhooks.c	/^EXPORT	boolean	assign_btri_states($/;"	f
assign_comp	imksurf.c	/^LOCAL	void assign_comp($/;"	f
assign_curve_boundary_flag	userhooks.c	/^EXPORT	void assign_curve_boundary_flag($/;"	f
assign_curve_boundary_type	userhooks.c	/^EXPORT	void assign_curve_boundary_type($/;"	f
assign_intersection_comp	imksurf.c	/^EXPORT	void assign_intersection_comp($/;"	f
assign_negative_comp	imksurf.c	/^EXPORT	void assign_negative_comp($/;"	f
assign_point	iprt3d.c	/^LOCAL void assign_point(GPT p1, GPT *p2)$/;"	f
assign_positive_comp	imksurf.c	/^EXPORT	void assign_positive_comp($/;"	f
assign_tri_icoords	comp3d.c	/^EXPORT  void assign_tri_icoords($/;"	f
assign_two_comp_domain	imksurf.c	/^LOCAL	void assign_two_comp_domain($/;"	f
assign_two_comp_domain2d	imkcurve.c	/^LOCAL	void assign_two_comp_domain2d($/;"	f
at_end_of_tri_list	int.h	1168;"	d
at_start_of_tri_list	int.h	1169;"	d
attach_curve_to_node	userhooks.c	/^EXPORT	CURVE *attach_curve_to_node($/;"	f
aug_comp_grid	table.h	/^	RECT_GRID	aug_comp_grid;$/;"	m	struct:Table
av_phase	geom.h	/^        double A_sd, P_sd, av_phase;$/;"	m	struct:__anon30
avep	int.h	/^        double   avep[3];$/;"	m	struct:__anon71
average_points	userhooks.c	/^EXPORT	POINT *average_points($/;"	f
average_position_of_surface	isub.c	/^EXPORT	void	average_position_of_surface($/;"	f
avg_angle_and_normalize	geomutils.c	/^EXPORT	double avg_angle_and_normalize($/;"	f
b	geom.h	/^        double b;		$/;"	m	struct:__anon36
b	geom.h	/^        double b;		$/;"	m	struct:__anon37
b	geom.h	/^        double b; \/*vertical length *\/$/;"	m	struct:__anon40
b	geom.h	/^        double b;$/;"	m	struct:__anon38
b	int.h	/^	BOND	b;$/;"	m	union:_HYPER_SURF_ELEMENT
b0	geom.h	/^	double b0;$/;"	m	struct:__anon43
b1	geom.h	/^	double b1;$/;"	m	struct:__anon43
b1	int.h	/^	BOND *b1, *b2;		\/* BONDS that Intersect *\/$/;"	m	struct:_Cross
b2	int.h	/^	BOND *b1, *b2;		\/* BONDS that Intersect *\/$/;"	m	struct:_Cross
b_closest	comp2d.c	/^LOCAL	BOND	*b_closest = NULL;$/;"	v
backsolve_bivar_safeguarded	iredist_o2.c	/^void  backsolve_bivar_safeguarded($/;"	f
badsegments	triangle.c	/^LOCAL memorypool badsegments;$/;"	v
base_and_dir_name	../util/other.c	/^EXPORT	void	base_and_dir_name($/;"	f
bdry	int.h	/^        int             bdry;       \/* The flags whether the boundary curves $/;"	m	struct:_BLK_CRX2
bdry	int_amr.h	/^        int             bdry[3];$/;"	m	struct:_PATCH_BDRY_FLAG
bdry_adjacent_tri	isurgery.c	/^LOCAL	TRI *bdry_adjacent_tri($/;"	f
bdry_box_func	imksurf.c	/^EXPORT	double bdry_box_func($/;"	f
bdry_side	int.h	910;"	d
bdry_side	int_amr.h	/^        int             bdry_side[3][2];$/;"	m	struct:_PATCH_BDRY_FLAG
bdry_side_as_string	top.c	/^EXPORT	const char	*bdry_side_as_string($/;"	f
begin_pt	isurgery.c	/^  	POINT 	*begin_pt;$/;"	m	struct:_SEAM	file:
bg	igview.c	/^	int bg[3];$/;"	m	struct:DATA	file:
bg_col	igview.c	/^	int bg_col; \/*... *\/$/;"	m	struct:DATA	file:
bi_array	../util/vmalloc.h	110;"	d
bi_array	../util/vmalloc.h	87;"	d
big_angle	isub.c	/^EXPORT void big_angle($/;"	f
big_chunks	table.h	/^	struct Chunk    *big_chunks;    \/* Oversized chunks *\/$/;"	m	struct:Table	typeref:struct:Table::Chunk
binary_output	../util/simpleio.c	/^LOCAL boolean binary_output = YES;$/;"	v
binary_plot	../util/sigplot.c	163;"	d	file:
bisection_find_root	../util/roots.c	/^EXPORT boolean bisection_find_root($/;"	f
blk_case01_comp2	iblkc2.c	/^LOCAL void blk_case01_comp2($/;"	f
blk_case01_comp3	iblkc3.c	/^LOCAL	void blk_case01_comp3($/;"	f
blk_case02_comp2	iblkc2.c	/^LOCAL void blk_case02_comp2($/;"	f
blk_case02_comp3	iblkc3.c	/^LOCAL	void blk_case02_comp3($/;"	f
blk_case03_comp2	iblkc2.c	/^LOCAL   void blk_case03_comp2($/;"	f
blk_case03_comp3	iblkc3.c	/^LOCAL	void blk_case03_comp3($/;"	f
blk_case04_comp2	iblkc2.c	/^LOCAL void blk_case04_comp2($/;"	f
blk_case04_comp3	iblkc3.c	/^LOCAL	void blk_case04_comp3($/;"	f
blk_case05_comp2	iblkc2.c	/^LOCAL void blk_case05_comp2($/;"	f
blk_case05_comp3	iblkc3.c	/^LOCAL	void blk_case05_comp3($/;"	f
blk_case06_comp2	iblkc2.c	/^LOCAL void blk_case06_comp2($/;"	f
blk_case06_comp3	iblkc3.c	/^LOCAL	void blk_case06_comp3($/;"	f
blk_case07_comp2	iblkc2.c	/^LOCAL void blk_case07_comp2($/;"	f
blk_case07_comp3	iblkc3.c	/^LOCAL	void blk_case07_comp3($/;"	f
blk_case08_comp2	iblkc2.c	/^LOCAL void blk_case08_comp2($/;"	f
blk_case08_comp3	iblkc3.c	/^LOCAL	void blk_case08_comp3($/;"	f
blk_case09_comp2	iblkc2.c	/^LOCAL void blk_case09_comp2($/;"	f
blk_case09_comp3	iblkc3.c	/^LOCAL	void blk_case09_comp3($/;"	f
blk_case10_comp2	iblkc2.c	/^LOCAL void blk_case10_comp2($/;"	f
blk_case10_comp3	iblkc3.c	/^LOCAL	void blk_case10_comp3($/;"	f
blk_case11_comp2	iblkc2.c	/^LOCAL void blk_case11_comp2($/;"	f
blk_case11_comp3	iblkc3.c	/^LOCAL	void blk_case11_comp3($/;"	f
blk_case12_comp2	iblkc2.c	/^LOCAL void blk_case12_comp2($/;"	f
blk_case12_comp3	iblkc3.c	/^LOCAL	void blk_case12_comp3($/;"	f
blk_case13_comp2	iblkc2.c	/^LOCAL void blk_case13_comp2($/;"	f
blk_case13_comp3	iblkc3.c	/^LOCAL	void blk_case13_comp3($/;"	f
blk_case14_comp2	iblkc2.c	/^LOCAL void blk_case14_comp2($/;"	f
blk_case14_comp3	iblkc3.c	/^LOCAL	void blk_case14_comp3($/;"	f
blk_case15_comp3	iblkc3.c	/^LOCAL	void blk_case15_comp3($/;"	f
blk_case16_comp3	iblkc3.c	/^LOCAL	void blk_case16_comp3($/;"	f
blk_case17_comp3	iblkc3.c	/^LOCAL	void blk_case17_comp3($/;"	f
blk_case18_comp3	iblkc3.c	/^LOCAL	void blk_case18_comp3($/;"	f
blk_case19_comp3	iblkc3.c	/^LOCAL	void blk_case19_comp3($/;"	f
blk_case20_comp3	iblkc3.c	/^LOCAL	void blk_case20_comp3($/;"	f
blk_case21_comp3	iblkc3.c	/^LOCAL	void blk_case21_comp3($/;"	f
blk_case22_comp3	iblkc3.c	/^LOCAL	void blk_case22_comp3($/;"	f
blk_case23_comp3	iblkc3.c	/^LOCAL	void blk_case23_comp3($/;"	f
blk_case24_comp3	iblkc3.c	/^LOCAL	void blk_case24_comp3($/;"	f
blk_case25_comp3	iblkc3.c	/^LOCAL	void blk_case25_comp3($/;"	f
blk_case26_comp3	iblkc3.c	/^LOCAL	void blk_case26_comp3($/;"	f
blk_case27_comp3	iblkc3.c	/^LOCAL	void blk_case27_comp3($/;"	f
blk_case28_comp3	iblkc3.c	/^LOCAL	void blk_case28_comp3($/;"	f
blk_case29_comp3	iblkc3.c	/^LOCAL	void blk_case29_comp3($/;"	f
blk_case30_comp3	iblkc3.c	/^LOCAL	void blk_case30_comp3($/;"	f
blk_case31_comp3	iblkc3.c	/^LOCAL	void blk_case31_comp3($/;"	f
blk_case32_comp3	iblkc3.c	/^LOCAL	void blk_case32_comp3($/;"	f
blk_case33_comp3	iblkc3.c	/^LOCAL	void blk_case33_comp3($/;"	f
blk_case34_comp3	iblkc3.c	/^LOCAL	void blk_case34_comp3($/;"	f
blk_case35_comp3	iblkc3.c	/^LOCAL	void blk_case35_comp3($/;"	f
blk_case36_comp3	iblkc3.c	/^LOCAL	void blk_case36_comp3($/;"	f
blk_case37_comp3	iblkc3.c	/^LOCAL	void blk_case37_comp3($/;"	f
blk_case38_comp3	iblkc3.c	/^LOCAL	void blk_case38_comp3($/;"	f
blk_case39_comp3	iblkc3.c	/^LOCAL	void blk_case39_comp3($/;"	f
blk_case40_comp3	iblkc3.c	/^LOCAL	void blk_case40_comp3($/;"	f
blk_case41_comp3	iblkc3.c	/^LOCAL	void blk_case41_comp3($/;"	f
blk_case42_comp3	iblkc3.c	/^LOCAL	void blk_case42_comp3($/;"	f
blk_case43_comp3	iblkc3.c	/^LOCAL	void blk_case43_comp3($/;"	f
blk_case44_comp3	iblkc3.c	/^LOCAL	void blk_case44_comp3($/;"	f
blk_case45_comp3	iblkc3.c	/^LOCAL	void blk_case45_comp3($/;"	f
blk_case46_comp3	iblkc3.c	/^LOCAL	void blk_case46_comp3($/;"	f
blk_case47_comp3	iblkc3.c	/^LOCAL	void blk_case47_comp3($/;"	f
blk_case48_comp3	iblkc3.c	/^LOCAL	void blk_case48_comp3($/;"	f
blk_case49_comp3	iblkc3.c	/^LOCAL	void blk_case49_comp3($/;"	f
blk_case50_comp3	iblkc3.c	/^LOCAL	void blk_case50_comp3($/;"	f
blk_case51_comp3	iblkc3.c	/^LOCAL	void blk_case51_comp3($/;"	f
blk_case52_comp3	iblkc3.c	/^LOCAL	void blk_case52_comp3($/;"	f
blk_case53_comp3	iblkc3.c	/^LOCAL	void blk_case53_comp3($/;"	f
blk_case54_comp3	iblkc3.c	/^LOCAL	void blk_case54_comp3($/;"	f
blk_case55_comp3	iblkc3.c	/^LOCAL	void blk_case55_comp3($/;"	f
blk_case56_comp3	iblkc3.c	/^LOCAL	void blk_case56_comp3($/;"	f
blk_case57_comp3	iblkc3.c	/^LOCAL	void blk_case57_comp3($/;"	f
blk_case_b1	iblkb.c	/^LOCAL 	void blk_case_b1($/;"	f
blk_case_b2	iblkb.c	/^LOCAL	void blk_case_b2($/;"	f
blk_case_b3	iblkb.c	/^LOCAL 	void blk_case_b3($/;"	f
blk_case_b4	iblkb.c	/^LOCAL 	void blk_case_b4($/;"	f
blk_edge	table.h	/^	BLK_EDGE	**blk_edge;$/;"	m	struct:Table
blk_info	imkcurve.c	/^        BLK_INFO        *blk_info;$/;"	m	struct:_BLK_CRX_2D	file:
blk_info	int.h	/^        BLK_INFO        *blk_info;$/;"	m	struct:_BLK_BOND
blk_info	int.h	/^        BLK_INFO        *blk_info;$/;"	m	struct:_BLK_CRX
blk_info	int.h	/^        BLK_INFO        *blk_info;$/;"	m	struct:_BLK_TRI
blk_len	arrayutils.c	/^	int blk_len; \/* Block length for pq_str and p2str *\/$/;"	m	struct:_PQ_HEADER	file:
blk_name	iblkc3.c	/^LOCAL  const char   *blk_name;$/;"	v
blk_tol	comp3d.c	/^LOCAL	const double	blk_tol = 1.0e-6;$/;"	v
blk_type	imkcurve.c	/^        BLK_TYPE        blk_type;$/;"	m	struct:_BLK_CRX_2D	file:
blk_type	int.h	/^        BLK_TYPE        blk_type;   $/;"	m	struct:_BLK_CRX2
blk_type	int.h	/^        BLK_TYPE        blk_type;$/;"	m	struct:_BLK_CRX
blk_type	table.h	/^	int       *blk_type;$/;"	m	struct:Table
blkic	int.h	/^        int             blkic[MAXD]; \/* blk icoords *\/$/;"	m	struct:_BLK_CRX2
block	../util/vectormalloc.c	/^	POINTER	             block;$/;"	m	struct:_ALLOC_HEADER	file:
block_dimension	comp3d.c	/^LOCAL int block_dimension($/;"	f
block_from_header	../util/vectormalloc.c	229;"	d	file:
block_recorded	comp3d.c	/^LOCAL boolean block_recorded($/;"	f
block_size	triangle.c	/^    size_t            block_size;$/;"	m	struct:PoolBlock	file:
blocks_on_bond	comp2d.c	/^LOCAL boolean blocks_on_bond($/;"	f
blocks_on_grid_based_tri	comp3d.c	/^LOCAL void blocks_on_grid_based_tri($/;"	f
blocks_on_tri	comp3d.c	/^LOCAL void blocks_on_tri($/;"	f
blocks_sect	itrisset.c	/^EXPORT	boolean	blocks_sect($/;"	f
bmax	geom.h	/^	int bmax[MAXD];	  \/* Upper bound of box indices *\/$/;"	m	struct:_RECT_BOX
bmin	geom.h	/^	int bmin[MAXD];	  \/* Lower bound of box indices *\/$/;"	m	struct:_RECT_BOX
bond	iTaps.h	/^            struct _BOND *bond;$/;"	m	union:_FTEHANDLE::__anon74	typeref:struct:_FTEHANDLE::__anon74::_BOND
bond	int.h	/^	BOND		   *bond;$/;"	m	struct:_CRXING
bond	int.h	/^	struct	_BOND	*bond;$/;"	m	struct:_C_BOND	typeref:struct:_C_BOND::_BOND
bond	int.h	/^	struct _BOND    *bond;$/;"	m	struct:_BOND_TRI	typeref:struct:_BOND_TRI::_BOND
bond	triangle.c	886;"	d	file:
bond_blocks	comp2d.c	/^	  *bond_blocks;		\/* Points to temporary array *\/$/;"	v
bond_cross_bdry_curve_at_node	testintfc.c	/^LOCAL boolean bond_cross_bdry_curve_at_node($/;"	f
bond_crosses_curve	isect2d.c	/^EXPORT boolean bond_crosses_curve($/;"	f
bond_length	int.h	1075;"	d
bond_number	intfc.c	/^EXPORT	uint64_t bond_number($/;"	f
bond_tri_number	intfc.c	/^EXPORT	uint64_t bond_tri_number($/;"	f
bonds	iloc.h	/^	uint64_t **bonds;      \/* addresses of bonds *\/$/;"	m	struct:__anon51
bonds	int.h	/^        BOND            *bonds[12];$/;"	m	struct:_BLK_TRI
bonds	int.h	/^        BOND            *bonds[4][2];$/;"	m	struct:_BLK_BOND
bonds	table.h	/^	BOND		****bonds;	\/* BOND lists in each Grid Block *\/$/;"	m	struct:Table
bonds1	int.h	/^	BOND            *bonds1[12];$/;"	m	struct:_BLK_TRI
bonds_in_strict_order	top.c	/^EXPORT boolean bonds_in_strict_order($/;"	f
bondstore	table.h	/^	BOND		**bondstore;	\/* Storage for BOND Lists *\/$/;"	m	struct:Table
boolean	../util/cdecs.h	/^typedef enum _boolean boolean;$/;"	t	typeref:enum:_boolean
bound_tris_set	itrisset.c	/^EXPORT	int	bound_tris_set($/;"	f
boundary	int.h	/^	int	  boundary;$/;"	m	struct:_C_CURVE
boundary	int.h	/^	int boundary;		\/* tri bonds on interface curves? *\/$/;"	m	struct:_TRI
boundary_side	top.c	/^EXPORT	BDRY_SIDE	boundary_side($/;"	f
boundary_side_of_point	setb2d.c	/^LOCAL	BDRY_SIDE boundary_side_of_point($/;"	f
bptr	int.h	/^		int	*bptr;$/;"	m	union:_HYPER_SURF::__anon58
bptr	int.h	/^		int	*bptr;$/;"	m	union:_HYPER_SURF_BDRY::__anon59
bt	int.h	/^	byte	bt;$/;"	m	union:_HYPER_SURF_ELEMENT
btri	int.h	/^	struct _BOND_TRI *btri;$/;"	m	union:_TRI_NEIGHBOR	typeref:struct:_TRI_NEIGHBOR::_BOND_TRI
buf	int.h	/^	int	buf[MAXD];	\/* shaded subdomain extension. every mesh$/;"	m	struct:__anon70
buffer_zones	int.h	1369;"	d
buffered_boundary_type	int.h	976;"	d
buffered_boundary_type	int.h	980;"	d
byte	../util/cdecs.h	/^typedef unsigned char byte;	\/* Generic object of size 1, sizeof(byte) = 1 *\/$/;"	t
byte_reverse	../util/cdecs.h	510;"	d
c	geom.h	/^        double c;		$/;"	m	struct:__anon36
c	int.h	/^		CURVE	*c;$/;"	m	union:_HYPER_SURF::__anon58
c	int.h	/^		CURVE	*c;$/;"	m	union:_HYPER_SURF_BDRY::__anon59
c	int.h	/^	CURVE   *c;$/;"	m	struct:_BBI_POINT
c	int.h	/^            } c;$/;"	m	union:_TRI::__anon55	typeref:struct:_TRI::__anon55::__anon56
c	int.h	/^        CURVE           *c;$/;"	m	struct:_BBI_POINT2
c0	int.h	/^                char c0;$/;"	m	struct:_TRI::__anon55::__anon56
c01	iredist.c	/^	CURVE   *c01, *c12, *c20;$/;"	m	struct:_TRI_SURF	file:
c01	iredist_o2.c	/^  CURVE   *c01, *c12, *c20;$/;"	m	struct:_TRI_SURF	file:
c1	int.h	/^	CURVE *c1, *c2;		\/* CURVES that Intersect *\/$/;"	m	struct:_Cross
c1	int.h	/^                char c1;$/;"	m	struct:_TRI::__anon55::__anon56
c12	iredist.c	/^	CURVE   *c01, *c12, *c20;$/;"	m	struct:_TRI_SURF	file:
c12	iredist_o2.c	/^  CURVE   *c01, *c12, *c20;$/;"	m	struct:_TRI_SURF	file:
c1_to_c2_direction	isub.c	/^EXPORT ANGLE_DIRECTION c1_to_c2_direction($/;"	f
c2	int.h	/^	CURVE *c1, *c2;		\/* CURVES that Intersect *\/$/;"	m	struct:_Cross
c2	int.h	/^                char c2;$/;"	m	struct:_TRI::__anon55::__anon56
c20	iredist.c	/^	CURVE   *c01, *c12, *c20;$/;"	m	struct:_TRI_SURF	file:
c20	iredist_o2.c	/^  CURVE   *c01, *c12, *c20;$/;"	m	struct:_TRI_SURF	file:
c3	int.h	/^                char c3;$/;"	m	struct:_TRI::__anon55::__anon56
c_cell_offset	table.h	/^        int c_cell_offset;       \/* same meaning as cell_offset, on *\/$/;"	m	struct:Table
c_cg_comps	table.h	/^	COMPONENT	*c_cg_comps;  \/* On aug_comp_grid  *\/$/;"	m	struct:Table
c_cg_npts	table.h	/^	TG_PT     	*c_node_points,*c_cg_npts;$/;"	m	struct:Table
c_closest	comp2d.c	/^LOCAL	CURVE	*c_closest = NULL;$/;"	v
c_components	table.h	/^	COMPONENT	*c_components;$/;"	m	struct:Table
c_crx_store	table.h	/^	CRXING		*c_crx_store;$/;"	m	struct:Table
c_curve	int.h	/^	C_CURVE *c_curve;$/;"	m	struct:_Cross
c_curve	int.h	/^	struct _C_CURVE	*c_curve;$/;"	m	struct:_C_BOND	typeref:struct:_C_BOND::_C_CURVE
c_curves	int.h	/^	struct _C_CURVE **c_curves;	\/* c_curves on interface *\/$/;"	m	struct:_INTERFACE	typeref:struct:_INTERFACE::_C_CURVE
c_curves	int.h	/^	struct _C_CURVE **c_curves;	\/* c_curves on surface *\/$/;"	m	struct:_SURFACE	typeref:struct:_SURFACE::_C_CURVE
c_nnx	table.h	/^	int c_nnx,c_nny,c_nnz; 	 \/* Number of nodes on aug_comp_grid *\/$/;"	m	struct:Table
c_nny	table.h	/^	int c_nnx,c_nny,c_nnz; 	 \/* Number of nodes on aug_comp_grid *\/$/;"	m	struct:Table
c_nnz	table.h	/^	int c_nnx,c_nny,c_nnz; 	 \/* Number of nodes on aug_comp_grid *\/$/;"	m	struct:Table
c_node_offset	table.h	/^	int c_node_offset;       \/* same meaning as node_offset, on *\/$/;"	m	struct:Table
c_node_points	table.h	/^	TG_PT     	*c_node_points,*c_cg_npts;$/;"	m	struct:Table
c_seg_crx_count	table.h	/^	int		*c_seg_crx_count;$/;"	m	struct:Table
c_seg_crx_lists	table.h	/^	int		**c_seg_crx_lists;$/;"	m	struct:Table
c_seg_crx_lists_store	table.h	/^	int       *c_seg_crx_lists_store;$/;"	m	struct:Table
cal_angle	geomutils.c	/^EXPORT 	double cal_angle($/;"	f
calculate_box	zoom.c	/^LOCAL void calculate_box($/;"	f
carveholes	triangle.c	/^LOCAL void carveholes($/;"	f
cb_end_tri_side_index	int.h	696;"	d
cb_flag_end	int.h	695;"	d
cb_flag_start	int.h	689;"	d
cb_start_tri_side_index	int.h	690;"	d
ccwerrboundA	triangle.c	/^LOCAL double ccwerrboundA, ccwerrboundB, ccwerrboundC;$/;"	v
ccwerrboundB	triangle.c	/^LOCAL double ccwerrboundA, ccwerrboundB, ccwerrboundC;$/;"	v
ccwerrboundC	triangle.c	/^LOCAL double ccwerrboundA, ccwerrboundB, ccwerrboundC;$/;"	v
cell_ceil	geom.h	241;"	d
cell_center	geom.h	242;"	d
cell_edge	geom.h	243;"	d
cell_floor	geom.h	240;"	d
cell_index	geom.h	239;"	d
cell_volume	int.h	/^	double		cell_volume;		\/* volume of regular cell *\/$/;"	m	struct:_BLK_CRX
cell_width	geom.h	245;"	d
cen	geom.h	/^	double 	      cen[MAXD];		\/* Center of Ellipsoid *\/$/;"	m	struct:__anon33
cen	geom.h	/^	double **cen;$/;"	m	struct:__anon46
cen	geom.h	/^        double         **cen;            \/* Center of Ellipsoid 1 *\/$/;"	m	struct:__anon47
cen	geom.h	/^        double cen[MAXD];$/;"	m	struct:__anon48
cen	geom.h	/^        double cen[MAXD];$/;"	m	struct:__anon49
cen	int.h	/^        double           cen[2];    \/*center point of the edge *\/$/;"	m	struct:_EDGE
cen	itrisset.c	/^	double		min_len, cen[3];$/;"	m	struct:__anon13	file:
cen	testintfc.c	/^	double cen[MAXD];$/;"	m	struct:_RADIAL_MOTION_PARAMS	file:
centers	geom.h	/^	double *centers[3];	\/* Coordinate cell centers *\/$/;"	m	struct:_RECT_GRID
centroid	int.h	/^        double           centroid[3];$/;"	m	struct:_SURF
centroid_of_tri	itrisset.c	/^EXPORT	void	centroid_of_tri($/;"	f
cg_comps	table.h	/^	COMPONENT       *cg_comps;$/;"	m	struct:Table
cgns_interface_plot	igview.c	/^EXPORT void cgns_interface_plot($/;"	f
cgns_plot_curves	igview.c	/^LOCAL   void    cgns_plot_curves($/;"	f
cgns_plot_surfaces	igview.c	/^LOCAL	void	cgns_plot_surfaces($/;"	f
cgns_print_box	igview.c	/^LOCAL	void   cgns_print_box($/;"	f
change	int.h	/^            boolean   change;$/;"	m	struct:_HYPER_SURF::_DYNAMIC_COMP_CHANGE
change_curve_comp	int.h	930;"	d
change_curve_comp_by	int.h	932;"	d
change_curve_comp_on_side	int.h	931;"	d
change_node_of_closed_curve	intfc.c	/^EXPORT boolean  change_node_of_closed_curve($/;"	f
change_node_of_curve	top.c	/^EXPORT void change_node_of_curve($/;"	f
check_adjecant_constrain	itrisset.c	/^LOCAL  boolean  check_adjecant_constrain($/;"	f
check_array_alloc_size	../util/vmalloc.h	76;"	d
check_closest_point_is_node	comp2d.c	/^LOCAL	SIDE	check_closest_point_is_node($/;"	f
check_component	testintfc.c	/^LOCAL void check_component(INTERFACE *intfc)$/;"	f
check_comps_at_nodes	comp.c	/^EXPORT int check_comps_at_nodes($/;"	f
check_consistence_of_crx	iblkc3.c	/^LOCAL	int check_consistence_of_crx($/;"	f
check_consistency_of_tris_on_surface	icheck3d.c	/^LOCAL	boolean check_consistency_of_tris_on_surface($/;"	f
check_curve2d	icheck3d.c	/^LOCAL	boolean	check_curve2d($/;"	f
check_curve3d	icheck3d.c	/^LOCAL	boolean	check_curve3d($/;"	f
check_delete_degenerate_node	testintfc.c	/^LOCAL	void check_delete_degenerate_node(INTERFACE *intfc)$/;"	f
check_double_cone_point	icheck3d.c	/^EXPORT	void check_double_cone_point($/;"	f
check_for_blocked_output	../util/output.c	/^	boolean    check_for_blocked_output;$/;"	m	struct:_IOUTPUT	file:
check_output	../util/output.c	/^EXPORT boolean check_output($/;"	f
check_print_intfc	userhooks.c	/^EXPORT	void  check_print_intfc($/;"	f
check_pt	idiagnostic.c	/^LOCAL boolean check_pt(double *p1, $/;"	f
check_tri	icheck3d.c	/^LOCAL	boolean	check_tri($/;"	f
check_tri_and_bond	icheck3d.c	/^LIB_LOCAL void check_tri_and_bond($/;"	f
check_tri_and_neighbor	idiagnostic.c	/^EXPORT	boolean check_tri_and_neighbor(TRI *tri)$/;"	f
check_two_tris_cond	itrisset.c	/^boolean	check_two_tris_cond($/;"	f
check_valid_intfc	itrisset.c	/^EXPORT	boolean	check_valid_intfc($/;"	f
check_valid_point	itrisset.c	/^EXPORT	boolean	check_valid_point($/;"	f
check_valid_tris	itrisset.c	/^EXPORT	boolean	check_valid_tris($/;"	f
checksegments	triangle.c	/^LOCAL int checksegments;     \/* Are there segments in the triangulation yet? *\/$/;"	v
chunk_id	int.h	1338;"	d
circumcentercount	triangle.c	/^LOCAL long circumcentercount;\/* Number of circumcenter calculations performed. *\/$/;"	v
circumcenterresult	triangle.c	/^enum circumcenterresult {$/;"	g	file:
circumcenterresult	triangle.c	/^typedef enum circumcenterresult circumcenterresult;$/;"	t	typeref:enum:circumcenterresult	file:
clean_up	../util/cdecs.h	273;"	d
clean_up_handler	../util/cleanup.c	/^LOCAL	void	clean_up_handler($/;"	f
clean_up_handler	../util/cleanup.c	/^LOCAL   Error_handler   clean_up_handler;$/;"	v
clean_up_printout	../util/cleanup.c	/^LOCAL	void	(*clean_up_printout)(int) = NULL;$/;"	v
clean_upp	../util/cleanup.c	/^EXPORT void clean_upp($/;"	f
clear_pp_trap	../util/cleanup.c	/^LOCAL	void clear_pp_trap($/;"	f
clip_interface2d	zoom.c	/^EXPORT void clip_interface2d($/;"	f
close_frame	iprt3d.c	57;"	d	file:
close_segment	../util/plotdecs.h	306;"	d
closed	geom.h	/^	boolean          closed;		\/* Closed ellipsoid if YES *\/$/;"	m	struct:__anon33
closed_curve_node_redistribute	iredist.c	/^EXPORT	boolean closed_curve_node_redistribute($/;"	f
closepl	../util/plotdecs.h	265;"	d
closevt	../util/plotdecs.h	304;"	d
collapse_tri_on_side	intfc.c	/^LOCAL	boolean collapse_tri_on_side($/;"	f
color_list	igview.c	/^LOCAL int *color_list;$/;"	v
colorval	igview.c	/^EXPORT int colorval(int i, int N, int j)$/;"	f
comm_pt_fac	itrisset.c	/^LOCAL	double	comm_pt_fac = 0.5;$/;"	v
common_lseg	iprt3d.c	/^LOCAL int common_lseg($/;"	f
common_point	iprt3d.c	/^LOCAL int common_point($/;"	f
comp	comp3d.c	/^	COMPONENT     comp;$/;"	m	struct:__anon5	file:
comp	imkcurve.c	/^        COMPONENT       **comp;$/;"	m	struct:_BLK_CRX_2D	file:
comp	imkcurve.c	/^        COMPONENT **comp;$/;"	m	struct:_EG_CRX_2D	file:
comp	int.h	/^        COMPONENT               *comp;          \/* an array of equiv objs *\/$/;"	m	struct:_EQUIV_COMPS
comp	int.h	/^        COMPONENT       ***comp;$/;"	m	struct:_BLK_CRX
comp	int.h	/^        COMPONENT       ***comp;$/;"	m	struct:_BLK_CRX2
comp	int.h	/^        COMPONENT ***comp;$/;"	m	struct:_EG_CRX
comp1	setb2d.c	/^	COMPONENT      comp1; \/* Component below point - (below in arclength) *\/$/;"	m	struct:_BPOINT	file:
comp2	setb2d.c	/^	COMPONENT      comp2; \/* Component above point - (above in arclength) *\/$/;"	m	struct:_BPOINT	file:
comp_at_closest	comp3d.c	/^LOCAL	COMPONENT comp_at_closest($/;"	f
comp_from_line_tri	comp3d.c	/^LOCAL COMPONENT comp_from_line_tri($/;"	f
comp_is_on_curve	comp2d.c	/^LOCAL	boolean	comp_is_on_curve($/;"	f
comp_is_on_hyper_surf	int.h	934;"	d
comp_is_on_point	comp1d.c	/^LOCAL	boolean	comp_is_on_point($/;"	f
comp_is_on_surface	comp3d.c	/^LOCAL	boolean	comp_is_on_surface($/;"	f
comp_vfrac	int.h	/^	COMPONENT       comp_vfrac;		\/* comp of volume fraction *\/$/;"	m	struct:_BLK_CRX
comp_vfrac	int.h	/^	COMPONENT comp_vfrac;$/;"	m	struct:_VOLUME_FRAC
compare_ang_comp	comp3d.c	/^int compare_ang_comp(const void *a, const void *b)$/;"	f
compare_comp	iblkc2.c	/^LOCAL   int compare_comp($/;"	f
compare_comp	iblkc3.c	/^LOCAL   int compare_comp($/;"	f
compare_pointers	iredist.c	/^LOCAL 	boolean 	compare_pointers($/;"	f
compare_pointers	iredist_o2.c	/^LOCAL 	boolean 	compare_pointers($/;"	f
compare_surf	iwallsurf.c	/^LOCAL  int compare_surf(const void *a, const void *b)$/;"	f
compare_tri_pairs	itrisset.c	/^int compare_tri_pairs(const void *a, const void *b)$/;"	f
compare_tri_sort	itrisset.c	/^LOCAL	int compare_tri_sort($/;"	f
compare_tris	comp3d.c	/^LOCAL	int compare_tris(const void *a, const void *b)$/;"	f
compon1d	table.h	/^	COMPONENT       *compon1d;        \/* COMPONENT in each Grid Block *\/$/;"	m	struct:Table
compon2d	table.h	/^	COMPONENT	**compon2d;	\/* COMPONENT in each Grid Block *\/$/;"	m	struct:Table
compon3d	table.h	/^	COMPONENT	***compon3d;	\/* COMPONENT in each Grid Block *\/$/;"	m	struct:Table
component	comp.c	/^EXPORT COMPONENT component($/;"	f
component1d	comp1d.c	/^LIB_LOCAL COMPONENT component1d($/;"	f
component2d	comp2d.c	/^LIB_LOCAL COMPONENT component2d($/;"	f
component3d	comp3d.c	/^LIB_LOCAL COMPONENT component3d($/;"	f
component_wrt_icoords3d	comp3d.c	/^LOCAL COMPONENT component_wrt_icoords3d($/;"	f
component_wrt_icoords3d_vertex	comp3d.c	/^LOCAL COMPONENT component_wrt_icoords3d_vertex($/;"	f
components	table.h	/^	COMPONENT       *components;$/;"	m	struct:Table
comps	imkcurve.c	/^        COMPONENT       comps[4];$/;"	m	struct:_BLK_CRX_2D	file:
comps	int.h	/^	COMPONENT *comps;$/;"	m	struct:_COMP_LIST
comps	int.h	/^        COMPONENT       comps[4];   \/* save different comp index of this $/;"	m	struct:_BLK_CRX2
comps	int.h	/^        COMPONENT       comps[8];$/;"	m	struct:_BLK_CRX
comps_are_on_curve	comp2d.c	110;"	d	file:
comps_are_on_hyper_surf	int.h	939;"	d
comps_are_on_surface	comp3d.c	130;"	d	file:
comps_consistent_at_node	comp.c	/^EXPORT int comps_consistent_at_node($/;"	f
compute_cmf_weights	iredist_o2.c	/^void  compute_cmf_weights($/;"	f
compute_point_smooth	itrisset.c	/^EXPORT	void	compute_point_smooth($/;"	f
compute_qtb	iredist_o2.c	/^void  compute_qtb($/;"	f
compute_resolution	iredist_o2.c	/^double compute_resolution($/;"	f
cone_ratio	int.h	/^        double   cone_ratio, max_cos;$/;"	m	struct:__anon72
connect	itrisset.c	/^	int		connect;$/;"	m	struct:__anon11	file:
connect_adj_blk	imkcurve.c	/^LOCAL	void connect_adj_blk($/;"	f
connect_tris_holes	itrisset.c	/^boolean	connect_tris_holes($/;"	f
consistent_components1d	comp1d.c	/^EXPORT boolean consistent_components1d($/;"	f
consistent_interface	userhooks.c	/^EXPORT	boolean	consistent_interface($/;"	f
constrainededge	triangle.c	/^LOCAL void constrainededge($/;"	f
construct_bdry_blk	iblkb.c	/^EXPORT	int construct_bdry_blk($/;"	f
construct_comp2_blk	iblkc2.c	/^EXPORT	int construct_comp2_blk($/;"	f
construct_comp2_blk2d	imkcurve.c	/^LOCAL	int construct_comp2_blk2d($/;"	f
construct_comp3_blk	iblkc3.c	/^EXPORT	int construct_comp3_blk($/;"	f
construct_vander_bivar	iredist_o2.c	/^void  construct_vander_bivar($/;"	f
cont	../util/plotdecs.h	272;"	d
cont_3	../util/plotdecs.h	322;"	d
convex	triangledefs.h	/^    boolean     convex;$/;"	m	struct:TriangulateOpts
convex_side	comp2d.c	/^LOCAL SIDE convex_side($/;"	f
coord	iprt3d.c	/^	double coord[3];$/;"	m	struct:__anon6	file:
coords	int.h	/^        double           coords[4];$/;"	m	struct:__anon61
coords_on_ellips	imkcurve.c	/^EXPORT	void coords_on_ellips($/;"	f
copy_all_surfaces	int3d.c	/^LIB_LOCAL void copy_all_surfaces($/;"	f
copy_blk_crx	iblkc2.c	/^EXPORT	void copy_blk_crx($/;"	f
copy_blk_crx	iblkc3.c	/^LOCAL   void copy_blk_crx($/;"	f
copy_curve	userhooks.c	/^EXPORT	CURVE *copy_curve($/;"	f
copy_e_comps	iecomps.c	/^LIB_LOCAL POINTER copy_e_comps($/;"	f
copy_interface	userhooks.c	/^EXPORT	INTERFACE *copy_interface($/;"	f
copy_node	userhooks.c	/^EXPORT	NODE *copy_node($/;"	f
copy_o_curve	top.c	/^EXPORT	void copy_o_curve($/;"	f
copy_point	userhooks.c	/^EXPORT	POINT *copy_point($/;"	f
copy_posn	itrisset.c	208;"	d	file:
copy_rect_grid	igrid.c	/^EXPORT	void	copy_rect_grid($/;"	f
copy_surface	userhooks.c	/^EXPORT	SURFACE *copy_surface($/;"	f
copy_tris	int3d.c	/^LOCAL	void copy_tris($/;"	f
copy_until	../util/fgetstrin.c	/^EXPORT	char *copy_until($/;"	f
copysign	../util/machine.c	/^EXPORT	double	copysign(double x, double y)$/;"	f
cor	int.h	/^        double   cor, cos;$/;"	m	struct:__anon71
cor_point	int.h	/^            POINTER     cor_point;$/;"	m	union:_POINT::__anon53
corner_coords	int.h	/^	double		****corner_coords;	\/* for volume fraction *\/$/;"	m	struct:_BLK_CRX
cos	int.h	/^        double   cor, cos;$/;"	m	struct:__anon71
cosmos_func	imkcurve.c	/^EXPORT double cosmos_func($/;"	f
count	comp2d.c	/^static	int count,max_size;$/;"	v	file:
count_bdry_coner_crx	imksurf.c	/^LOCAL int count_bdry_coner_crx($/;"	f
count_crx_through_comp	imksurf.c	/^EXPORT	int count_crx_through_comp($/;"	f
count_crx_through_comp2d	imkcurve.c	/^LOCAL	int count_crx_through_comp2d($/;"	f
count_digits	../util/vtk.c	/^int count_digits(int num)$/;"	f
count_null_sides_of_surf	isurgery.c	/^LOCAL	int	count_null_sides_of_surf($/;"	f
count_side_comp	iblkc3.c	/^LOCAL	int count_side_comp($/;"	f
count_side_comp	imksurf.c	/^LOCAL	int count_side_comp($/;"	f
count_tris_in_box	itrisset.c	/^EXPORT	int	count_tris_in_box($/;"	f
count_tris_in_top_box	itrisset.c	/^EXPORT	int	count_tris_in_top_box($/;"	f
counterclockcount	triangle.c	/^LOCAL long counterclockcount; \/* Number of counterclockwise tests performed. *\/$/;"	v
counterclockwise	triangle.c	/^LOCAL double counterclockwise(point pa, point pb, point pc)$/;"	f
counterclockwiseadapt	triangle.c	/^LOCAL double counterclockwiseadapt($/;"	f
cpu_endian	../util/cdecs.h	/^	FT_ENDIAN   cpu_endian;$/;"	m	struct:_IO_TYPE
cpu_float_size	../util/cdecs.h	/^	size_t      cpu_float_size;$/;"	m	struct:_IO_TYPE
cpu_seconds	../util/times.c	/^EXPORT double cpu_seconds(void)$/;"	f
cpu_time	../util/times.c	/^EXPORT void cpu_time($/;"	f
cputime	../util/times.c	/^LOCAL	double *cputime = NULL;	\/* Stack for  Storing Recursive Times *\/$/;"	v
cr_tol	isect3d.c	/^LOCAL	double cr_tol;$/;"	v
cray_fwrite_ieee_float	../util/sigplot.c	/^EXPORT	void	cray_fwrite_ieee_float($/;"	f
cray_fwrite_ieee_int	../util/sigplot.c	/^EXPORT	void	cray_fwrite_ieee_int($/;"	f
create_directory	../util/output.c	/^EXPORT	boolean	create_directory($/;"	f
create_segment	../util/plotdecs.h	305;"	d
create_triangle	iblkc2.c	/^EXPORT	void  create_triangle($/;"	f
cross	geom.h	/^	struct _Cross *cross[100];$/;"	m	struct:_RECT_BOX	typeref:struct:_RECT_BOX::_Cross
cross_bonds	isect2d.c	/^EXPORT boolean cross_bonds($/;"	f
cross_prod	iprt3d.c	/^LOCAL void cross_prod(GPT v1, GPT v2, GPT *result)$/;"	f
cross_sign	isub.c	/^EXPORT int cross_sign($/;"	f
cross_tolerance	userhooks.c	/^EXPORT	double cross_tolerance($/;"	f
crossing_direction	int.h	/^        CROSSING_DIRECTION crossing_direction;$/;"	m	struct:_CRXING
crossing_direction_name	isub.c	/^EXPORT	const char *crossing_direction_name($/;"	f
crossings_in_direction1d	map.c	/^LOCAL	int crossings_in_direction1d($/;"	f
crossings_in_direction2d	map.c	/^LOCAL	int crossings_in_direction2d($/;"	f
crossings_in_direction3d	map.c	/^LOCAL	int crossings_in_direction3d($/;"	f
crx	imkcurve.c	/^        BBI_POINT       ***crx;$/;"	m	struct:_BLK_CRX_2D	file:
crx	int.h	/^	boolean		crx;$/;"	m	struct:_POINT
crx	int.h	/^        BBI_POINT       ****crx;$/;"	m	struct:_BLK_CRX
crx	int.h	/^        BBI_POINT2      ****crx;    \/* For the record, current max. # of $/;"	m	struct:_BLK_CRX2
crx_in_idir	iblkc2.c	/^LOCAL	BBI_POINT *crx_in_idir($/;"	f
crx_in_idir	iblkc3.c	/^LOCAL	BBI_POINT *crx_in_idir($/;"	f
crx_in_jdir	iblkc2.c	/^LOCAL	BBI_POINT *crx_in_jdir($/;"	f
crx_in_jdir	iblkc3.c	/^LOCAL	BBI_POINT *crx_in_jdir($/;"	f
crx_in_kdir	iblkc2.c	/^LOCAL	BBI_POINT *crx_in_kdir($/;"	f
crx_in_kdir	iblkc3.c	/^LOCAL	BBI_POINT *crx_in_kdir($/;"	f
crx_num	int.h	/^        int                crx_num;$/;"	m	struct:_CRXING
crx_store	imkcurve.c	/^        BBI_POINT       *crx_store;$/;"	m	struct:_BLK_CRX_2D	file:
crx_store	imkcurve.c	/^        BBI_POINT *crx_store;$/;"	m	struct:_EG_CRX_2D	file:
crx_store	int.h	/^        BBI_POINT       *crx_store;$/;"	m	struct:_BLK_CRX
crx_store	int.h	/^        BBI_POINT *crx_store;$/;"	m	struct:_EG_CRX
crx_store	int.h	/^        BBI_POINT2      *crx_store;$/;"	m	struct:_BLK_CRX2
crx_store	table.h	/^        CRXING          *crx_store;$/;"	m	struct:Table
crx_tol	comp3d.c	/^LOCAL	double	crx_tol;\/*TOLERANCE*\/$/;"	v
crx_toll	comp3d.c	/^LOCAL	double	crx_toll;$/;"	v
crx_tolv	comp3d.c	/^LOCAL	double	crx_tolv;$/;"	v
crxing_in_between	iblkc2.c	/^LOCAL	BBI_POINT *crxing_in_between($/;"	f
crxing_in_between	iblkc3.c	/^LOCAL	BBI_POINT *crxing_in_between($/;"	f
cs_edge_vertex	int.h	662;"	d
cs_flag_end	int.h	675;"	d
cs_flag_start	int.h	674;"	d
cs_on_bdry	int.h	661;"	d
cs_tri_side_index	int.h	660;"	d
ct_max	iredist_o2.c	49;"	d	file:
ct_min	iredist_o2.c	50;"	d	file:
ct_set_max	iredist_o2.c	51;"	d	file:
ct_set_max	isub.c	3430;"	d	file:
ct_set_min	iredist_o2.c	52;"	d	file:
ct_set_min	isub.c	3431;"	d	file:
ctol	comp3d.c	/^LOCAL	double	ctol;$/;"	v
ctype	../util/cdecs.h	/^	union {int itype; const char *ctype;} type;$/;"	m	union:_Prompt_type::__anon81
ctype	int.h	/^        CELL_TYPE       ctype;        \/*type of the block *\/$/;"	m	struct:_BLK_EDGE
ctype	int.h	/^        CELL_TYPE       ctype;        \/*type of the block *\/$/;"	m	struct:_BLK_SURF
cur_IT	intfc.c	/^LOCAL struct Table *cur_IT = NULL;	\/* The current interface table *\/$/;"	v	typeref:struct:Table
cur_bond	table.h	/^	BOND		*cur_bond;	\/* Current BOND for next_point() *\/$/;"	m	struct:Table
cur_bonds	int.h	/^        TRI             **cur_bonds;$/;"	m	struct:_BLK_INFO
cur_curve	table.h	/^	CURVE		**cur_curve;	\/* Current CURVE for next_point() *\/$/;"	m	struct:Table
cur_intfc	intfc.c	/^LOCAL INTERFACE *cur_intfc = NULL;	\/* The current interface *\/$/;"	v
cur_node	table.h	/^	NODE		**cur_node;	\/* Current NODE for next_point() *\/$/;"	m	struct:Table
cur_point	table.h	/^	POINT		**cur_point;$/;"	m	struct:Table
cur_ptr	iTaps.h	/^	POINTER 	cur_ptr;$/;"	m	struct:_IterData
cur_surface	table.h	/^	SURFACE		**cur_surface;$/;"	m	struct:Table
cur_tri	table.h	/^	TRI		*cur_tri;$/;"	m	struct:Table
cur_tris	int.h	/^        TRI             **cur_tris;$/;"	m	struct:_BLK_INFO
curfit	../util/uprotos.h	347;"	d
curr_line	../util/debug.c	/^static int  curr_line = 0;$/;"	v	file:
current	../util/output.c	/^	long    next, current, prev;$/;"	m	struct:_IOUTPUT	file:
current_interface	intfc.c	/^EXPORT INTERFACE *current_interface(void)$/;"	f
curvature	int.h	/^	double		curvature;$/;"	m	struct:_POINT
curvature_end	int.h	/^	double curvature_end;$/;"	m	struct:_CURVE
curvature_start	int.h	/^	double curvature_start;$/;"	m	struct:_CURVE
curvature_unset	int.h	/^	boolean	curvature_unset;\/* Curvature unset since last modify *\/$/;"	m	struct:_INTERFACE
curve	int.h	/^	CURVE	  *curve;$/;"	m	struct:_C_CURVE
curve	int.h	/^	struct _CURVE   *curve;$/;"	m	struct:_BOND_TRI	typeref:struct:_BOND_TRI::_CURVE
curve	int.h	/^	struct _CURVE *curve;$/;"	m	struct:_O_CURVE	typeref:struct:_O_CURVE::_CURVE
curve_ang_oriented_l_to_r	geom.h	292;"	d
curve_crx	int.h	/^        BBI_POINT       ***curve_crx;$/;"	m	struct:_BLK_CRX
curve_crx_count	table.h	/^        int     *curve_crx_count;$/;"	m	struct:Table
curve_crx_in_idir	iblkc3.c	/^LOCAL   BBI_POINT *curve_crx_in_idir($/;"	f
curve_crx_in_jdir	iblkc3.c	/^LOCAL   BBI_POINT *curve_crx_in_jdir($/;"	f
curve_crx_in_kdir	iblkc3.c	/^LOCAL   BBI_POINT *curve_crx_in_kdir($/;"	f
curve_crx_lists	table.h	/^        int     **curve_crx_lists;$/;"	m	struct:Table
curve_crx_lists_store	table.h	/^        int     *curve_crx_lists_store;$/;"	m	struct:Table
curve_crx_store	table.h	/^        CRXING  *curve_crx_store;$/;"	m	struct:Table
curve_crx_type	table.h	/^        int     *curve_crx_type;$/;"	m	struct:Table
curve_crxing_in_between	iblkc3.c	/^LOCAL   BBI_POINT *curve_crxing_in_between($/;"	f
curve_in_curve_list	isub.c	/^EXPORT	int curve_in_curve_list($/;"	f
curve_is_in_surface_bdry	int3d.c	/^EXPORT	boolean curve_is_in_surface_bdry($/;"	f
curve_length	top.c	/^EXPORT	double curve_length($/;"	f
curve_number	intfc.c	/^EXPORT	uint64_t curve_number($/;"	f
curve_of_bond	intfc.c	/^EXPORT	CURVE	*curve_of_bond($/;"	f
curve_surface_orientation	iblkc2.c	/^EXPORT	ORIENTATION curve_surface_orientation($/;"	f
curves	iloc.h	/^	uint64_t *curves;      \/* addresses of curves *\/$/;"	m	struct:__anon51
curves	int.h	/^	struct _CURVE	**curves;	\/* Pointer to Set of Curves *\/$/;"	m	struct:_INTERFACE	typeref:struct:_INTERFACE::_CURVE
curves	int.h	/^        CURVE           **curves;$/;"	m	struct:_BLK_INFO
curves	int.h	/^        CURVE           *curves[12];$/;"	m	struct:_BLK_TRI
curves	int.h	/^        CURVE           *curves[4];$/;"	m	struct:_BLK_BOND
curves	int.h	/^        CURVE     **curves;$/;"	m	struct:_EG_CRX
curves	table.h	/^	CURVE		****curves;	\/* CURVE lists in each Grid Block *\/$/;"	m	struct:Table
curvestore	table.h	/^	CURVE		**curvestore;	\/* Storage for CURVE Lists *\/$/;"	m	struct:Table
cylin_Area	igrid.c	/^LOCAL	double cylin_Area($/;"	f
cylin_Volume	igrid.c	/^LOCAL	double cylin_Volume($/;"	f
d	comp3d.c	/^	double   d, d2;		\/* distance and square distance pt to tri *\/$/;"	m	struct:__anon3	file:
d1_mach	../util/machine.c	/^EXPORT	double d1_mach(int i)$/;"	f
d2	comp3d.c	/^	double   d, d2;		\/* distance and square distance pt to tri *\/$/;"	m	struct:__anon3	file:
d_index	geom.h	97;"	d
d_index1d	geom.h	88;"	d
d_index2d	geom.h	91;"	d
d_index3d	geom.h	94;"	d
data_of_point	idiagnostic.c	/^LOCAL 	void 	data_of_point($/;"	f
date_string	../util/times.c	/^EXPORT char *date_string(void)$/;"	f
db_mode	../util/debug.c	182;"	d	file:
dbparams	../util/cdecs.h	534;"	d
deaditemstack	triangle.c	/^    void      *deaditemstack;$/;"	m	struct:memorypool	file:
deblank	../util/screen.c	/^LOCAL	void	deblank(void)$/;"	f
debug_enter	../util/cleanup.c	169;"	d	file:
debug_enter	../util/cleanup.c	173;"	d	file:
debug_flag	int.h	/^	boolean		debug_flag;	\/* for debugging the block *\/$/;"	m	struct:_BLK_CRX
debug_input	../util/debug.c	186;"	d	file:
debug_leave	../util/cleanup.c	170;"	d	file:
debug_leave	../util/cleanup.c	174;"	d	file:
debug_lines	../util/debug.c	/^static char debug_lines[MAX_DEBUG_LINES][MAX_LINE_LEN+1];$/;"	v	file:
debug_mesg_and_int	../util/cleanup.c	171;"	d	file:
debug_mesg_and_int	../util/cleanup.c	175;"	d	file:
debug_mode	../util/cdecs.h	481;"	d
debug_names	../util/debug.c	184;"	d	file:
debug_output	../util/debug.c	185;"	d	file:
debug_params	../util/cdecs.h	480;"	d
debug_print	../util/debug.c	/^EXPORT	void debug_print($/;"	f
debug_print_tri_list_around_point	isub.c	/^LOCAL	void	debug_print_tri_list_around_point($/;"	f
debug_trace	../util/debug.c	/^EXPORT void debug_trace(void)$/;"	f
debugging	../util/debug.c	/^EXPORT	boolean debugging($/;"	f
debugging_names	../util/debug.c	/^EXPORT	char **debugging_names($/;"	f
decode	triangle.c	736;"	d	file:
default_comp	int.h	/^	COMPONENT	default_comp;	\/* for subdomain with no surf *\/$/;"	m	struct:_INTERFACE
default_debug	../util/debug.c	/^EXPORT	DEBUG_PARAMS *default_debug($/;"	f
default_read_endian	../util/output.c	/^LOCAL	FT_ENDIAN default_read_endian = FT_UNKNOWN_ENDIAN;$/;"	v
default_read_float_size	../util/output.c	/^LOCAL	size_t    default_read_float_size = sizeof(double);$/;"	v
default_reverse_endian	../util/output.c	/^LOCAL	boolean      default_reverse_endian = NO;$/;"	v
degrees	../util/cdecs.h	387;"	d
delaunay	triangle.c	/^LOCAL long delaunay(void)$/;"	f
delaunayfixup	triangle.c	/^LOCAL void delaunayfixup($/;"	f
delete_curve	userhooks.c	/^EXPORT	int delete_curve($/;"	f
delete_end_of_bond	userhooks.c	/^EXPORT	boolean delete_end_of_bond($/;"	f
delete_from_cross_list	intfc.c	/^EXPORT void delete_from_cross_list($/;"	f
delete_from_ordered_pointers	array.h	60;"	d
delete_from_ordered_pointers_at_location	array.h	62;"	d
delete_from_pointer_queue	arrayutils.c	/^EXPORT	POINTER_Q *delete_from_pointer_queue($/;"	f
delete_from_pointers	array.h	56;"	d
delete_from_pointers_if_present	array.h	66;"	d
delete_interface	userhooks.c	/^EXPORT	int delete_interface($/;"	f
delete_list	top.c	/^EXPORT void delete_list($/;"	f
delete_min_side_of_tri	iredist.c	/^LOCAL boolean delete_min_side_of_tri($/;"	f
delete_min_side_of_tri_o2	iredist_o2.c	/^LOCAL   boolean delete_min_side_of_tri_o2($/;"	f
delete_node	userhooks.c	/^EXPORT	boolean delete_node($/;"	f
delete_outside_surface	comp3d.c	/^EXPORT  void    delete_outside_surface(INTERFACE *intfc)$/;"	f
delete_point	userhooks.c	/^EXPORT	int delete_point($/;"	f
delete_scn	intfc.c	/^EXPORT void  delete_scn($/;"	f
delete_segment	../util/plotdecs.h	307;"	d
delete_side_of_tri	intfc.c	/^EXPORT	boolean delete_side_of_tri($/;"	f
delete_start_of_bond	userhooks.c	/^EXPORT	boolean delete_start_of_bond($/;"	f
delete_surface	userhooks.c	/^EXPORT	int delete_surface($/;"	f
delete_vertex_of_tri	intfc.c	/^EXPORT	boolean	delete_vertex_of_tri($/;"	f
dequeue	iredist.c	/^LOCAL POINTER_Q *dequeue($/;"	f
dequeue	iredist_o2.c	/^LOCAL POINTER_Q *dequeue($/;"	f
description	iBase.h	/^    char description[120];$/;"	m	struct:iBase_Error
dest	triangle.c	864;"	d	file:
detach_one_surface	userhooks.c	/^EXPORT SURFACE  *detach_one_surface($/;"	f
detached_bond	isurgery.c	/^	BOND            *detached_bond;$/;"	m	struct:_STITCH	file:
detached_side	isurgery.c	/^  	int		detached_side;$/;"	m	struct:_STITCH	file:
detached_tri	isurgery.c	/^	TRI             *detached_tri;$/;"	m	struct:_STITCH	file:
determine_io_type	../util/output.c	/^EXPORT	void	determine_io_type($/;"	f
determine_io_type_blocked	../util/output.c	/^LOCAL	boolean	determine_io_type_blocked = NO;$/;"	v
dgtsl	../util/uprotos.h	339;"	d
dh	geom.h	/^	double *dh[3];	   	\/* Coordindate cell widths *\/$/;"	m	struct:_RECT_GRID
difference	int.h	1056;"	d
dim	../util/vectormalloc.c	/^	unsigned int         dim[MAX_ORDER];$/;"	m	struct:_ALLOC_HEADER	file:
dim	geom.h	/^	int 	      dim;		\/* Dimension of embedding space *\/$/;"	m	struct:__anon33
dim	geom.h	/^	int   dim;	  \/* Dimension of Grid *\/$/;"	m	struct:_RECT_GRID
dim	geom.h	/^	int   dim;$/;"	m	struct:__anon30
dim	geom.h	/^	int dim;$/;"	m	struct:__anon46
dim	geom.h	/^        int           dim;              \/* Dimension of embedding space *\/$/;"	m	struct:__anon47
dim	geom.h	/^        int dim;$/;"	m	struct:__anon48
dim	geom.h	/^        int dim;$/;"	m	struct:__anon49
dim	iloc.h	/^	int      dim;$/;"	m	struct:__anon51
dim	int.h	/^	int		dim;		\/* Dimension of Imbedding Space *\/$/;"	m	struct:_INTERFACE
dir	int.h	/^        int                dir, index, icl[3];$/;"	m	struct:_CRXING
dir	testintfc.c	/^	double dir[MAXD];$/;"	m	struct:_SHEAR_MOTION_PARAMS	file:
dir_long_component3d	comp3d.c	/^LIB_LOCAL COMPONENT dir_long_component3d($/;"	f
dir_num	iprt3d.c	/^LOCAL double dir_num[3];$/;"	v
dirs	geom.h	/^	                   *dirs[3];$/;"	m	struct:_RECT_GRID::_REMAP
dissolve	triangle.c	895;"	d	file:
dist	comp3d.c	/^	double         dist;$/;"	m	struct:__anon5	file:
dist	iredist.c	/^	double   sqr_norm, dist;$/;"	m	struct:_TRI_SURF	file:
dist	iredist_o2.c	/^  double   sqr_norm, dist;$/;"	m	struct:_TRI_SURF	file:
dist	itrisset.c	/^	double		dist;$/;"	m	struct:__anon11	file:
dist	setb2d.c	/^	double          dist;  \/* Arc length from Reference Point XL,YL *\/$/;"	m	struct:_BPOINT	file:
distance_between_points_on_curve	cross2d.c	/^LOCAL	double distance_between_points_on_curve($/;"	f
distance_between_positions	geomutils.c	/^EXPORT	double	distance_between_positions($/;"	f
divconqdelaunay	triangle.c	/^LOCAL long divconqdelaunay(void)$/;"	f
divconqrecurse	triangle.c	/^LOCAL void divconqrecurse($/;"	f
dnext	triangle.c	810;"	d	file:
dnextself	triangle.c	814;"	d	file:
dnlfk	../util/sphhar.c	/^LOCAL void dnlfk($/;"	f
dnlft	../util/sphhar.c	/^LOCAL double dnlft($/;"	f
dnm	geom.h	/^	    const char     *dnm[3],   \/* Symbolic names for coord. directions*\/$/;"	m	struct:_RECT_GRID::_REMAP
do_volume_frac	int.h	/^	boolean		do_volume_frac;$/;"	m	struct:_BLK_INFO
dom	int.h	/^	double   *dom[MAXD];     \/* corner position of domain *\/$/;"	m	struct:__anon70
domain_id	iscatter.c	/^EXPORT  int domain_id($/;"	f
dot_prod	iprt3d.c	/^LOCAL double dot_prod(GPT v1, GPT v2)$/;"	f
dp2	int.h	/^        double              a[3], dp2[3], ds2[3];$/;"	m	struct:_CRXING
dprev	triangle.c	822;"	d	file:
dprevself	triangle.c	826;"	d	file:
dpt	comp3d.c	/^	double   dpt[3];		\/* vector pt -> closest point; *\/$/;"	m	struct:__anon3	file:
dqng	../util/quad.c	/^EXPORT double dqng($/;"	f
draw_tri	iprt3d.c	/^LOCAL void draw_tri($/;"	f
ds2	int.h	/^        double              a[3], dp2[3], ds2[3];$/;"	m	struct:_CRXING
dscalar_product	geomutils.c	/^EXPORT	double dscalar_product($/;"	f
dscaled_hypot	geomutils.c	/^EXPORT	double dscaled_hypot($/;"	f
dumbbell_func	imksurf.c	/^EXPORT 	double dumbbell_func($/;"	f
dummyinit	triangle.c	/^LOCAL void dummyinit($/;"	f
dummysh	triangle.c	/^LOCAL shelle *dummysh = NULL;$/;"	v
dummyshbase	triangle.c	/^LOCAL shelle *dummyshbase;   \/* Keep base address so we can free() it later. *\/$/;"	v
dummytri	triangle.c	/^LOCAL triangle *dummytri = NULL;$/;"	v
dummytribase	triangle.c	/^LOCAL triangle *dummytribase;\/* Keep base address so we can free() it later. *\/$/;"	v
dump_core	../util/cleanup.c	/^LOCAL	boolean	dump_core = NO;$/;"	v
dvdh	testintfc.c	/^	double dvdh;$/;"	m	struct:_SHEAR_MOTION_PARAMS	file:
dwyer	triangle.c	/^LOCAL boolean dwyer;$/;"	v
dyn_comp_ch	int.h	/^        } dyn_comp_ch;$/;"	m	struct:_HYPER_SURF	typeref:struct:_HYPER_SURF::_DYNAMIC_COMP_CHANGE
e_comps	int.h	/^	POINTER		e_comps;$/;"	m	struct:_INTERFACE
edge	int.h	/^        EDGE            edge[2][2];    \/*four surfaces *\/$/;"	m	struct:_BLK_EDGE
edge	int.h	/^        POINT           *edge[2];$/;"	m	struct:__anon61
edge	triangle.c	/^struct edge {$/;"	s	file:
edge	triangle.c	/^typedef struct edge edge;$/;"	t	typeref:struct:edge	file:
edge_flag	table.h	/^	int     *edge_flag;$/;"	m	struct:Table
edgelist	triangledefs.h	/^    int             *edgelist;                                  \/* Out only *\/$/;"	m	struct:triangulateio
edgemarkerlist	triangledefs.h	/^    int             *edgemarkerlist;\/* Unused with Voronoi diagram Out only *\/$/;"	m	struct:triangulateio
edges	geom.h	/^	double *edges[3];	\/* Coordinate cell edges *\/$/;"	m	struct:_RECT_GRID
edges	triangle.c	/^LOCAL long edges;                              \/* Number of output edges. *\/$/;"	v
edgesout	triangledefs.h	/^    boolean     edgesout;$/;"	m	struct:TriangulateOpts
eextras	triangle.c	/^LOCAL int eextras;                  \/* Number of attributes per triangle. *\/$/;"	v
eindx	int.h	/^	int  sindx, eindx;$/;"	m	struct:_CURVE
elemattribindex	triangle.c	/^LOCAL size_t elemattribindex;    \/* Index to find attributes of a triangle. *\/$/;"	v
elemattribute	triangle.c	928;"	d	file:
ellipse_func	imkcurve.c	/^EXPORT double ellipse_func($/;"	f
ellipse_tilt_func	imkcurve.c	/^EXPORT double ellipse_tilt_func($/;"	f
ellipsoid_func	imksurf.c	/^EXPORT	double ellipsoid_func($/;"	f
elliptic_comp	int.h	/^	COMPONENT	elliptic_comp;	\/* component of elliptic region *\/$/;"	m	struct:_INTERFACE
encode	triangle.c	745;"	d	file:
end	int.h	/^	NODE	  *end;$/;"	m	struct:_C_CURVE
end	int.h	/^	POINT  *end;$/;"	m	struct:_BOND
end	int.h	/^	struct	_POINT	*end;$/;"	m	struct:_C_BOND	typeref:struct:_C_BOND::_POINT
end	int.h	/^	struct _NODE *end;$/;"	m	struct:_CURVE	typeref:struct:_CURVE::_NODE
end	int.h	/^        int                end;$/;"	m	struct:_CRXING
end_of_set	arrayutils.c	160;"	d	file:
end_pt	isurgery.c	/^  	POINT		*end_pt;$/;"	m	struct:_STITCH	file:
end_tri	comp3d.c	2108;"	d	file:
endian_double_swap	../util/vtk.c	/^double endian_double_swap(double f)$/;"	f
endian_float_swap	../util/vtk.c	/^float endian_float_swap(float f)$/;"	f
endian_int_swap	../util/vtk.c	/^int endian_int_swap(int i)$/;"	f
ent_set_data	iTaps.h	/^	POINTER *ent_set_data;$/;"	m	struct:_FT_ESET_HANDLE
entityOfBond	iMesh.c	/^iBase_EntityHandle entityOfBond(BOND *b)$/;"	f
entityOfPoint	iMesh.c	/^iBase_EntityHandle entityOfPoint(POINT *p)$/;"	f
entityOfTri	iMesh.c	/^iBase_EntityHandle entityOfTri(TRI *t)$/;"	f
entry	../util/debug.c	/^struct entry {			\/* Circular list to store the traceback. *\/$/;"	s	file:
ents	iTaps.h	/^        FTEHANDLE       *ents;    	\/* uses entity list; *\/$/;"	m	struct:_IterData
epsilon	triangle.c	/^LOCAL double epsilon;                      \/* Floating-point machine epsilon. *\/$/;"	v
equi_redist_curve_seg	iredist.c	/^EXPORT	void equi_redist_curve_seg($/;"	f
equi_redist_curve_seg_o1	iredist.c	/^LOCAL	void equi_redist_curve_seg_o1($/;"	f
equi_redist_curve_seg_o2	iredist_o2.c	/^EXPORT	void equi_redist_curve_seg_o2($/;"	f
equivalent_components_list	iecomps.c	/^EXPORT	const COMPONENT	*equivalent_components_list($/;"	f
equivalent_comps	iecomps.c	/^EXPORT boolean equivalent_comps($/;"	f
erase	../util/plotdecs.h	281;"	d
erase_last_foutput	../util/output.c	/^EXPORT	boolean	erase_last_foutput($/;"	f
error_immediate	../util/error.c	/^LOCAL FILE *error_immediate = NULL;$/;"	v
error_list	../util/error.c	/^LOCAL struct _Error error_list;$/;"	v	typeref:struct:_Error
error_name	../util/cleanup.c	/^LOCAL	const char *error_name($/;"	f
error_type	iBase.h	/^    int error_type;$/;"	m	struct:iBase_Error
estimate	triangle.c	/^LOCAL double estimate(int elen, double *e)$/;"	f
etype	int.h	/^        ELEMENT_TYPE    etype;      \/*type of the edge *\/$/;"	m	struct:_EDGE
etype	int.h	/^        ELEMENT_TYPE    etype;      \/*type of the surface *\/$/;"	m	struct:_SURF
eval_curvature_lhf_surf	isub.c	/^LOCAL void  eval_curvature_lhf_surf($/;"	f
eval_vander_bivar	isub.c	/^LOCAL int eval_vander_bivar($/;"	f
eval_vander_bivar_cmf	iredist_o2.c	/^int eval_vander_bivar_cmf($/;"	f
eval_vander_univar	iredist_o2.c	/^int eval_vander_univar($/;"	f
exactinit	triangle.c	/^LOCAL void exactinit(void)$/;"	f
exchange_queues	iredist.c	/^LOCAL	void	exchange_queues($/;"	f
exchange_queues	iredist_o2.c	/^LOCAL	void	exchange_queues($/;"	f
exclude_comp	comp.c	/^EXPORT	void	exclude_comp($/;"	f
excluded_comps	userint.h	328;"	d
exists_interface	intfc.c	/^EXPORT boolean  exists_interface($/;"	f
expand_set	arrayutils.c	/^LOCAL boolean expand_set($/;"	f
expm1	../util/machine.c	/^EXPORT	double	expm1(double x)$/;"	f
ext_comp	table.h	/^	COMPONENT	ext_comp;	\/* Exterior COMPONENT value *\/$/;"	m	struct:Table
exterior_component	table.h	222;"	d
exterior_curve	zoom.c	/^LOCAL 	boolean exterior_curve($/;"	f
exterior_point	zoom.c	/^LOCAL	boolean exterior_point($/;"	f
f	../util/ppsub.c	/^typedef union _FLI {double f;long l;int i;} FLI;$/;"	m	union:_FLI	file:
f_ree	../util/vectormalloc.c	/^EXPORT	void f_ree($/;"	f
face_crx_from_comp	imksurf.c	/^LOCAL   boolean face_crx_from_comp($/;"	f
face_crx_in_dir	imksurf.c	/^LOCAL	boolean face_crx_in_dir($/;"	f
face_index3d	isub.c	/^EXPORT int  face_index3d($/;"	f
farc	../util/sigplot.c	/^EXPORT	void	farc($/;"	f
farrow	../util/sigplot.c	/^EXPORT	void	farrow($/;"	f
farrow_3	../util/sigplot.c	/^EXPORT	void	farrow_3($/;"	f
fast_expansion_sum_zeroelim	triangle.c	/^LOCAL int fast_expansion_sum_zeroelim($/;"	f
fclose	../util/cdecs.h	405;"	d
fclose	../util/output.c	86;"	d	file:
fclose_segment	../util/sigplot.c	/^EXPORT	void	fclose_segment($/;"	f
fclosepl	../util/sigplot.c	/^EXPORT	void	fclosepl($/;"	f
fclosevt	../util/sigplot.c	/^EXPORT	void	fclosevt($/;"	f
fcont	../util/sigplot.c	/^EXPORT	void	fcont($/;"	f
fcont_3	../util/sigplot.c	/^EXPORT	void	fcont_3($/;"	f
fcreate_segment	../util/sigplot.c	/^EXPORT	void	fcreate_segment($/;"	f
fdelete_segment	../util/sigplot.c	/^EXPORT	void	fdelete_segment($/;"	f
ferase	../util/sigplot.c	/^EXPORT	void	ferase($/;"	f
fft	../util/fft.c	/^EXPORT boolean fft($/;"	f
fft2d	../util/fft.c	/^EXPORT boolean fft2d($/;"	f
fg	igview.c	/^	int fg[3];$/;"	m	struct:DATA	file:
fg_col	igview.c	/^	int fg_col; \/*pointers to allocated color *\/$/;"	m	struct:DATA	file:
fg_length_side	isub.c	1443;"	d	file:
fg_side_vector	isub.c	1442;"	d	file:
fg_sv_store	isub.c	1441;"	d	file:
fgetstring	../util/fgetstrin.c	/^EXPORT	boolean fgetstring($/;"	f
fgetstring_debug	../util/fgetstrin.c	/^boolean fgetstring_debug = NO;$/;"	v
file	../util/cdecs.h	/^	FILE        *file;$/;"	m	struct:_IO_TYPE
file	../util/fsort.c	/^	FILE	*file;$/;"	m	struct:_FLIST	file:
file	../util/output.c	/^	FILE *file;$/;"	m	struct:_WRITE_LIST	file:
filename	../util/cdecs.h	/^	const char *filename;$/;"	m	struct:_Error
fill_bond_and_curve_lists	comp2d.c	/^LOCAL void fill_bond_and_curve_lists($/;"	f
fill_tri_and_surface_lists	comp3d.c	/^LOCAL void fill_tri_and_surface_lists($/;"	f
fill_tri_sort	itrisset.c	/^LOCAL	void	fill_tri_sort($/;"	f
find_Cartesian_coordinates	iscatter.c	/^EXPORT	void find_Cartesian_coordinates($/;"	f
find_blk_tri	idiagnostic.c	/^EXPORT 	void 	find_blk_tri($/;"	f
find_companion_cross	cross2d.c	/^EXPORT int find_companion_cross($/;"	f
find_compon2d	comp2d.c	/^LOCAL	COMPONENT	find_compon2d($/;"	f
find_from_hash_table	isub.c	/^EXPORT 	POINTER  find_from_hash_table($/;"	f
find_min_sect_box	itrisset.c	/^LOCAL	void	find_min_sect_box($/;"	f
find_on_front_block_range2d	comp2d.c	/^LOCAL	boolean find_on_front_block_range2d($/;"	f
find_proj_vector	iprt3d.c	/^LOCAL void find_proj_vector(void)$/;"	f
find_root	../util/roots.c	/^EXPORT boolean find_root($/;"	f
find_scaled_extrem_edge	iredist.c	/^LOCAL  int find_scaled_extrem_edge($/;"	f
find_scaled_extrem_edge	iredist_o2.c	/^LOCAL   int find_scaled_extrem_edge($/;"	f
find_separation_point	../util/roots.c	/^EXPORT boolean find_separation_point($/;"	f
find_surfaces_to_join_at_curve	int3d.c	/^EXPORT	boolean find_surfaces_to_join_at_curve($/;"	f
find_window_limit	iprt3d.c	/^LOCAL void find_window_limit($/;"	f
findcircumcenter	triangle.c	/^LOCAL circumcenterresult findcircumcenter($/;"	f
finddirection	triangle.c	/^LOCAL finddirectionresult finddirection($/;"	f
finddirectionresult	triangle.c	/^enum finddirectionresult {$/;"	g	file:
finddirectionresult	triangle.c	/^typedef enum finddirectionresult finddirectionresult;$/;"	t	typeref:enum:finddirectionresult	file:
finish_pt	isurgery.c	/^  	POINT	*finish_pt;$/;"	m	struct:_SEAM	file:
finite	../util/cdecs.h	141;"	d
first	int.h	/^	BOND *first;$/;"	m	struct:_CURVE
first	int.h	/^	C_BOND	  *first;$/;"	m	struct:_C_CURVE
first	int.h	/^	struct _O_CURVE *first;$/;"	m	struct:_O_CURVE_FAMILY	typeref:struct:_O_CURVE_FAMILY::_O_CURVE
first	int.h	/^        TRI             *first[12];$/;"	m	struct:_BLK_TRI
first_chunk	table.h	/^	struct Chunk 	*first_chunk;	\/* List of Allocated Chunks *\/$/;"	m	struct:Table	typeref:struct:Table::Chunk
first_header	../util/vectormalloc.c	/^LOCAL	ALLOC_HEADER	*first_header = NULL, *last_header = NULL;$/;"	v
first_tri	int.h	1166;"	d
firstblock	triangle.c	/^    PoolBlock *firstblock, *nowblock, *pathblock;$/;"	m	struct:memorypool	file:
firstnumber	triangledefs.h	/^    BinaryDigit firstnumber;$/;"	m	struct:TriangulateOpts
fix_face_crx_in_dir	imksurf.c	/^LOCAL   void    fix_face_crx_in_dir($/;"	f
fix_seg_crx_in_dir	imksurf.c	/^LOCAL   void    fix_seg_crx_in_dir($/;"	f
fixed_grid	table.h	/^	boolean		fixed_grid;	\/* Fixed Grid supplied Previously *\/$/;"	m	struct:Table
flabel	../util/sigplot.c	/^EXPORT	void	flabel($/;"	f
flag	geom.h	/^        int flag;$/;"	m	struct:_COMM_BOX
fline	../util/sigplot.c	/^EXPORT	void	fline($/;"	f
fline_3	../util/sigplot.c	/^EXPORT	void	fline_3($/;"	f
flinemod	../util/sigplot.c	/^EXPORT	void	flinemod($/;"	f
flip	triangle.c	/^LOCAL void flip($/;"	f
flip_diagonal	intfc.c	/^EXPORT boolean flip_diagonal($/;"	f
float_work_vector	../util/ppsub.c	/^LOCAL	double	*float_work_vector($/;"	f
fmagnify	../util/sigplot.c	/^EXPORT	void	fmagnify($/;"	f
fmove	../util/sigplot.c	/^EXPORT	void	fmove($/;"	f
fmove_3	../util/sigplot.c	/^EXPORT	void	fmove_3($/;"	f
fname	../util/debug.c	/^	char fname[MAX_CHARS+1];$/;"	m	struct:entry	file:
fname	../util/fsort.c	/^	char	fname[512];$/;"	m	struct:_FLIST	file:
fopenpl	../util/sigplot.c	/^EXPORT	void	fopenpl($/;"	f
formskeleton	triangle.c	/^LOCAL size_t formskeleton($/;"	f
fourier_poly	ifourier.c	/^EXPORT	double fourier_poly($/;"	f
foutput	../util/output.c	/^EXPORT boolean foutput($/;"	f
fpoint	../util/sigplot.c	/^EXPORT	void	fpoint($/;"	f
fpoly	geom.h	/^	FOURIER_POLY  *fpoly;		\/* Fourier Perturbation factors *\/$/;"	m	struct:__anon33
fpoly	geom.h	/^	FOURIER_POLY *fpoly;$/;"	m	struct:__anon48
fpolygon	../util/sigplot.c	/^EXPORT	void	fpolygon($/;"	f
fpolygon_3	../util/sigplot.c	/^EXPORT	void	fpolygon_3($/;"	f
fprint_angle_direction	geomutils.c	/^EXPORT void fprint_angle_direction($/;"	f
fprint_bond	top.c	/^LIB_LOCAL void fprint_bond($/;"	f
fprint_boundary_type	userhooks.c	/^EXPORT	void fprint_boundary_type($/;"	f
fprint_comp_equiv_lists	iecomps.c	/^EXPORT void fprint_comp_equiv_lists($/;"	f
fprint_curve	userhooks.c	/^EXPORT	void fprint_curve($/;"	f
fprint_double_matrix	../util/simpleio.c	/^EXPORT  void    fprint_double_matrix($/;"	f
fprint_double_vector	../util/simpleio.c	/^EXPORT  void    fprint_double_vector($/;"	f
fprint_double_vector_as_matrix	../util/simpleio.c	/^EXPORT  void    fprint_double_vector_as_matrix($/;"	f
fprint_float	../util/simpleio.c	/^EXPORT	void fprint_float($/;"	f
fprint_float_matrix	../util/simpleio.c	/^EXPORT  void    fprint_float_matrix($/;"	f
fprint_float_vector	../util/simpleio.c	/^EXPORT  void    fprint_float_vector($/;"	f
fprint_float_vector_as_matrix	../util/simpleio.c	/^EXPORT  void    fprint_float_vector_as_matrix($/;"	f
fprint_general_vector	geomutils.c	/^EXPORT	void fprint_general_vector($/;"	f
fprint_hypersurface	intfc.c	/^EXPORT void fprint_hypersurface($/;"	f
fprint_hypersurface_boundaries	intfc.c	/^LOCAL void fprint_hypersurface_boundaries($/;"	f
fprint_int_matrix	../util/simpleio.c	/^EXPORT  void    fprint_int_matrix($/;"	f
fprint_int_vector_as_matrix	../util/simpleio.c	/^EXPORT  void    fprint_int_vector_as_matrix($/;"	f
fprint_interface	userhooks.c	/^EXPORT	void fprint_interface($/;"	f
fprint_intfc_rect_grids	userhooks.c	/^EXPORT	void fprint_intfc_rect_grids($/;"	f
fprint_io_type	../util/output.c	/^EXPORT	void	fprint_io_type($/;"	f
fprint_line_of_floats	../util/other.c	/^EXPORT void fprint_line_of_floats($/;"	f
fprint_matrix	../util/simpleio.c	/^EXPORT  void    fprint_matrix($/;"	f
fprint_node	userhooks.c	/^EXPORT	void fprint_node($/;"	f
fprint_orientation	geomutils.c	/^EXPORT void fprint_orientation($/;"	f
fprint_point	userhooks.c	/^EXPORT	void fprint_point($/;"	f
fprint_rectangular_grid	igrid.c	/^EXPORT void fprint_rectangular_grid($/;"	f
fprint_surface	userhooks.c	/^EXPORT	void fprint_surface($/;"	f
fprint_tri	int3d.c	/^LIB_LOCAL void fprint_tri($/;"	f
fprint_triangle_numbers	int3d.c	/^LOCAL void fprint_triangle_numbers($/;"	f
fprint_tris_on_curve	int3d.c	/^LIB_LOCAL void fprint_tris_on_curve($/;"	f
fprint_tris_on_surface	int3d.c	/^LOCAL void fprint_tris_on_surface($/;"	f
fprint_vector	../util/simpleio.c	/^EXPORT void fprint_vector($/;"	f
fprint_vector_as_matrix	../util/simpleio.c	/^EXPORT void fprint_vector_as_matrix($/;"	f
fprint_vector_of_floats	../util/simpleio.c	/^EXPORT void fprint_vector_of_floats($/;"	f
fputbf1	../util/sigplot.c	/^LOCAL	void	fputbf1($/;"	f
fputbf2	../util/sigplot.c	/^LOCAL	void	fputbf2($/;"	f
fputbf3	../util/sigplot.c	/^LOCAL	void	fputbf3($/;"	f
fputbf4	../util/sigplot.c	/^LOCAL	void	fputbf4($/;"	f
fputbf6	../util/sigplot.c	/^LOCAL	void	fputbf6($/;"	f
fputbi1	../util/sigplot.c	/^LOCAL	void	fputbi1($/;"	f
fputbi2	../util/sigplot.c	/^LOCAL	void	fputbi2($/;"	f
fread_angle_direction	geomutils.c	/^EXPORT	ANGLE_DIRECTION	fread_angle_direction($/;"	f
fread_boolean	../util/simpleio.c	/^EXPORT	boolean	fread_boolean($/;"	f
fread_float	../util/simpleio.c	/^EXPORT	double	fread_float($/;"	f
frectangle	../util/sigplot.c	/^EXPORT	void	frectangle($/;"	f
free	../util/vmalloc.h	68;"	d
free_from	../util/vmalloc.h	118;"	d
free_from_T	../util/vectormalloc.c	/^EXPORT int free_from_T($/;"	f
free_grid_crx_mem	imksurf.c	/^EXPORT  void free_grid_crx_mem($/;"	f
free_grid_lines	igrid.c	/^EXPORT	void free_grid_lines($/;"	f
free_infile_list	../util/fsort.c	/^EXPORT	char ***free_infile_list($/;"	f
free_interface_addresses_structure	intfc.c	/^LOCAL	void	free_interface_addresses_structure($/;"	f
free_these	../util/vectormalloc.c	/^EXPORT void free_these($/;"	f
freecolors	igview.c	/^LOCAL void freecolors()$/;"	f
frename_segment	../util/sigplot.c	/^EXPORT	void	frename_segment($/;"	f
frepeat	../util/sigplot.c	/^EXPORT	void	frepeat($/;"	f
frotate	../util/sigplot.c	/^EXPORT	void	frotate($/;"	f
fscan_float	../util/simpleio.c	/^EXPORT	int	fscan_float($/;"	f
fset_background_color	../util/sigplot.c	/^EXPORT	void	fset_background_color($/;"	f
fset_binary_mode	../util/sigplot.c	/^EXPORT	void	fset_binary_mode($/;"	f
fset_color	../util/sigplot.c	/^EXPORT	void	fset_color($/;"	f
fset_color_bar_data	../util/sigplot.c	/^EXPORT	void	fset_color_bar_data($/;"	f
fset_color_from_palette	../util/sigplot.c	/^EXPORT	void	fset_color_from_palette($/;"	f
fset_color_from_table	../util/sigplot.c	/^EXPORT	void	fset_color_from_table($/;"	f
fset_color_rgb	../util/sigplot.c	/^EXPORT	void	fset_color_rgb($/;"	f
fset_convex_polyhedra	../util/sigplot.c	/^EXPORT	void	fset_convex_polyhedra($/;"	f
fset_hidden_line_removal	../util/sigplot.c	/^EXPORT	void	fset_hidden_line_removal($/;"	f
fset_hidden_surface_removal	../util/sigplot.c	/^EXPORT	void	fset_hidden_surface_removal($/;"	f
fset_hyper_surf_color	userhooks.c	/^EXPORT	void fset_hyper_surf_color($/;"	f
fset_linestyle	../util/sigplot.c	/^EXPORT	void	fset_linestyle($/;"	f
fset_projection	../util/sigplot.c	/^EXPORT	void	fset_projection($/;"	f
fset_text_precision	../util/sigplot.c	/^EXPORT	void	fset_text_precision($/;"	f
fset_text_size	../util/sigplot.c	/^EXPORT	void	fset_text_size($/;"	f
fset_up_color_palette	../util/sigplot.c	/^EXPORT	void	fset_up_color_palette($/;"	f
fset_up_color_table	../util/sigplot.c	/^EXPORT	void	fset_up_color_table($/;"	f
fset_up_colors	../util/sigplot.c	/^EXPORT	void	fset_up_colors($/;"	f
fset_view_plane_normal	../util/sigplot.c	/^EXPORT	void	fset_view_plane_normal($/;"	f
fset_view_reference_point	../util/sigplot.c	/^EXPORT	void	fset_view_reference_point($/;"	f
fset_view_up_vector	../util/sigplot.c	/^EXPORT	void	fset_view_up_vector($/;"	f
fset_visibility	../util/sigplot.c	/^EXPORT	void	fset_visibility($/;"	f
fshade	../util/sigplot.c	/^EXPORT	void	fshade($/;"	f
fspace	../util/sigplot.c	/^EXPORT	void	fspace($/;"	f
ft_assign	../util/cdecs.h	271;"	d
ft_endian_name	../util/machine.c	/^EXPORT	const char *ft_endian_name($/;"	f
ft_endian_type	../util/machine.c	/^EXPORT	FT_ENDIAN ft_endian_type(void)$/;"	f
ftext_height_angle	../util/sigplot.c	/^EXPORT	void	ftext_height_angle($/;"	f
ftrace	../util/debug.c	189;"	d	file:
fviewport	../util/sigplot.c	/^EXPORT	void	fviewport($/;"	f
fwindow	../util/sigplot.c	/^EXPORT	void	fwindow($/;"	f
fwrite_float	../util/simpleio.c	/^EXPORT	void	fwrite_float($/;"	f
fwrite_ieee_float	../util/plotdecs.h	192;"	d
fwrite_ieee_float	../util/plotdecs.h	197;"	d
fwrite_ieee_int	../util/plotdecs.h	194;"	d
fwrite_ieee_int	../util/plotdecs.h	199;"	d
gd_2d_intfc	igview.c	/^EXPORT void gd_2d_intfc($/;"	f
gd_closeplot	igview.c	/^EXPORT void gd_closeplot()$/;"	f
gd_initplot	igview.c	/^EXPORT void gd_initplot(char *file, char *title, $/;"	f
gd_plotdata	igview.c	/^EXPORT void gd_plotdata($/;"	f
gd_plotframe	igview.c	/^EXPORT void gd_plotframe(char *subtitle)$/;"	f
generic_add_to_pointer_queue	arrayutils.c	/^EXPORT	POINTER_Q *generic_add_to_pointer_queue($/;"	f
geomview_interface_plot	igview.c	/^EXPORT void geomview_interface_plot($/;"	f
geomview_intfc_plot2d	igview.c	/^EXPORT void geomview_intfc_plot2d($/;"	f
get_basename	../util/machine.c	/^EXPORT	char *get_basename($/;"	f
get_cgns_file_name	igview.c	/^EXPORT	char   *get_cgns_file_name($/;"	f
get_comm_pt_fac	itrisset.c	/^EXPORT	double	get_comm_pt_fac()$/;"	f
get_default_fluid_comp	iwallsurf.c	/^EXPORT void  get_default_fluid_comp($/;"	f
get_dirname	../util/machine.c	/^EXPORT	char *get_dirname($/;"	f
get_fourier_bubble	ifourier.c	/^EXPORT 	FOURIER_POLY	*get_fourier_bubble($/;"	f
get_fourier_coeffs	ifourier.c	/^EXPORT	FOURIER_POLY	*get_fourier_coeffs($/;"	f
get_fourier_mixed	ifourier.c	/^EXPORT	FOURIER_POLY 	*get_fourier_mixed($/;"	f
get_fourier_multi_mode	ifourier.c	/^EXPORT	FOURIER_POLY	*get_fourier_multi_mode($/;"	f
get_fourier_random	ifourier.c	/^EXPORT	FOURIER_POLY 	*get_fourier_random($/;"	f
get_legendre_coeffs	ifourier.c	/^EXPORT	LEGENDRE_POLY	*get_legendre_coeffs($/;"	f
get_legendre_mixed	ifourier.c	/^EXPORT	LEGENDRE_POLY 	*get_legendre_mixed($/;"	f
get_legendre_multi_mode	ifourier.c	/^EXPORT	LEGENDRE_POLY	*get_legendre_multi_mode($/;"	f
get_legendre_random	ifourier.c	/^EXPORT	LEGENDRE_POLY 	*get_legendre_random($/;"	f
get_list_file_name	igview.c	/^LOCAL	char   *get_list_file_name($/;"	f
get_neighbor_on_curve	iredist_o2.c	/^LOCAL   int get_neighbor_on_curve($/;"	f
get_tag_shift	ppcopy.c	/^int	get_tag_shift()$/;"	f
get_vmalloc_storage_use	../util/vectormalloc.c	/^EXPORT int get_vmalloc_storage_use(void)$/;"	f
get_vtk_file_name	igview.c	/^EXPORT	char   *get_vtk_file_name($/;"	f
get_vtp_file_name	igview.c	/^EXPORT	char   *get_vtp_file_name($/;"	f
getcolor	igview.c	/^LOCAL int getcolor(int i)$/;"	f
getpoint	triangle.c	/^LOCAL point getpoint(int number)$/;"	f
gifout	igview.c	/^	FILE *gifout;$/;"	m	struct:DATA	file:
global_index	int.h	/^	int global_index;$/;"	m	struct:_TRI
glstore	geom.h	/^	double *glstore;	   	\/* Storage for edges, centers and dh arrays *\/$/;"	m	struct:_RECT_GRID
gmax	geom.h	/^	int   gmax[3];	  \/* Number of grid blocks 		       *\/$/;"	m	struct:_RECT_GRID
gmax	int.h	/^	int     gmax[MAXD];     \/* # of subdomains in each dir *\/$/;"	m	struct:__anon70
goodangle	triangle.c	/^LOCAL double goodangle;$/;"	v
gr	geom.h	/^	RECT_GRID     *gr;$/;"	m	struct:__anon33
gr	geom.h	/^        RECT_GRID     *gr;$/;"	m	struct:__anon47
grid	geom.h	/^	RECT_GRID *grid;$/;"	m	struct:_RECT_BOX
grid_center_coord	geom.h	238;"	d
grid_crx_from_comp	imksurf.c	/^LOCAL	boolean grid_crx_from_comp($/;"	f
grid_direction_name	isub.c	/^EXPORT  const char *grid_direction_name($/;"	f
grid_line_crx_in_dir	imksurf.c	/^EXPORT	boolean grid_line_crx_in_dir($/;"	f
grid_size_in_direction	geomutils.c	/^EXPORT	double	grid_size_in_direction($/;"	f
grid_tolerance	igrid.c	/^EXPORT	double	grid_tolerance($/;"	f
gtsl	../util/uprotos.h	342;"	d
gview_bounding_box	igview.c	/^EXPORT	void	gview_bounding_box($/;"	f
gview_cube	igview.c	/^EXPORT 	void 	gview_cube($/;"	f
gview_local_surface	igview.c	/^EXPORT	void	gview_local_surface($/;"	f
gview_plot_axes	igview.c	/^EXPORT	void	gview_plot_axes($/;"	f
gview_plot_c_curve	igview.c	/^EXPORT void gview_plot_c_curve($/;"	f
gview_plot_color_interface	igview.c	/^EXPORT  void gview_plot_color_interface($/;"	f
gview_plot_color_surfaces	igview.c	/^LOCAL   void gview_plot_color_surfaces($/;"	f
gview_plot_coord_sys	igview.c	/^EXPORT	void	gview_plot_coord_sys($/;"	f
gview_plot_cube	igview.c	/^LOCAL void gview_plot_cube($/;"	f
gview_plot_curve	igview.c	/^EXPORT  void    gview_plot_curve($/;"	f
gview_plot_curves	igview.c	/^LOCAL   void    gview_plot_curves($/;"	f
gview_plot_interface	userhooks.c	/^EXPORT	void gview_plot_interface($/;"	f
gview_plot_intfc2d	igview.c	/^LOCAL void gview_plot_intfc2d($/;"	f
gview_plot_polyline	igview.c	/^EXPORT	void	gview_plot_polyline($/;"	f
gview_plot_surfaces	igview.c	/^LOCAL	void	gview_plot_surfaces($/;"	f
gview_plot_tri_and_point_list	igview.c	/^EXPORT void gview_plot_tri_and_point_list($/;"	f
gview_plot_tri_list	igview.c	/^EXPORT void gview_plot_tri_list($/;"	f
gview_plot_triangle_list	igview.c	/^EXPORT	void	gview_plot_triangle_list($/;"	f
gview_plot_vertices	igview.c	/^EXPORT	void	gview_plot_vertices($/;"	f
gview_point_tri_rings	igview.c	/^EXPORT	void gview_point_tri_rings($/;"	f
gview_polyline	igview.c	/^EXPORT  void    gview_polyline($/;"	f
gview_surface	igview.c	/^EXPORT	void	gview_surface($/;"	f
h	geom.h	/^	double h[3];	  \/* Average grid spacings in the grid	       *\/$/;"	m	struct:_RECT_GRID
h	geom.h	/^        double h;		$/;"	m	struct:__anon45
h	geom.h	/^        double h;$/;"	m	struct:__anon49
h	int.h	/^	double		h[MAXD];		\/* length in each dimension *\/$/;"	m	struct:_BLK_CRX
hardware_is_little_endian	../util/vtk.c	/^boolean hardware_is_little_endian()$/;"	f
head	../util/debug.c	188;"	d	file:
head	arrayutils.c	/^	POINTER_Q *head, *tail;	\/* Head and Tail of linked list *\/$/;"	m	struct:_PQ_HEADER	file:
head_of_pointer_queue	arrayutils.c	/^EXPORT	POINTER_Q *head_of_pointer_queue($/;"	f
head_of_tri_list	int.h	1164;"	d
header_from_block	../util/vectormalloc.c	230;"	d	file:
highorder	triangle.c	/^LOCAL void highorder(void)$/;"	f
highorderindex	triangle.c	/^LOCAL int highorderindex;\/* Index to find extra nodes for high-order elements. *\/$/;"	v
holelist	triangledefs.h	/^    REAL            *holelist;         \/* In \/ pointer to array copied out *\/$/;"	m	struct:triangulateio
holes	triangle.c	/^LOCAL int holes;                                \/* Number of input holes. *\/$/;"	v
hs	int.h	/^	struct _HYPER_SURF *hs;$/;"	m	struct:_CURVE	typeref:struct:_CURVE::_HYPER_SURF
hs	int.h	/^	struct _HYPER_SURF *hs;$/;"	m	struct:_HYPER_SURF	typeref:struct:_HYPER_SURF::_HYPER_SURF
hs	int.h	/^	struct _HYPER_SURF *hs;$/;"	m	struct:_POINT	typeref:struct:_POINT::_HYPER_SURF
hs	int.h	/^	struct _HYPER_SURF *hs;$/;"	m	struct:_SURFACE	typeref:struct:_SURFACE::_HYPER_SURF
hs	int.h	/^        HYPER_SURF         *hs;$/;"	m	struct:_CRXING
hs	int.h	/^        HYPER_SURF      *hs;$/;"	m	struct:_BBI_POINT2
hsb	int.h	/^	struct _HYPER_SURF_BDRY *hsb;$/;"	m	struct:_CURVE	typeref:struct:_CURVE::_HYPER_SURF_BDRY
hsb	int.h	/^	struct _HYPER_SURF_BDRY *hsb;$/;"	m	struct:_HYPER_SURF_BDRY	typeref:struct:_HYPER_SURF_BDRY::_HYPER_SURF_BDRY
hsb	int.h	/^	struct _HYPER_SURF_BDRY *hsb;$/;"	m	struct:_NODE	typeref:struct:_NODE::_HYPER_SURF_BDRY
hsb	int.h	/^        HYPER_SURF_BDRY    *hsb;$/;"	m	struct:_CRXING
hse	int.h	/^	union _HYPER_SURF_ELEMENT *hse;$/;"	m	struct:_POINT	typeref:union:_POINT::_HYPER_SURF_ELEMENT
hses	int.h	/^	struct _HYPER_SURF_BDRY **hses;$/;"	m	struct:_INTERFACE	typeref:struct:_INTERFACE::_HYPER_SURF_BDRY
hss	int.h	/^	struct _HYPER_SURF	**hss;$/;"	m	struct:_INTERFACE	typeref:struct:_INTERFACE::_HYPER_SURF
hullsize	triangle.c	/^LOCAL long hullsize;                   \/* Number of edges of convex hull. *\/$/;"	v
hyper_surf_bdry_list	int.h	842;"	d
hyper_surf_list	int.h	824;"	d
hyperboloid_func	imksurf.c	/^LOCAL	double hyperboloid_func($/;"	f
hyperboloid_func	testintfc.c	/^LOCAL	double hyperboloid_func($/;"	f
hypersurface_boundary_number	intfc.c	/^EXPORT	uint64_t hypersurface_boundary_number($/;"	f
hypersurface_element_number	intfc.c	/^EXPORT	uint64_t hypersurface_element_number($/;"	f
hypersurface_number	intfc.c	/^EXPORT	uint64_t hypersurface_number($/;"	f
i	../util/ppsub.c	/^typedef union _FLI {double f;long l;int i;} FLI;$/;"	m	union:_FLI	file:
iBase_ALL_ORDER_1	iBase.h	/^    iBase_ALL_ORDER_1,              \/**< No more than local mesh traversal required *\/$/;"	e	enum:iBase_AdjacencyCost
iBase_ALL_ORDER_LOGN	iBase.h	/^    iBase_ALL_ORDER_LOGN,           \/**< Global tree search *\/$/;"	e	enum:iBase_AdjacencyCost
iBase_ALL_ORDER_N	iBase.h	/^    iBase_ALL_ORDER_N,              \/**< Global exhaustive search *\/$/;"	e	enum:iBase_AdjacencyCost
iBase_ALL_TYPES	iBase.h	/^    iBase_ALL_TYPES$/;"	e	enum:iBase_EntityType
iBase_ALREADY_EXISTED	iBase.h	/^    iBase_ALREADY_EXISTED,$/;"	e	enum:iBase_CreationStatus
iBase_AdjacencyCost	iBase.h	/^  enum iBase_AdjacencyCost {$/;"	g
iBase_BAD_ARRAY_DIMENSION	iBase.h	/^    iBase_BAD_ARRAY_DIMENSION,$/;"	e	enum:iBase_ErrorType
iBase_BAD_ARRAY_SIZE	iBase.h	/^    iBase_BAD_ARRAY_SIZE,$/;"	e	enum:iBase_ErrorType
iBase_BAD_TYPE_AND_TOPO	iBase.h	/^    iBase_BAD_TYPE_AND_TOPO,$/;"	e	enum:iBase_ErrorType
iBase_BLOCKED	iBase.h	/^    iBase_BLOCKED,$/;"	e	enum:iBase_StorageOrder
iBase_BYTES	iBase.h	/^    iBase_BYTES$/;"	e	enum:iBase_TagValueType
iBase_CREATED_DUPLICATE	iBase.h	/^    iBase_CREATED_DUPLICATE,$/;"	e	enum:iBase_CreationStatus
iBase_CREATION_FAILED	iBase.h	/^    iBase_CREATION_FAILED$/;"	e	enum:iBase_CreationStatus
iBase_CreationStatus	iBase.h	/^  enum iBase_CreationStatus {$/;"	g
iBase_DOUBLE	iBase.h	/^    iBase_DOUBLE,$/;"	e	enum:iBase_TagValueType
iBase_EDGE	iBase.h	/^    iBase_EDGE,$/;"	e	enum:iBase_EntityType
iBase_ENTITY_CREATION_ERROR	iBase.h	/^    iBase_ENTITY_CREATION_ERROR,$/;"	e	enum:iBase_ErrorType
iBase_ENTITY_HANDLE	iBase.h	/^    iBase_ENTITY_HANDLE,$/;"	e	enum:iBase_TagValueType
iBase_EntityHandle	iBase.h	/^  typedef struct iBase_EntityHandle_Private* iBase_EntityHandle;$/;"	t	typeref:struct:iBase_EntityHandle_Private
iBase_EntitySetHandle	iBase.h	/^  typedef struct iBase_EntitySetHandle_Private* iBase_EntitySetHandle;$/;"	t	typeref:struct:iBase_EntitySetHandle_Private
iBase_EntityType	iBase.h	/^  enum iBase_EntityType {$/;"	g
iBase_Error	iBase.h	/^  struct iBase_Error$/;"	s
iBase_ErrorActions	iBase.h	/^  enum iBase_ErrorActions {$/;"	g
iBase_ErrorType	iBase.h	/^  enum iBase_ErrorType {$/;"	g
iBase_FACE	iBase.h	/^    iBase_FACE,$/;"	e	enum:iBase_EntityType
iBase_FAILURE	iBase.h	/^    iBase_FAILURE$/;"	e	enum:iBase_ErrorType
iBase_FILE_NOT_FOUND	iBase.h	/^    iBase_FILE_NOT_FOUND,$/;"	e	enum:iBase_ErrorType
iBase_FILE_WRITE_ERROR	iBase.h	/^    iBase_FILE_WRITE_ERROR,$/;"	e	enum:iBase_ErrorType
iBase_INTEGER	iBase.h	/^    iBase_INTEGER,$/;"	e	enum:iBase_TagValueType
iBase_INTERLEAVED	iBase.h	/^    iBase_INTERLEAVED$/;"	e	enum:iBase_StorageOrder
iBase_INVALID_ARGUMENT	iBase.h	/^    iBase_INVALID_ARGUMENT,$/;"	e	enum:iBase_ErrorType
iBase_INVALID_ENTITYSET_HANDLE	iBase.h	/^    iBase_INVALID_ENTITYSET_HANDLE,$/;"	e	enum:iBase_ErrorType
iBase_INVALID_ENTITY_COUNT	iBase.h	/^    iBase_INVALID_ENTITY_COUNT,$/;"	e	enum:iBase_ErrorType
iBase_INVALID_ENTITY_HANDLE	iBase.h	/^    iBase_INVALID_ENTITY_HANDLE,$/;"	e	enum:iBase_ErrorType
iBase_INVALID_ENTITY_TOPOLOGY	iBase.h	/^    iBase_INVALID_ENTITY_TOPOLOGY,$/;"	e	enum:iBase_ErrorType
iBase_INVALID_ENTITY_TYPE	iBase.h	/^    iBase_INVALID_ENTITY_TYPE,$/;"	e	enum:iBase_ErrorType
iBase_INVALID_ITERATOR_HANDLE	iBase.h	/^    iBase_INVALID_ITERATOR_HANDLE,$/;"	e	enum:iBase_ErrorType
iBase_INVALID_TAG_HANDLE	iBase.h	/^    iBase_INVALID_TAG_HANDLE,$/;"	e	enum:iBase_ErrorType
iBase_Instance	iBase.h	/^  typedef void* iBase_Instance;$/;"	t
iBase_MEMORY_ALLOCATION_FAILED	iBase.h	/^    iBase_MEMORY_ALLOCATION_FAILED,$/;"	e	enum:iBase_ErrorType
iBase_MESH_ALREADY_LOADED	iBase.h	/^    iBase_MESH_ALREADY_LOADED,$/;"	e	enum:iBase_ErrorType
iBase_NEW	iBase.h	/^    iBase_NEW = 0,$/;"	e	enum:iBase_CreationStatus
iBase_NIL_ARRAY	iBase.h	/^    iBase_NIL_ARRAY,$/;"	e	enum:iBase_ErrorType
iBase_NOT_SUPPORTED	iBase.h	/^    iBase_NOT_SUPPORTED,$/;"	e	enum:iBase_ErrorType
iBase_NO_MESH_DATA	iBase.h	/^    iBase_NO_MESH_DATA,$/;"	e	enum:iBase_ErrorType
iBase_REGION	iBase.h	/^    iBase_REGION,$/;"	e	enum:iBase_EntityType
iBase_SILENT	iBase.h	/^    iBase_SILENT,$/;"	e	enum:iBase_ErrorActions
iBase_SOME_ORDER_1	iBase.h	/^    iBase_SOME_ORDER_1,             \/**< Only some adjacency info, local *\/$/;"	e	enum:iBase_AdjacencyCost
iBase_SOME_ORDER_LOGN	iBase.h	/^    iBase_SOME_ORDER_LOGN,          \/**< Only some adjacency info, tree *\/$/;"	e	enum:iBase_AdjacencyCost
iBase_SOME_ORDER_N	iBase.h	/^    iBase_SOME_ORDER_N              \/**< Only some adjacency info, exhaustive *\/$/;"	e	enum:iBase_AdjacencyCost
iBase_SUCCESS	iBase.h	/^    iBase_SUCCESS,$/;"	e	enum:iBase_ErrorType
iBase_StorageOrder	iBase.h	/^  enum iBase_StorageOrder {$/;"	g
iBase_TAG_ALREADY_EXISTS	iBase.h	/^    iBase_TAG_ALREADY_EXISTS,$/;"	e	enum:iBase_ErrorType
iBase_TAG_IN_USE	iBase.h	/^    iBase_TAG_IN_USE,$/;"	e	enum:iBase_ErrorType
iBase_TAG_NOT_FOUND	iBase.h	/^    iBase_TAG_NOT_FOUND,$/;"	e	enum:iBase_ErrorType
iBase_THROW_ERROR	iBase.h	/^    iBase_THROW_ERROR$/;"	e	enum:iBase_ErrorActions
iBase_TagHandle	iBase.h	/^  typedef struct iBase_TagHandle_Private* iBase_TagHandle;$/;"	t	typeref:struct:iBase_TagHandle_Private
iBase_TagValueType	iBase.h	/^  enum iBase_TagValueType {$/;"	g
iBase_UNAVAILABLE	iBase.h	/^    iBase_UNAVAILABLE = 0,          \/**< Adjacency information not supported *\/$/;"	e	enum:iBase_AdjacencyCost
iBase_VERTEX	iBase.h	/^    iBase_VERTEX = 0,$/;"	e	enum:iBase_EntityType
iBase_WARN_ONLY	iBase.h	/^    iBase_WARN_ONLY,$/;"	e	enum:iBase_ErrorActions
iGeom_EntityArrIterator	iGeom.h	/^  typedef struct iGeom_EntityArrIterator_Private* iGeom_EntityArrIterator;$/;"	t	typeref:struct:iGeom_EntityArrIterator_Private
iGeom_EntityIterator	iGeom.h	/^  typedef struct iGeom_EntityIterator_Private* iGeom_EntityIterator;$/;"	t	typeref:struct:iGeom_EntityIterator_Private
iGeom_Instance	iGeom.h	/^  typedef struct iGeom_Instance_Private* iGeom_Instance;$/;"	t	typeref:struct:iGeom_Instance_Private
iMeshP_ALL_PARTS	iMeshP.h	229;"	d
iMeshP_BOUNDARY	iMeshP.h	/^  iMeshP_BOUNDARY, \/**< A shared entity on a part boundary. *\/$/;"	e	enum:iMeshP_EntStatus
iMeshP_EntStatus	iMeshP.h	/^enum iMeshP_EntStatus $/;"	g
iMeshP_GHOST	iMeshP.h	/^  iMeshP_GHOST     \/**< An entity copy that is not a shared boundary entity. *\/$/;"	e	enum:iMeshP_EntStatus
iMeshP_H	iMeshP.h	3;"	d
iMeshP_INTERNAL	iMeshP.h	/^  iMeshP_INTERNAL, \/**< An owned entity that is not on a part boundary. *\/$/;"	e	enum:iMeshP_EntStatus
iMeshP_Part	iMeshP.h	/^typedef unsigned iMeshP_Part;$/;"	t
iMeshP_PartHandle	iMeshP.h	/^typedef iBase_EntitySetHandle iMeshP_PartHandle;$/;"	t
iMeshP_PartitionHandle	iMeshP.h	/^typedef struct iMeshP_PartitionHandle_Private* iMeshP_PartitionHandle;$/;"	t	typeref:struct:iMeshP_PartitionHandle_Private
iMeshP_RequestHandle	iMeshP.h	/^typedef struct iMeshP_RequestHandle_Private* iMeshP_RequestHandle;$/;"	t	typeref:struct:iMeshP_RequestHandle_Private
iMeshP_addGhostOf	iMeshP.c	/^void iMeshP_addGhostOf($/;"	f
iMeshP_createGhostEntsAll	iMeshP.c	/^void iMeshP_createGhostEntsAll($/;"	f
iMeshP_createPart	iMeshP.c	/^void iMeshP_createPart($/;"	f
iMeshP_createPartitionAll	iMeshP.c	/^void iMeshP_createPartitionAll($/;"	f
iMeshP_deleteGhostEntsAll	iMeshP.c	/^void iMeshP_deleteGhostEntsAll($/;"	f
iMeshP_destroyPart	iMeshP.c	/^void iMeshP_destroyPart($/;"	f
iMeshP_destroyPartitionAll	iMeshP.c	/^void iMeshP_destroyPartitionAll($/;"	f
iMeshP_exchEntArrToPartsAll	iMeshP.c	/^void iMeshP_exchEntArrToPartsAll($/;"	f
iMeshP_getAdjEntIndices	iMeshP.c	/^void iMeshP_getAdjEntIndices($/;"	f
iMeshP_getCopies	iMeshP.c	/^void iMeshP_getCopies($/;"	f
iMeshP_getCopyOnPart	iMeshP.c	/^void iMeshP_getCopyOnPart($/;"	f
iMeshP_getCopyParts	iMeshP.c	/^void iMeshP_getCopyParts($/;"	f
iMeshP_getEntOwnerPart	iMeshP.c	/^void iMeshP_getEntOwnerPart($/;"	f
iMeshP_getEntOwnerPartArr	iMeshP.c	/^void iMeshP_getEntOwnerPartArr($/;"	f
iMeshP_getEntStatus	iMeshP.c	/^void iMeshP_getEntStatus($/;"	f
iMeshP_getEntStatusArr	iMeshP.c	/^void iMeshP_getEntStatusArr($/;"	f
iMeshP_getEntities	iMeshP.c	/^void iMeshP_getEntities($/;"	f
iMeshP_getLocalParts	iMeshP.c	/^void iMeshP_getLocalParts($/;"	f
iMeshP_getNumCopies	iMeshP.c	/^void iMeshP_getNumCopies($/;"	f
iMeshP_getNumGlobalParts	iMeshP.c	/^void iMeshP_getNumGlobalParts($/;"	f
iMeshP_getNumLocalParts	iMeshP.c	/^void iMeshP_getNumLocalParts($/;"	f
iMeshP_getNumOfTopo	iMeshP.c	/^void iMeshP_getNumOfTopo($/;"	f
iMeshP_getNumOfTopoAll	iMeshP.c	/^void iMeshP_getNumOfTopoAll($/;"	f
iMeshP_getNumOfType	iMeshP.c	/^void iMeshP_getNumOfType($/;"	f
iMeshP_getNumOfTypeAll	iMeshP.c	/^void iMeshP_getNumOfTypeAll($/;"	f
iMeshP_getNumPartBdryEnts	iMeshP.c	/^void iMeshP_getNumPartBdryEnts($/;"	f
iMeshP_getNumPartNbors	iMeshP.c	/^void iMeshP_getNumPartNbors($/;"	f
iMeshP_getNumPartNborsArr	iMeshP.c	/^void iMeshP_getNumPartNborsArr($/;"	f
iMeshP_getNumPartitions	iMeshP.c	/^void iMeshP_getNumPartitions($/;"	f
iMeshP_getOwnerCopy	iMeshP.c	/^void iMeshP_getOwnerCopy($/;"	f
iMeshP_getPartBdryEnts	iMeshP.c	/^void iMeshP_getPartBdryEnts($/;"	f
iMeshP_getPartHandleFromPartId	iMeshP.c	/^void iMeshP_getPartHandleFromPartId($/;"	f
iMeshP_getPartHandlesFromPartsIdsArr	iMeshP.c	/^void iMeshP_getPartHandlesFromPartsIdsArr($/;"	f
iMeshP_getPartIdFromPartHandle	iMeshP.c	/^void iMeshP_getPartIdFromPartHandle($/;"	f
iMeshP_getPartIdsFromPartHandlesArr	iMeshP.c	/^void iMeshP_getPartIdsFromPartHandlesArr($/;"	f
iMeshP_getPartNbors	iMeshP.c	/^void iMeshP_getPartNbors($/;"	f
iMeshP_getPartNborsArr	iMeshP.c	/^void iMeshP_getPartNborsArr($/;"	f
iMeshP_getPartitionComm	iMeshP.c	/^void iMeshP_getPartitionComm($/;"	f
iMeshP_getPartitions	iMeshP.c	/^void iMeshP_getPartitions($/;"	f
iMeshP_getRankOfPart	iMeshP.c	/^void iMeshP_getRankOfPart($/;"	f
iMeshP_getRankOfPartArr	iMeshP.c	/^void iMeshP_getRankOfPartArr($/;"	f
iMeshP_ghostEntInfo	iMeshP.c	/^void iMeshP_ghostEntInfo($/;"	f
iMeshP_iPushTags	iMeshP.c	/^void iMeshP_iPushTags($/;"	f
iMeshP_iPushTagsEnt	iMeshP.c	/^void iMeshP_iPushTagsEnt($/;"	f
iMeshP_initEntArrIter	iMeshP.c	/^void iMeshP_initEntArrIter($/;"	f
iMeshP_initEntIter	iMeshP.c	/^void iMeshP_initEntIter($/;"	f
iMeshP_initPartBdryEntArrIter	iMeshP.c	/^void iMeshP_initPartBdryEntArrIter($/;"	f
iMeshP_initPartBdryEntIter	iMeshP.c	/^void iMeshP_initPartBdryEntIter($/;"	f
iMeshP_isEntOwner	iMeshP.c	/^void iMeshP_isEntOwner($/;"	f
iMeshP_isEntOwnerArr	iMeshP.c	/^void iMeshP_isEntOwnerArr($/;"	f
iMeshP_loadAll	iMeshP.c	/^void iMeshP_loadAll($/;"	f
iMeshP_migrateEntity	iMeshP.c	/^void iMeshP_migrateEntity($/;"	f
iMeshP_pollForRequests	iMeshP.c	/^void iMeshP_pollForRequests($/;"	f
iMeshP_pushTags	iMeshP.c	/^void iMeshP_pushTags($/;"	f
iMeshP_pushTagsEnt	iMeshP.c	/^void iMeshP_pushTagsEnt($/;"	f
iMeshP_replaceOnPartBdry	iMeshP.c	/^void iMeshP_replaceOnPartBdry($/;"	f
iMeshP_rmvGhostOf	iMeshP.c	/^void iMeshP_rmvGhostOf($/;"	f
iMeshP_saveAll	iMeshP.c	/^void iMeshP_saveAll($/;"	f
iMeshP_syncMeshAll	iMeshP.c	/^void iMeshP_syncMeshAll($/;"	f
iMeshP_syncPartitionAll	iMeshP.c	/^void iMeshP_syncPartitionAll($/;"	f
iMeshP_testRequest	iMeshP.c	/^void iMeshP_testRequest($/;"	f
iMeshP_updateVtxCoords	iMeshP.c	/^void iMeshP_updateVtxCoords($/;"	f
iMeshP_waitForAllRequests	iMeshP.c	/^void iMeshP_waitForAllRequests($/;"	f
iMeshP_waitForAnyRequest	iMeshP.c	/^void iMeshP_waitForAnyRequest($/;"	f
iMeshP_waitForRequest	iMeshP.c	/^void iMeshP_waitForRequest($/;"	f
iMeshP_waitForRequestEnt	iMeshP.c	/^void iMeshP_waitForRequestEnt($/;"	f
iMesh_ALL_TOPOLOGIES	iMesh.h	/^    iMesh_ALL_TOPOLOGIES      \/**< allows the user to request information$/;"	e	enum:iMesh_EntityTopology
iMesh_EntityArrIterator	iMesh.h	/^  typedef struct iMesh_EntityArrIterator_Private* iMesh_EntityArrIterator;$/;"	t	typeref:struct:iMesh_EntityArrIterator_Private
iMesh_EntityIterator	iMesh.h	/^  typedef struct iMesh_EntityIterator_Private* iMesh_EntityIterator;$/;"	t	typeref:struct:iMesh_EntityIterator_Private
iMesh_EntityTopology	iMesh.h	/^  enum iMesh_EntityTopology {$/;"	g
iMesh_HEXAHEDRON	iMesh.h	/^    iMesh_HEXAHEDRON,         \/**< a six-sided, three-dimensional element whose$/;"	e	enum:iMesh_EntityTopology
iMesh_Instance	iMesh.h	/^  typedef struct iMesh_Instance_Private* iMesh_Instance;$/;"	t	typeref:struct:iMesh_Instance_Private
iMesh_LINE_SEGMENT	iMesh.h	/^    iMesh_LINE_SEGMENT,       \/**< a general one-dimensional entity  *\/$/;"	e	enum:iMesh_EntityTopology
iMesh_POINT	iMesh.h	/^    iMesh_POINT = 0,              \/**< a general zero-dimensional entity  *\/$/;"	e	enum:iMesh_EntityTopology
iMesh_POLYGON	iMesh.h	/^    iMesh_POLYGON,            \/**< a general two-dimensional element  *\/$/;"	e	enum:iMesh_EntityTopology
iMesh_POLYHEDRON	iMesh.h	/^    iMesh_POLYHEDRON,         \/**< a general three-dimensional element *\/$/;"	e	enum:iMesh_EntityTopology
iMesh_PRISM	iMesh.h	/^    iMesh_PRISM,              \/**< a five-sided, three-dimensional element which$/;"	e	enum:iMesh_EntityTopology
iMesh_PYRAMID	iMesh.h	/^    iMesh_PYRAMID,            \/**< a five-sided, three-dimensional element$/;"	e	enum:iMesh_EntityTopology
iMesh_QUADRILATERAL	iMesh.h	/^    iMesh_QUADRILATERAL,      \/**< a four-sided, two-dimensional element  *\/$/;"	e	enum:iMesh_EntityTopology
iMesh_SEPTAHEDRON	iMesh.h	/^    iMesh_SEPTAHEDRON,        \/**< a hexahedral entity with one collapsed edge *\/$/;"	e	enum:iMesh_EntityTopology
iMesh_TETRAHEDRON	iMesh.h	/^    iMesh_TETRAHEDRON,        \/**< a four-sided, three-dimensional element whose$/;"	e	enum:iMesh_EntityTopology
iMesh_TRIANGLE	iMesh.h	/^    iMesh_TRIANGLE,           \/**< a three-sided, two-dimensional element  *\/$/;"	e	enum:iMesh_EntityTopology
iMesh_addEntArrToSet	iMesh.c	/^void iMesh_addEntArrToSet(iMesh_Instance instance,$/;"	f
iMesh_addEntSet	iMesh.c	/^void iMesh_addEntSet(iMesh_Instance instance,$/;"	f
iMesh_addEntToSet	iMesh.c	/^void iMesh_addEntToSet(iMesh_Instance instance,$/;"	f
iMesh_addPrntChld	iMesh.c	/^void iMesh_addPrntChld(iMesh_Instance instance,$/;"	f
iMesh_areEHValid	iMesh.c	/^void iMesh_areEHValid(iMesh_Instance instance,$/;"	f
iMesh_createEnt	iMesh.c	/^void iMesh_createEnt(iMesh_Instance instance,$/;"	f
iMesh_createEntArr	iMesh.c	/^void iMesh_createEntArr(iMesh_Instance instance,$/;"	f
iMesh_createEntSet	iMesh.c	/^void iMesh_createEntSet(iMesh_Instance instance,$/;"	f
iMesh_createTag	iMesh.c	/^void iMesh_createTag(iMesh_Instance instance,$/;"	f
iMesh_createVtx	iMesh.c	/^void iMesh_createVtx(iMesh_Instance instance,$/;"	f
iMesh_createVtxArr	iMesh.c	/^void iMesh_createVtxArr(iMesh_Instance instance,$/;"	f
iMesh_deleteEnt	iMesh.c	/^void iMesh_deleteEnt(iMesh_Instance instance,$/;"	f
iMesh_deleteEntArr	iMesh.c	/^void iMesh_deleteEntArr(iMesh_Instance instance,$/;"	f
iMesh_destroyEntSet	iMesh.c	/^void iMesh_destroyEntSet(iMesh_Instance instance,$/;"	f
iMesh_destroyTag	iMesh.c	/^void iMesh_destroyTag(iMesh_Instance instance,$/;"	f
iMesh_dtor	iMesh.c	/^void iMesh_dtor(\/*in*\/  iMesh_Instance instance, $/;"	f
iMesh_endEntArrIter	iMesh.c	/^void iMesh_endEntArrIter(iMesh_Instance instance,$/;"	f
iMesh_endEntIter	iMesh.c	/^void iMesh_endEntIter(iMesh_Instance instance,$/;"	f
iMesh_getAdjEntIndices	iMesh.c	/^void iMesh_getAdjEntIndices(iMesh_Instance instance,$/;"	f
iMesh_getAdjTable	iMesh.c	/^void iMesh_getAdjTable(iMesh_Instance instance,$/;"	f
iMesh_getAllEntSetTags	iMesh.c	/^void iMesh_getAllEntSetTags(iMesh_Instance instance,$/;"	f
iMesh_getAllTags	iMesh.c	/^void iMesh_getAllTags(iMesh_Instance instance,$/;"	f
iMesh_getArrData	iMesh.c	/^void iMesh_getArrData(iMesh_Instance instance,$/;"	f
iMesh_getChldn	iMesh.c	/^void iMesh_getChldn(iMesh_Instance instance,$/;"	f
iMesh_getData	iMesh.c	/^void iMesh_getData(iMesh_Instance instance,$/;"	f
iMesh_getDblArrData	iMesh.c	/^void iMesh_getDblArrData(iMesh_Instance instance,$/;"	f
iMesh_getDblData	iMesh.c	/^void iMesh_getDblData(iMesh_Instance instance,$/;"	f
iMesh_getDescription	iMesh.c	/^void iMesh_getDescription(iMesh_Instance instance,$/;"	f
iMesh_getDfltStorage	iMesh.c	/^void iMesh_getDfltStorage(iMesh_Instance instance,$/;"	f
iMesh_getEHArrData	iMesh.c	/^void iMesh_getEHArrData(iMesh_Instance instance,$/;"	f
iMesh_getEHData	iMesh.c	/^void iMesh_getEHData(iMesh_Instance instance,$/;"	f
iMesh_getEnt2ndAdj	iMesh.c	/^void iMesh_getEnt2ndAdj( iMesh_Instance instance,$/;"	f
iMesh_getEntAdj	iMesh.c	/^void iMesh_getEntAdj(iMesh_Instance instance,$/;"	f
iMesh_getEntArr2ndAdj	iMesh.c	/^void iMesh_getEntArr2ndAdj( iMesh_Instance instance,$/;"	f
iMesh_getEntArrAdj	iMesh.c	/^void iMesh_getEntArrAdj(iMesh_Instance instance,$/;"	f
iMesh_getEntArrTopo	iMesh.c	/^void iMesh_getEntArrTopo(iMesh_Instance instance,$/;"	f
iMesh_getEntArrType	iMesh.c	/^void iMesh_getEntArrType(iMesh_Instance instance,$/;"	f
iMesh_getEntSetData	iMesh.c	/^void iMesh_getEntSetData(iMesh_Instance instance,$/;"	f
iMesh_getEntSetDblData	iMesh.c	/^void iMesh_getEntSetDblData(iMesh_Instance instance,$/;"	f
iMesh_getEntSetEHData	iMesh.c	/^void iMesh_getEntSetEHData(iMesh_Instance instance,$/;"	f
iMesh_getEntSetIntData	iMesh.c	/^void iMesh_getEntSetIntData(iMesh_Instance instance,$/;"	f
iMesh_getEntSets	iMesh.c	/^void iMesh_getEntSets(iMesh_Instance instance,$/;"	f
iMesh_getEntTopo	iMesh.c	/^void iMesh_getEntTopo(iMesh_Instance instance,$/;"	f
iMesh_getEntType	iMesh.c	/^void iMesh_getEntType(iMesh_Instance instance,$/;"	f
iMesh_getEntities	iMesh.c	/^void iMesh_getEntities(iMesh_Instance instance,$/;"	f
iMesh_getErrorType	iMesh.c	/^void iMesh_getErrorType(iMesh_Instance instance,$/;"	f
iMesh_getGeometricDimension	iMesh.c	/^void iMesh_getGeometricDimension(iMesh_Instance instance,$/;"	f
iMesh_getIntArrData	iMesh.c	/^void iMesh_getIntArrData(iMesh_Instance instance,$/;"	f
iMesh_getIntData	iMesh.c	/^void iMesh_getIntData(iMesh_Instance instance,$/;"	f
iMesh_getNextEntArrIter	iMesh.c	/^void iMesh_getNextEntArrIter(iMesh_Instance instance,$/;"	f
iMesh_getNextEntIter	iMesh.c	/^void iMesh_getNextEntIter(iMesh_Instance instance,$/;"	f
iMesh_getNumChld	iMesh.c	/^void iMesh_getNumChld(iMesh_Instance instance,$/;"	f
iMesh_getNumEntSets	iMesh.c	/^void iMesh_getNumEntSets(iMesh_Instance instance,$/;"	f
iMesh_getNumOfTopo	iMesh.c	/^void iMesh_getNumOfTopo(iMesh_Instance instance,$/;"	f
iMesh_getNumOfType	iMesh.c	/^void iMesh_getNumOfType(iMesh_Instance instance,$/;"	f
iMesh_getNumPrnt	iMesh.c	/^void iMesh_getNumPrnt(iMesh_Instance instance,$/;"	f
iMesh_getPrnts	iMesh.c	/^void iMesh_getPrnts(iMesh_Instance instance,$/;"	f
iMesh_getRootSet	iMesh.c	/^void iMesh_getRootSet(iMesh_Instance instance,$/;"	f
iMesh_getTagHandle	iMesh.c	/^void iMesh_getTagHandle(iMesh_Instance instance,$/;"	f
iMesh_getTagName	iMesh.c	/^void iMesh_getTagName(iMesh_Instance instance,$/;"	f
iMesh_getTagSizeBytes	iMesh.c	/^void iMesh_getTagSizeBytes(iMesh_Instance instance,$/;"	f
iMesh_getTagSizeValues	iMesh.c	/^void iMesh_getTagSizeValues(iMesh_Instance instance,$/;"	f
iMesh_getTagType	iMesh.c	/^void iMesh_getTagType(iMesh_Instance instance,$/;"	f
iMesh_getVtxArrCoords	iMesh.c	/^void iMesh_getVtxArrCoords(iMesh_Instance instance,$/;"	f
iMesh_getVtxCoord	iMesh.c	/^void iMesh_getVtxCoord(iMesh_Instance instance,$/;"	f
iMesh_initEntArrIter	iMesh.c	/^void iMesh_initEntArrIter(iMesh_Instance instance,$/;"	f
iMesh_initEntIter	iMesh.c	/^void iMesh_initEntIter(iMesh_Instance instance,$/;"	f
iMesh_intersect	iMesh.c	/^void iMesh_intersect(iMesh_Instance instance,$/;"	f
iMesh_isChildOf	iMesh.c	/^void iMesh_isChildOf(iMesh_Instance instance,$/;"	f
iMesh_isEntArrContained	iMesh.c	/^void iMesh_isEntArrContained( iMesh_Instance instance,$/;"	f
iMesh_isEntContained	iMesh.c	/^void iMesh_isEntContained(iMesh_Instance instance,$/;"	f
iMesh_isEntSetContained	iMesh.c	/^void iMesh_isEntSetContained(iMesh_Instance instance,$/;"	f
iMesh_isList	iMesh.c	/^void iMesh_isList(iMesh_Instance instance,$/;"	f
iMesh_load	iMesh.c	/^void iMesh_load(iMesh_Instance instance,$/;"	f
iMesh_newMesh	iMesh.c	/^void iMesh_newMesh(\/*in*\/  const char *options,$/;"	f
iMesh_resetEntArrIter	iMesh.c	/^void iMesh_resetEntArrIter(iMesh_Instance instance,$/;"	f
iMesh_resetEntIter	iMesh.c	/^void iMesh_resetEntIter(iMesh_Instance instance,$/;"	f
iMesh_rmvArrTag	iMesh.c	/^void iMesh_rmvArrTag(iMesh_Instance instance,$/;"	f
iMesh_rmvEntArrFromSet	iMesh.c	/^void iMesh_rmvEntArrFromSet(iMesh_Instance instance,$/;"	f
iMesh_rmvEntFromSet	iMesh.c	/^void iMesh_rmvEntFromSet(iMesh_Instance instance,$/;"	f
iMesh_rmvEntSet	iMesh.c	/^void iMesh_rmvEntSet(iMesh_Instance instance,$/;"	f
iMesh_rmvEntSetTag	iMesh.c	/^void iMesh_rmvEntSetTag(iMesh_Instance instance,$/;"	f
iMesh_rmvPrntChld	iMesh.c	/^void iMesh_rmvPrntChld(iMesh_Instance instance,$/;"	f
iMesh_rmvTag	iMesh.c	/^void iMesh_rmvTag(iMesh_Instance instance,$/;"	f
iMesh_save	iMesh.c	/^void iMesh_save(iMesh_Instance instance,$/;"	f
iMesh_setArrData	iMesh.c	/^void iMesh_setArrData(iMesh_Instance instance,$/;"	f
iMesh_setData	iMesh.c	/^void iMesh_setData(iMesh_Instance instance,$/;"	f
iMesh_setDblArrData	iMesh.c	/^void iMesh_setDblArrData(iMesh_Instance instance,$/;"	f
iMesh_setDblData	iMesh.c	/^void iMesh_setDblData(iMesh_Instance instance,$/;"	f
iMesh_setEHArrData	iMesh.c	/^void iMesh_setEHArrData(iMesh_Instance instance,$/;"	f
iMesh_setEHData	iMesh.c	/^void iMesh_setEHData(iMesh_Instance instance,$/;"	f
iMesh_setEntSetData	iMesh.c	/^void iMesh_setEntSetData(iMesh_Instance instance,$/;"	f
iMesh_setEntSetDblData	iMesh.c	/^void iMesh_setEntSetDblData(iMesh_Instance instance,$/;"	f
iMesh_setEntSetEHData	iMesh.c	/^void iMesh_setEntSetEHData(iMesh_Instance instance,$/;"	f
iMesh_setEntSetIntData	iMesh.c	/^void iMesh_setEntSetIntData(iMesh_Instance instance,$/;"	f
iMesh_setGeometricDimension	iMesh.c	/^void iMesh_setGeometricDimension(iMesh_Instance instance,$/;"	f
iMesh_setIntArrData	iMesh.c	/^void iMesh_setIntArrData(iMesh_Instance instance,$/;"	f
iMesh_setIntData	iMesh.c	/^void iMesh_setIntData(iMesh_Instance instance,$/;"	f
iMesh_setVtxArrCoords	iMesh.c	/^void iMesh_setVtxArrCoords(iMesh_Instance instance,$/;"	f
iMesh_setVtxCoord	iMesh.c	/^void iMesh_setVtxCoord(iMesh_Instance instance,$/;"	f
iMesh_subtract	iMesh.c	/^void iMesh_subtract(iMesh_Instance instance,$/;"	f
iMesh_unite	iMesh.c	/^void iMesh_unite(iMesh_Instance instance,$/;"	f
iRel_IBASE_IFACE	iRel.h	/^  {iRel_IBASE_IFACE = 0,$/;"	e	enum:IfaceType
iRel_IFIELD_IFACE	iRel.h	/^   iRel_IFIELD_IFACE, $/;"	e	enum:IfaceType
iRel_IGEOM_IFACE	iRel.h	/^   iRel_IGEOM_IFACE, $/;"	e	enum:IfaceType
iRel_IMESH_IFACE	iRel.h	/^   iRel_IMESH_IFACE, $/;"	e	enum:IfaceType
iRel_IREL_IFACE	iRel.h	/^   iRel_IREL_IFACE};$/;"	e	enum:IfaceType
iRel_Instance	iRel.h	/^  typedef void* iRel_Instance;$/;"	t
iRel_RelationHandle	iRel.h	/^  typedef struct iRel_RelationHandle_Private* iRel_RelationHandle;$/;"	t	typeref:struct:iRel_RelationHandle_Private
i_Bond	intfc.c	/^EXPORT BOND *i_Bond($/;"	f
i_CBond	isect3d.c	/^EXPORT	C_BOND	*i_CBond($/;"	f
i_Point	intfc.c	/^EXPORT POINT *i_Point($/;"	f
i_Static_point	intfc.c	/^EXPORT POINT *i_Static_point($/;"	f
i_add_comp_to_list	isub.c	/^EXPORT	void i_add_comp_to_list($/;"	f
i_assign_curve_boundary_flag	iuserintfc.c	/^LOCAL	void	i_assign_curve_boundary_flag($/;"	f
i_assign_curve_boundary_type	iuserintfc.c	/^LOCAL	void	i_assign_curve_boundary_type($/;"	f
i_attach_curve_to_node	top.c	/^EXPORT	CURVE *i_attach_curve_to_node($/;"	f
i_average_points	intfc.c	/^EXPORT	POINT *i_average_points($/;"	f
i_boundary_type_as_string	intfc.c	/^EXPORT	const char *i_boundary_type_as_string($/;"	f
i_consistent_interface	icheck3d.c	/^EXPORT	boolean i_consistent_interface($/;"	f
i_consistent_interface2d	icheck3d.c	/^LOCAL	boolean i_consistent_interface2d($/;"	f
i_consistent_interface3d	icheck3d.c	/^LOCAL	boolean i_consistent_interface3d($/;"	f
i_copy_curve	intfc.c	/^EXPORT CURVE *i_copy_curve($/;"	f
i_copy_interface	intfc.c	/^EXPORT INTERFACE *i_copy_interface($/;"	f
i_copy_node	intfc.c	/^EXPORT NODE *i_copy_node($/;"	f
i_copy_point	intfc.c	/^EXPORT POINT *i_copy_point($/;"	f
i_copy_surface	int3d.c	/^EXPORT SURFACE *i_copy_surface($/;"	f
i_cross_tolerance	iuserintfc.c	/^LOCAL	double	i_cross_tolerance($/;"	f
i_cut_curve	top.c	/^EXPORT void i_cut_curve($/;"	f
i_delete_curve	intfc.c	/^EXPORT int i_delete_curve($/;"	f
i_delete_end_of_bond	intfc.c	/^EXPORT boolean i_delete_end_of_bond($/;"	f
i_delete_interface	intfc.c	/^EXPORT int i_delete_interface($/;"	f
i_delete_node	intfc.c	/^EXPORT boolean i_delete_node($/;"	f
i_delete_point	intfc.c	/^EXPORT int i_delete_point($/;"	f
i_delete_point_adjacent_to_node	iredist.c	/^EXPORT boolean i_delete_point_adjacent_to_node($/;"	f
i_delete_start_of_bond	intfc.c	/^EXPORT boolean i_delete_start_of_bond($/;"	f
i_delete_surface	int3d.c	/^EXPORT int i_delete_surface($/;"	f
i_fprint_boundary_type	intfc.c	/^LIB_LOCAL	void i_fprint_boundary_type($/;"	f
i_fprint_curve	intfc.c	/^LIB_LOCAL void i_fprint_curve($/;"	f
i_fprint_interface	intfc.c	/^EXPORT void i_fprint_interface($/;"	f
i_fprint_intfc_rect_grids	intfc.c	/^LIB_LOCAL	void i_fprint_intfc_rect_grids($/;"	f
i_fprint_node	intfc.c	/^LIB_LOCAL void i_fprint_node($/;"	f
i_fprint_point	intfc.c	/^LIB_LOCAL void i_fprint_point($/;"	f
i_fprint_surface	int3d.c	/^LIB_LOCAL void i_fprint_surface($/;"	f
i_fset_hyper_surf_color	iuserintfc.c	/^LOCAL	void i_fset_hyper_surf_color($/;"	f
i_gview_plot_interface	iuserintfc.c	/^LOCAL	void	i_gview_plot_interface($/;"	f
i_init_data	int.h	1365;"	d
i_init_remap_and_rect_grid	igrid.c	/^EXPORT	void i_init_remap_and_rect_grid($/;"	f
i_insert_point_in_bond	intfc.c	/^EXPORT boolean i_insert_point_in_bond($/;"	f
i_insert_point_in_tri	int3d.c	/^EXPORT	boolean	i_insert_point_in_tri($/;"	f
i_insert_point_in_tri_side	int3d.c	/^EXPORT	boolean	i_insert_point_in_tri_side($/;"	f
i_interface	userint.h	309;"	d
i_intersections1d	comp1d.c	/^EXPORT	boolean i_intersections1d($/;"	f
i_intersections2d	isect2d.c	/^LIB_LOCAL boolean i_intersections2d($/;"	f
i_intersections3d	isect3d.c	/^LIB_LOCAL  boolean  i_intersections3d($/;"	f
i_intfc	int.h	1366;"	d
i_invert_curve	top.c	/^EXPORT	void i_invert_curve($/;"	f
i_invert_surface	top.c	/^EXPORT  void i_invert_surface($/;"	f
i_is_comp_in_list	isub.c	/^EXPORT	boolean i_is_comp_in_list($/;"	f
i_is_excluded_comp	iuserintfc.c	/^LOCAL	boolean i_is_excluded_comp($/;"	f
i_is_subdomain_boundary	top.c	/^LIB_LOCAL	boolean i_is_subdomain_boundary($/;"	f
i_is_subdomain_node	top.c	/^LIB_LOCAL	boolean i_is_subdomain_node($/;"	f
i_is_virtual_fixed_node	top.c	/^LIB_LOCAL	boolean i_is_virtual_fixed_node($/;"	f
i_join_surfaces	int3d.c	/^EXPORT	SURFACE  *i_join_surfaces($/;"	f
i_link_tri_to_bond	int3d.c	/^EXPORT	BOND_TRI *i_link_tri_to_bond($/;"	f
i_make_curve	intfc.c	/^EXPORT CURVE *i_make_curve($/;"	f
i_make_fourier_curve	top.c	/^EXPORT CURVE	*i_make_fourier_curve($/;"	f
i_make_hypersurface	intfc.c	/^EXPORT HYPER_SURF *i_make_hypersurface($/;"	f
i_make_hypersurface_boundary	intfc.c	/^EXPORT	HYPER_SURF_BDRY	*i_make_hypersurface_boundary(void)$/;"	f
i_make_node	intfc.c	/^EXPORT NODE *i_make_node($/;"	f
i_make_point	intfc.c	/^EXPORT POINT *i_make_point($/;"	f
i_make_surface	int3d.c	/^EXPORT SURFACE *i_make_surface($/;"	f
i_make_tri	int3d.c	/^EXPORT TRI *i_make_tri($/;"	f
i_move_closed_loop_node	top.c	/^EXPORT	boolean i_move_closed_loop_node($/;"	f
i_preserve_user_hooks	iuserintfc.c	/^EXPORT	void	i_preserve_user_hooks($/;"	f
i_print_crossing_elements2d	isect2d.c	/^LIB_LOCAL	void	i_print_crossing_elements2d($/;"	f
i_print_crossing_elements3d	isect3d.c	/^LIB_LOCAL	void	i_print_crossing_elements3d($/;"	f
i_print_intersections1d	comp1d.c	/^LIB_LOCAL void	i_print_intersections1d($/;"	f
i_print_intersections2d	isect2d.c	/^LIB_LOCAL void i_print_intersections2d($/;"	f
i_print_intersections3d	isect3d.c	/^EXPORT	void i_print_intersections3d($/;"	f
i_print_number_of_tangles	isub.c	/^LIB_LOCAL	int	i_print_number_of_tangles($/;"	f
i_print_remap_values	igrid.c	/^EXPORT	void i_print_remap_values(void)$/;"	f
i_random01	intfc.c	/^EXPORT	double i_random01($/;"	f
i_random_pert_func	imksurf.c	/^LOCAL	double i_random_pert_func($/;"	f
i_read_boundary_type_from_string	intfc.c	/^EXPORT	int i_read_boundary_type_from_string($/;"	f
i_read_curve	intfc.c	/^LIB_LOCAL	CURVE	*i_read_curve($/;"	f
i_read_node	intfc.c	/^LIB_LOCAL NODE *i_read_node($/;"	f
i_read_point	intfc.c	/^LIB_LOCAL	POINT *i_read_point($/;"	f
i_read_print_intfc_rect_grids	intfc.c	/^LIB_LOCAL	int i_read_print_intfc_rect_grids($/;"	f
i_read_print_point	intfc.c	/^LIB_LOCAL	POINT *i_read_print_point($/;"	f
i_read_surface	int3d.c	/^EXPORT SURFACE *i_read_surface($/;"	f
i_receive_interface	ppcopy.c	/^EXPORT	INTERFACE *i_receive_interface($/;"	f
i_reconstruct_bond_pointers	ppcopy.c	/^EXPORT	void i_reconstruct_bond_pointers($/;"	f
i_reconstruct_curve_pointers	ppcopy.c	/^EXPORT	void i_reconstruct_curve_pointers($/;"	f
i_reconstruct_interface_pointers	ppcopy.c	/^EXPORT	void i_reconstruct_interface_pointers($/;"	f
i_reconstruct_node_pointers	ppcopy.c	/^EXPORT	void i_reconstruct_node_pointers($/;"	f
i_reconstruct_point_pointers	ppcopy.c	/^EXPORT	void i_reconstruct_point_pointers($/;"	f
i_reconstruct_surface_pointers	ppcopy.c	/^LIB_LOCAL	void i_reconstruct_surface_pointers($/;"	f
i_reconstruct_tri_pointers	ppcopy.c	/^LIB_LOCAL	void i_reconstruct_tri_pointers($/;"	f
i_reflect_curve	irefl.c	/^EXPORT	void	i_reflect_curve($/;"	f
i_reflect_interface1d	irefl.c	/^LIB_LOCAL	void	i_reflect_interface1d($/;"	f
i_reflect_interface2d	irefl.c	/^LIB_LOCAL	void	i_reflect_interface2d($/;"	f
i_reflect_interface3d	irefl.c	/^LIB_LOCAL	void	i_reflect_interface3d($/;"	f
i_reflect_node	irefl.c	/^EXPORT	void	i_reflect_node($/;"	f
i_reflect_point	irefl.c	/^EXPORT	void	i_reflect_point($/;"	f
i_reflect_surface	irefl.c	/^EXPORT	void	i_reflect_surface($/;"	f
i_reorder_curve_link_list	iblkc2.c	/^EXPORT	void i_reorder_curve_link_list($/;"	f
i_reverse_bond	int3d.c	/^EXPORT	void i_reverse_bond($/;"	f
i_reverse_curve	top.c	/^EXPORT	void i_reverse_curve($/;"	f
i_sd2d	comp2d.c	/^LOCAL	double	i_sd2d($/;"	f
i_send_interface	ppcopy.c	/^EXPORT	void i_send_interface($/;"	f
i_set_boundary1d	setb1d.c	/^EXPORT boolean i_set_boundary1d($/;"	f
i_set_boundary2d	setb2d.c	/^EXPORT boolean i_set_boundary2d($/;"	f
i_set_boundary3d	setb3d.c	/^EXPORT boolean i_set_boundary3d($/;"	f
i_sort_bond_tris	int3d.c	/^EXPORT	boolean i_sort_bond_tris($/;"	f
i_undo_insert_point_in_tri	int3d.c	/^EXPORT	boolean	i_undo_insert_point_in_tri($/;"	f
i_undo_insert_point_in_tri_side	int3d.c	/^EXPORT	boolean	i_undo_insert_point_in_tri_side($/;"	f
i_user_copy_hyper_surf	iuserintfc.c	/^LOCAL	void	i_user_copy_hyper_surf($/;"	f
i_user_fprint_curve	iuserintfc.c	/^LOCAL	void	i_user_fprint_curve($/;"	f
i_user_fprint_interface	iuserintfc.c	/^LOCAL	void	i_user_fprint_interface($/;"	f
i_user_fprint_intfc_rect_grids	iuserintfc.c	/^LOCAL	void	i_user_fprint_intfc_rect_grids($/;"	f
i_user_fprint_node	iuserintfc.c	/^LOCAL	void	i_user_fprint_node($/;"	f
i_user_fprint_point	iuserintfc.c	/^LOCAL	void	i_user_fprint_point($/;"	f
i_user_fprint_surface	iuserintfc.c	/^LOCAL	void	i_user_fprint_surface($/;"	f
i_user_hook	iuserintfc.c	/^EXPORT	I_USER_INTERFACE *i_user_hook($/;"	f
i_user_install_faces	iuserintfc.c	/^LOCAL	void	i_user_install_faces($/;"	f
i_user_interface	userint.h	310;"	d
i_user_join_curves	iuserintfc.c	/^LOCAL	boolean i_user_join_curves($/;"	f
i_user_make_interface	iuserintfc.c	/^LOCAL	void	i_user_make_interface($/;"	f
i_user_read_curve	iuserintfc.c	/^LOCAL	void	i_user_read_curve($/;"	f
i_user_read_node	iuserintfc.c	/^LOCAL	int	i_user_read_node($/;"	f
i_user_read_point	iuserintfc.c	/^LOCAL	void	i_user_read_point($/;"	f
i_user_read_print_curve	iuserintfc.c	/^LOCAL	boolean	i_user_read_print_curve($/;"	f
i_user_read_print_interface	iuserintfc.c	/^LOCAL	int	i_user_read_print_interface($/;"	f
i_user_read_print_intfc_rect_grids	iuserintfc.c	/^LOCAL	void	i_user_read_print_intfc_rect_grids($/;"	f
i_user_read_print_node	iuserintfc.c	/^LOCAL	void	i_user_read_print_node($/;"	f
i_user_read_print_point	iuserintfc.c	/^LOCAL	void	i_user_read_print_point($/;"	f
i_user_read_print_surface	iuserintfc.c	/^LOCAL	void	i_user_read_print_surface($/;"	f
i_user_read_surface	iuserintfc.c	/^LOCAL	void	i_user_read_surface($/;"	f
i_user_split_curve	iuserintfc.c	/^LOCAL	boolean i_user_split_curve($/;"	f
i_zoom_interface	zoom.c	/^EXPORT INTERFACE *i_zoom_interface($/;"	f
ic	int.h	/^	int             ic[3];$/;"	m	struct:_BLK_TRI
iccerrboundA	triangle.c	/^LOCAL double iccerrboundA, iccerrboundB, iccerrboundC;$/;"	v
iccerrboundB	triangle.c	/^LOCAL double iccerrboundA, iccerrboundB, iccerrboundC;$/;"	v
iccerrboundC	triangle.c	/^LOCAL double iccerrboundA, iccerrboundB, iccerrboundC;$/;"	v
icl	int.h	/^        int                dir, index, icl[3];$/;"	m	struct:_CRXING
id_curve_by_points	trisurf.c	/^LOCAL CURVE *id_curve_by_points($/;"	f
ident_Area	igrid.c	/^EXPORT	double ident_Area($/;"	f
ident_Length	igrid.c	/^LOCAL	double ident_Length($/;"	f
ident_Volume	igrid.c	/^LOCAL	double ident_Volume($/;"	f
identify_detached_surface_curve_pair	isurgery.c	/^EXPORT void identify_detached_surface_curve_pair($/;"	f
idir	comp3d.c	/^	int	idir;		\/* used in directional projection *\/$/;"	m	struct:__anon3	file:
im	igview.c	/^	gdImagePtr im;$/;"	m	struct:DATA	file:
imag	../util/cdecs.h	/^        double imag;$/;"	m	struct:_COMPLEX
in_comp_equiv_list	iecomps.c	/^LOCAL COMP_EQUIV_LIST in_comp_equiv_list($/;"	f
in_curves	int.h	/^	struct _CURVE **in_curves;	\/* Pointer to Set of In Curves *\/$/;"	m	struct:_NODE	typeref:struct:_NODE::_CURVE
in_order	../util/fsort.c	/^LOCAL	int in_order($/;"	f
incircle	triangle.c	/^LOCAL double incircle(point pa, point pb, point pc, point pd)$/;"	f
incircleadapt	triangle.c	/^LOCAL double incircleadapt($/;"	f
incirclecount	triangle.c	/^LOCAL long incirclecount;             \/* Number of incircle tests performed. *\/$/;"	v
inconsistent_sign	iprt3d.c	/^LOCAL int inconsistent_sign(double x1, double x2)$/;"	f
increment_theta	imkcurve.c	/^LOCAL	boolean increment_theta($/;"	f
ind	itrisset.c	/^	int		ind;$/;"	m	struct:__anon13	file:
index	iTaps.h	/^        int index;      \/* in entity tag array *\/$/;"	m	struct:_FT_ETAG
index	int.h	/^	int              index;$/;"	m	union:_TRI_NEIGHBOR
index	int.h	/^        int                dir, index, icl[3];$/;"	m	struct:_CRXING
index_of_pointer	idiagnostic.c	/^EXPORT 	int 	index_of_pointer($/;"	f
index_of_pointer_in_array	array.h	52;"	d
index_of_read_file	../util/output.c	/^LOCAL IOUTPUT *index_of_read_file($/;"	f
index_of_write_file	../util/output.c	/^LOCAL WRITE_LIST *index_of_write_file($/;"	f
indx	int.h	/^	int		indx;$/;"	m	struct:_POINT
infect	triangle.c	913;"	d	file:
infected	triangle.c	923;"	d	file:
infecthull	triangle.c	/^LOCAL void infecthull(void)$/;"	f
infpoint1	triangle.c	/^LOCAL point infpoint1, infpoint2, infpoint3;$/;"	v
infpoint2	triangle.c	/^LOCAL point infpoint1, infpoint2, infpoint3;$/;"	v
infpoint3	triangle.c	/^LOCAL point infpoint1, infpoint2, infpoint3;$/;"	v
init_3d_graph_params	iprt3d.c	/^LOCAL void init_3d_graph_params(void)$/;"	f
init_clean_up	../util/cleanup.c	/^EXPORT	void init_clean_up($/;"	f
init_cosmos_params	imkcurve.c	/^EXPORT  POINTER init_cosmos_params(RECT_GRID *gr)$/;"	f
init_data	../util/cdecs.h	532;"	d
init_debug	../util/debug.c	/^EXPORT	DEBUG_PARAMS *init_debug($/;"	f
init_default_debugging	../util/uinit.c	/^EXPORT	void	init_default_debugging($/;"	f
init_dumbbell_params	imksurf.c	/^LOCAL 	POINTER init_dumbbell_params($/;"	f
init_ellipse_params	imkcurve.c	/^EXPORT	POINTER init_ellipse_params(RECT_GRID *gr)$/;"	f
init_ellipse_tilt_params	imkcurve.c	/^EXPORT  POINTER init_ellipse_tilt_params(RECT_GRID *gr)$/;"	f
init_ellipsoid_params	imksurf.c	/^LOCAL 	POINTER init_ellipsoid_params($/;"	f
init_face_crx_lists	isub.c	/^EXPORT	void init_face_crx_lists($/;"	f
init_hyperboloid_params	imksurf.c	/^LOCAL 	POINTER init_hyperboloid_params($/;"	f
init_i_random_pert_params	imksurf.c	/^LOCAL 	POINTER init_i_random_pert_params($/;"	f
init_line_params	imkcurve.c	/^LOCAL	POINTER init_line_params(RECT_GRID *gr)$/;"	f
init_multi_circle_params	imkcurve.c	/^LOCAL	POINTER init_multi_circle_params(RECT_GRID *gr)$/;"	f
init_multi_ellipsoid_params	imksurf.c	/^LOCAL 	POINTER init_multi_ellipsoid_params($/;"	f
init_paraboloid_params	imksurf.c	/^LOCAL 	POINTER init_paraboloid_params($/;"	f
init_plane_params	imksurf.c	/^LOCAL 	POINTER init_plane_params($/;"	f
init_prompting_and_debugging	../util/uinit.c	/^EXPORT	void	init_prompting_and_debugging($/;"	f
init_propeller_params	imkcurve.c	/^EXPORT  POINTER init_propeller_params(RECT_GRID *gr)$/;"	f
init_radial_motion_params	testintfc.c	/^LOCAL void init_radial_motion_params($/;"	f
init_random_modes	ifourier.c	/^EXPORT	void init_random_modes($/;"	f
init_rectangle_params	imkcurve.c	/^EXPORT  POINTER init_rectangle_params(RECT_GRID *gr)$/;"	f
init_seg_crx_lists	isub.c	/^EXPORT	void init_seg_crx_lists($/;"	f
init_shear_motion_params	testintfc.c	/^LOCAL void init_shear_motion_params($/;"	f
init_sine_motion_params	testintfc.c	/^LOCAL void init_sine_motion_params($/;"	f
init_sine_wave_params	imkcurve.c	/^LOCAL	POINTER init_sine_wave_params(RECT_GRID *gr)$/;"	f
init_sine_wave_params	imksurf.c	/^LOCAL 	POINTER init_sine_wave_params($/;"	f
init_table_Store	intfc.c	/^EXPORT	POINTER	init_table_Store($/;"	f
init_taegeuk_params	imkcurve.c	/^EXPORT  POINTER init_taegeuk_params(RECT_GRID *gr)$/;"	f
init_test_disk_params	imkcurve.c	/^LOCAL	POINTER init_test_disk_params(RECT_GRID *gr)$/;"	f
init_topological_grid	igrid.c	/^EXPORT	void init_topological_grid($/;"	f
init_translation_params	testintfc.c	/^LOCAL void init_translation_params($/;"	f
init_triangle_params	imkcurve.c	/^EXPORT  POINTER init_triangle_params(RECT_GRID *gr)$/;"	f
init_wing_params	imkcurve.c	/^EXPORT  POINTER init_wing_params(RECT_GRID *gr)$/;"	f
initialize_image	igview.c	/^LOCAL void initialize_image($/;"	f
initializepointpool	triangle.c	/^LOCAL void initializepointpool(void)$/;"	f
initializetrisegpools	triangle.c	/^LOCAL void initializetrisegpools(void)$/;"	f
inpoints	triangle.c	/^LOCAL size_t inpoints;                         \/* Number of input points. *\/$/;"	v
insert_cuts_and_bdry2d	zoom.c	/^LOCAL 	void insert_cuts_and_bdry2d($/;"	f
insert_in_cross_list	cross2d.c	/^EXPORT void insert_in_cross_list($/;"	f
insert_in_doubly_linked_list	arrayutils.c	484;"	d	file:
insert_point_in_bond	userhooks.c	/^EXPORT	boolean insert_point_in_bond($/;"	f
insert_point_in_tri	userhooks.c	/^EXPORT	boolean	insert_point_in_tri($/;"	f
insert_point_in_tri_side	userhooks.c	/^EXPORT	boolean	insert_point_in_tri_side($/;"	f
insert_tri_at_head_of_list	int3d.c	/^EXPORT	void	insert_tri_at_head_of_list($/;"	f
insert_tri_at_tail_of_list	int3d.c	/^EXPORT	void	insert_tri_at_tail_of_list($/;"	f
insertsegment	triangle.c	/^LOCAL void insertsegment($/;"	f
insertshelle	triangle.c	/^LOCAL void insertshelle($/;"	f
insertsite	triangle.c	/^LOCAL insertsiteresult insertsite($/;"	f
insertsiteresult	triangle.c	/^enum insertsiteresult {$/;"	g	file:
insertsiteresult	triangle.c	/^typedef enum insertsiteresult insertsiteresult;$/;"	t	typeref:enum:insertsiteresult	file:
inside_tri	iprt3d.c	/^LOCAL int inside_tri(GPT pt, GTRI tri)$/;"	f
install_bdry_corner_crx	imksurf.c	/^LOCAL int install_bdry_corner_crx($/;"	f
install_bdry_objects	imksurf.c	/^LOCAL	boolean install_bdry_objects($/;"	f
install_c_bond_in_curve	isect3d.c	/^LOCAL   C_CURVE	**install_c_bond_in_curve($/;"	f
install_curve_in_surface_bdry	int3d.c	/^EXPORT void install_curve_in_surface_bdry($/;"	f
install_grid_crx	imksurf.c	/^EXPORT	int install_grid_crx($/;"	f
install_grid_crx2d	imkcurve.c	/^LOCAL	int install_grid_crx2d($/;"	f
install_grid_crx_from_comp	imksurf.c	/^LOCAL	int install_grid_crx_from_comp($/;"	f
install_grid_curve_crx_from_comp	imksurf.c	/^LOCAL  int install_grid_curve_crx_from_comp($/;"	f
int	igview.c	4342;"	d	file:
int	igview.c	4352;"	d	file:
int	igview.c	4444;"	d	file:
int	igview.c	4454;"	d	file:
int	igview.c	5814;"	d	file:
int	igview.c	5824;"	d	file:
int	igview.c	6394;"	d	file:
int	igview.c	6404;"	d	file:
int64_t	../util/cdecs.h	/^typedef long long int int64_t;$/;"	t
int_work_vector	../util/ppsub.c	/^LOCAL	int	*int_work_vector($/;"	f
integer_in_list	isub.c	/^EXPORT boolean integer_in_list($/;"	f
interactive_prompting	../util/cdecs.h	533;"	d
interface	int.h	/^	INTERFACE *interface;$/;"	m	struct:_C_CURVE
interface	int.h	/^	struct _INTERFACE *interface;$/;"	m	struct:_CURVE	typeref:struct:_CURVE::_INTERFACE
interface	int.h	/^	struct _INTERFACE *interface;$/;"	m	struct:_HYPER_SURF	typeref:struct:_HYPER_SURF::_INTERFACE
interface	int.h	/^	struct _INTERFACE *interface;$/;"	m	struct:_HYPER_SURF_BDRY	typeref:struct:_HYPER_SURF_BDRY::_INTERFACE
interface	int.h	/^	struct _INTERFACE *interface;$/;"	m	struct:_NODE	typeref:struct:_NODE::_INTERFACE
interface	int.h	/^	struct _INTERFACE *interface;$/;"	m	struct:_POINT	typeref:struct:_POINT::_INTERFACE
interface	int.h	/^	struct _INTERFACE *interface;$/;"	m	struct:_SURFACE	typeref:struct:_SURFACE::_INTERFACE
interface	table.h	/^	INTERFACE 	*interface;	\/* The Associated Interface *\/$/;"	m	struct:Table
interface_number	intfc.c	/^EXPORT	uint64_t interface_number($/;"	f
interface_reconstructed	int.h	458;"	d
interface_table_list	intfc.c	/^EXPORT  struct Table *interface_table_list(void)$/;"	f
interior	int.h	/^	boolean interior;$/;"	m	struct:_TRI
internalerror	triangle.c	/^LOCAL void internalerror(void)$/;"	f
intersect_bond_with_curve_segment	isub.c	/^EXPORT	int intersect_bond_with_curve_segment($/;"	f
intersect_ray_with_boundary	top.c	/^EXPORT	int intersect_ray_with_boundary($/;"	f
intersect_ray_with_curve	top.c	/^EXPORT	int intersect_ray_with_curve($/;"	f
intersect_ray_with_sector	top.c	/^EXPORT	int intersect_ray_with_sector($/;"	f
intersection	iprt3d.c	/^LOCAL int intersection(double x11, double x12, double y11, double y12, double x21, double x22, double y21, double y22, double *t1, double *t2)$/;"	f
intersections	userhooks.c	/^EXPORT	boolean intersections($/;"	f
intfc	geom.h	/^	struct _INTERFACE *intfc;$/;"	m	struct:__anon32	typeref:struct:__anon32::_INTERFACE
intfc	iTaps.h	/^	struct _INTERFACE *intfc;$/;"	m	struct:_FTMESH	typeref:struct:_FTMESH::_INTERFACE
invert_bond	top.c	/^EXPORT	void invert_bond($/;"	f
invert_curve	userhooks.c	/^EXPORT	void invert_curve($/;"	f
invert_tri	top.c	/^EXPORT  void invert_tri($/;"	f
irint	../util/machine.c	/^EXPORT	int irint(double x)$/;"	f
is	int.h	/^        int             is[3];$/;"	m	struct:_BLK_TRI
is_b_on_curve	isub.c	/^EXPORT	boolean is_b_on_curve($/;"	f
is_bdry	int.h	902;"	d
is_bdry_hs	int.h	903;"	d
is_bdry_hsb	int.h	904;"	d
is_binary_output	../util/simpleio.c	/^EXPORT boolean is_binary_output(void)$/;"	f
is_c_on_intfc	isub.c	/^EXPORT  boolean is_c_on_intfc($/;"	f
is_case_b1	iblkb.c	/^LOCAL	boolean is_case_b1(BLK_CRX *blk_crx)$/;"	f
is_case_b2	iblkb.c	/^LOCAL	boolean is_case_b2(BLK_CRX *blk_crx)$/;"	f
is_case_b3	iblkb.c	/^LOCAL	boolean is_case_b3(BLK_CRX *blk_crx)$/;"	f
is_case_b4	iblkb.c	/^LOCAL	boolean is_case_b4(BLK_CRX *blk_crx)$/;"	f
is_closed_curve	int.h	1087;"	d
is_curve	iblkb.c	/^LOCAL   int is_curve($/;"	f
is_curve	iblkc3.c	/^LOCAL	int is_curve($/;"	f
is_curve_crx	imksurf.c	/^EXPORT	boolean is_curve_crx($/;"	f
is_draw_point	iprt3d.c	59;"	d	file:
is_end_on_bdry	int.h	697;"	d
is_end_output	../util/output.c	/^EXPORT boolean is_end_output($/;"	f
is_end_to_edge	int.h	698;"	d
is_end_to_vertex	int.h	699;"	d
is_excluded_comp	comp.c	/^EXPORT	boolean	is_excluded_comp($/;"	f
is_exterior_comp	table.h	226;"	d
is_floating_point	../util/cleanup.c	/^EXPORT	int is_floating_point(double x)$/;"	f
is_identity_matrix	zoom.c	/^LOCAL	boolean is_identity_matrix($/;"	f
is_interior_comp	table.h	229;"	d
is_interior_vertex	map.c	/^LIB_LOCAL boolean is_interior_vertex($/;"	f
is_io_node	../util/cdecs.h	210;"	d
is_new_angle_smaller	geomutils.c	/^EXPORT int is_new_angle_smaller($/;"	f
is_node_of_closed_curve_only	int.h	1092;"	d
is_outside_surface	comp3d.c	/^EXPORT boolean    is_outside_surface($/;"	f
is_outside_surfaces	comp3d.c	/^EXPORT boolean    is_outside_surfaces(INTERFACE *intfc, RECT_GRID *gr)$/;"	f
is_point_a_node_of_curve	trisurf.c	/^LOCAL ORIENTATION is_point_a_node_of_curve($/;"	f
is_point_inside_box	comp3d.c	/^LOCAL  boolean is_point_inside_box($/;"	f
is_positive_bdry_curve	imksurf.c	/^LOCAL	boolean is_positive_bdry_curve($/;"	f
is_positive_curve	iblkc3.c	/^LOCAL	int is_positive_curve($/;"	f
is_pp_node	int.h	985;"	d
is_rotational_symmetry	igrid.c	/^EXPORT	boolean is_rotational_symmetry(void)$/;"	f
is_short_curve	isub.c	/^EXPORT int is_short_curve($/;"	f
is_side01_a_bond	int.h	1197;"	d
is_side12_a_bond	int.h	1198;"	d
is_side20_a_bond	int.h	1199;"	d
is_side_bdry	int.h	1200;"	d
is_start_on_bdry	int.h	691;"	d
is_start_output	../util/output.c	/^EXPORT boolean is_start_output($/;"	f
is_start_to_edge	int.h	692;"	d
is_start_to_vertex	int.h	693;"	d
is_subdomain_boundary	userhooks.c	/^EXPORT	boolean is_subdomain_boundary($/;"	f
is_subdomain_node	userhooks.c	/^EXPORT	boolean is_subdomain_node($/;"	f
is_surface	iblkc3.c	/^EXPORT	int is_surface($/;"	f
is_tangled_polygon	intfc.c	/^LOCAL	boolean is_tangled_polygon($/;"	f
is_tri_in_queue	iredist.c	/^LOCAL boolean is_tri_in_queue($/;"	f
is_tri_in_queue	iredist_o2.c	/^LOCAL   boolean    is_tri_in_queue($/;"	f
is_tri_outside	comp3d.c	/^EXPORT boolean is_tri_outside(INTERFACE *intfc, TRI *t, RECT_GRID *grid)$/;"	f
is_tri_outside_box	comp3d.c	/^EXPORT  boolean is_tri_outside_box(TRI *t, double **fbox)$/;"	f
is_virtual_fixed_node	userhooks.c	/^EXPORT	boolean is_virtual_fixed_node($/;"	f
is_wall_surface	iwallsurf.c	/^EXPORT  boolean  is_wall_surface(SURFACE *s)$/;"	f
isnan	../util/cdecs.h	122;"	d
isnan	../util/cdecs.h	130;"	d
isnan	../util/cdecs.h	134;"	d
isnand	../util/cdecs.h	124;"	d
isnand	../util/cdecs.h	127;"	d
isnanf	../util/cdecs.h	123;"	d
isnanf	../util/cdecs.h	126;"	d
itembytes	triangle.c	/^    size_t    itembytes, itemwords;$/;"	m	struct:memorypool	file:
items	triangle.c	/^    int       items, maxitems;$/;"	m	struct:memorypool	file:
itemsperblock	triangle.c	/^    int       itemsperblock;$/;"	m	struct:memorypool	file:
itemwords	triangle.c	/^    size_t    itembytes, itemwords;$/;"	m	struct:memorypool	file:
itype	../util/cdecs.h	/^	union {int itype; const char *ctype;} type;$/;"	m	union:_Prompt_type::__anon81
ix	imkcurve.c	/^        int             **ix;$/;"	m	struct:_BLK_CRX_2D	file:
ix	int.h	/^        int             ***ix;$/;"	m	struct:_BLK_CRX
ix	int.h	/^        int             ***ix;$/;"	m	struct:_BLK_CRX2
iy	imkcurve.c	/^        int             **iy;$/;"	m	struct:_BLK_CRX_2D	file:
iy	int.h	/^        int             ***iy;$/;"	m	struct:_BLK_CRX
iy	int.h	/^        int             ***iy;$/;"	m	struct:_BLK_CRX2
iz	int.h	/^        int             ***iz;$/;"	m	struct:_BLK_CRX
iz	int.h	/^        int             ***iz;$/;"	m	struct:_BLK_CRX2
join_curves	intfc.c	/^EXPORT CURVE *join_curves($/;"	f
join_surfaces	userhooks.c	/^EXPORT	SURFACE *join_surfaces($/;"	f
l	../util/ppsub.c	/^typedef union _FLI {double f;long l;int i;} FLI;$/;"	m	union:_FLI	file:
label	../util/plotdecs.h	280;"	d
last	../util/output.c	/^	long previous, last;$/;"	m	struct:_WRITE_LIST	file:
last	int.h	/^	BOND *last;$/;"	m	struct:_CURVE
last	int.h	/^	C_BOND	  *last;$/;"	m	struct:_C_CURVE
last	int.h	/^	struct _O_CURVE *last;$/;"	m	struct:_O_CURVE_FAMILY	typeref:struct:_O_CURVE_FAMILY::_O_CURVE
last_chunk	table.h	/^	struct Chunk	*last_chunk;	$/;"	m	struct:Table	typeref:struct:Table::Chunk
last_error	../util/error.c	/^LOCAL struct _Error *last_error = NULL;$/;"	v	typeref:struct:_Error
last_header	../util/vectormalloc.c	/^LOCAL	ALLOC_HEADER	*first_header = NULL, *last_header = NULL;$/;"	v
last_tri	int.h	1167;"	d
lastx	igview.c	/^	int lastx;$/;"	m	struct:DATA	file:
lasty	igview.c	/^	int lasty;$/;"	m	struct:DATA	file:
lbuf	geom.h	/^	int   lbuf[3];	  \/* Lower buffer zone width *\/$/;"	m	struct:_RECT_GRID
lcomp	int.h	/^	COMPONENT          lcomp, ucomp;$/;"	m	struct:_CRXING
lcomp	int.h	/^        COMPONENT       lcomp, ucomp;   \/* add for 2d bond construction *\/$/;"	m	struct:_BBI_POINT2
legendre_poly	ifourier.c	/^EXPORT	double legendre_poly($/;"	f
length	iTaps.h	/^        int length;     \/*in bytes *\/$/;"	m	struct:_FT_ETAG
length	int.h	/^	double length;$/;"	m	struct:_BOND
length	int.h	/^        double           length;$/;"	m	struct:_EDGE
length0	int.h	/^	double length0;			\/* for fixed length bond *\/$/;"	m	struct:_BOND
length_of_tri_side	isub.c	/^EXPORT	double	length_of_tri_side($/;"	f
length_side	isub.c	/^EXPORT	const double	*length_side($/;"	f
level_circle_func	imkcurve.c	/^EXPORT double level_circle_func($/;"	f
level_wave_func	imkcurve.c	/^EXPORT double level_wave_func($/;"	f
level_wave_func_cyl_simple	imkcurve.c	/^EXPORT double level_wave_func_cyl_simple($/;"	f
level_wave_func_cyl_sphere	imkcurve.c	/^EXPORT double level_wave_func_cyl_sphere($/;"	f
level_wave_func_cylindrical	imkcurve.c	/^EXPORT double level_wave_func_cylindrical($/;"	f
line	../util/plotdecs.h	270;"	d
line_3	../util/plotdecs.h	319;"	d
line_func	imkcurve.c	/^LOCAL double line_func($/;"	f
line_number	../util/cdecs.h	/^	int        line_number;$/;"	m	struct:_Error
line_point_projection	comp3d.c	/^EXPORT boolean line_point_projection($/;"	f
line_tri_crossing	comp3d.c	/^EXPORT boolean line_tri_crossing($/;"	f
linemod	../util/plotdecs.h	300;"	d
linfit_lhf_grad_surf_point	isub.c	/^LOCAL void linfit_lhf_grad_surf_point(double *us, int us_dim1, double t1[3], double t2[3], double *nrms, double *ws, double hess[3])$/;"	f
link_neighbor_null_side_tris	itrisset.c	/^EXPORT boolean link_neighbor_null_side_tris($/;"	f
link_neighbor_tris	int3d.c	/^EXPORT boolean link_neighbor_tris($/;"	f
link_tri_list_to_surface	int3d.c	/^EXPORT	void link_tri_list_to_surface($/;"	f
link_tri_to_bond	userhooks.c	/^EXPORT	BOND_TRI *link_tri_to_bond($/;"	f
linking_tris_with_pairs	itrisset.c	/^EXPORT	int	linking_tris_with_pairs($/;"	f
linking_tris_with_pairs_fix	itrisset.c	/^EXPORT	int	linking_tris_with_pairs_fix($/;"	f
lmax	geom.h	/^        int lmax[4][2][3];$/;"	m	struct:_COMM_BOX
lmin	geom.h	/^        int lmin[4][2][3];$/;"	m	struct:_COMM_BOX
lnext	triangle.c	766;"	d	file:
lnextself	triangle.c	770;"	d	file:
local_index	int.h	/^	int local_index;$/;"	m	struct:_POINT
local_index	int.h	/^    	int local_index;$/;"	m	struct:_TRI
locate	triangle.c	/^LOCAL locateresult locate($/;"	f
locateresult	triangle.c	/^enum locateresult {$/;"	g	file:
locateresult	triangle.c	/^typedef enum locateresult locateresult;$/;"	t	typeref:enum:locateresult	file:
locim	igview.c	/^	gdImagePtr locim;$/;"	m	struct:DATA	file:
log1p	../util/machine.c	/^EXPORT	double	log1p(double x)$/;"	f
log_error	../util/error.c	/^EXPORT void log_error($/;"	f
long_alloc_view	../util/vectormalloc.c	/^EXPORT void long_alloc_view($/;"	f
long_component	comp.c	/^EXPORT COMPONENT long_component($/;"	f
long_component2d	comp2d.c	/^LIB_LOCAL COMPONENT long_component2d($/;"	f
long_component3d	comp3d.c	/^LIB_LOCAL COMPONENT long_component3d($/;"	f
long_nearest_interface_point	userhooks.c	/^EXPORT	boolean long_nearest_interface_point($/;"	f
long_nearest_interface_point1d	comp1d.c	/^LIB_LOCAL boolean long_nearest_interface_point1d($/;"	f
long_nearest_interface_point2d	comp2d.c	/^LIB_LOCAL boolean long_nearest_interface_point2d($/;"	f
long_nearest_interface_point3d	comp3d.c	/^LIB_LOCAL boolean long_nearest_interface_point3d($/;"	f
long_nearest_similar_interface_point	userhooks.c	/^EXPORT	boolean long_nearest_similar_interface_point($/;"	f
long_nearest_similar_interface_point2d	comp2d.c	/^LIB_LOCAL boolean long_nearest_similar_interface_point2d($/;"	f
long_nearest_similar_interface_point3d	comp3d.c	/^LIB_LOCAL boolean long_nearest_similar_interface_point3d($/;"	f
long_work_vector	../util/ppsub.c	/^LOCAL	long	*long_work_vector($/;"	f
looped	../util/debug.c	/^static int  looped = 0;$/;"	v	file:
lpoly	geom.h	/^	LEGENDRE_POLY *lpoly;		\/* Legendre Perturbation factors *\/$/;"	m	struct:__anon33
lprev	triangle.c	775;"	d	file:
lprevself	triangle.c	779;"	d	file:
lseg_before_tri	iprt3d.c	/^LOCAL int lseg_before_tri(GLINE lseg, GTRI tri)$/;"	f
lseg_clip	iprt3d.c	/^LOCAL void lseg_clip($/;"	f
lsode	../util/uprotos.h	330;"	d
lx	geom.h	/^        int lx;$/;"	m	struct:_COMM_BOX
ly	geom.h	/^        int ly;$/;"	m	struct:_COMM_BOX
m	geom.h	/^        int m;$/;"	m	struct:__anon50
m_crx	int.h	/^        int             m_crx;      \/* If there are mixed types of $/;"	m	struct:_BLK_CRX2
mag_vector	geomutils.c	/^EXPORT	double mag_vector($/;"	f
magnify	../util/plotdecs.h	331;"	d
main	testintfc.c	/^int main(int argc, char **argv)$/;"	f
make_array_curve	imkcurve.c	/^EXPORT CURVE *make_array_curve($/;"	f
make_bdry_interface	testintfc.c	/^LOCAL 	INTERFACE *make_bdry_interface($/;"	f
make_bdry_surfaces	imksurf.c	/^EXPORT	boolean make_bdry_surfaces($/;"	f
make_bond_comp_lists	comp2d.c	/^EXPORT boolean make_bond_comp_lists($/;"	f
make_bond_lists	comp2d.c	/^LOCAL boolean make_bond_lists($/;"	f
make_c_curve	isect3d.c	/^LOCAL  C_CURVE  *make_c_curve($/;"	f
make_comp3_surfaces	imksurf.c	/^EXPORT boolean make_comp3_surfaces($/;"	f
make_curve	userhooks.c	/^EXPORT	CURVE *make_curve($/;"	f
make_curves_from_blk	imksurf.c	/^EXPORT  int  make_curves_from_blk($/;"	f
make_curves_from_crx	imksurf.c	/^LOCAL	int  make_curves_from_crx($/;"	f
make_ellipsoid_interface	testintfc.c	/^LOCAL 	INTERFACE *make_ellipsoid_interface($/;"	f
make_elliptic_curve	imkcurve.c	/^EXPORT CURVE *make_elliptic_curve($/;"	f
make_elliptic_interface	testintfc.c	/^LOCAL INTERFACE *make_elliptic_interface($/;"	f
make_grid_curves	imkcurve.c	/^LOCAL	void make_grid_curves($/;"	f
make_grid_surfaces	imksurf.c	/^EXPORT	void make_grid_surfaces($/;"	f
make_hyperboloid_interface	testintfc.c	/^LOCAL 	INTERFACE *make_hyperboloid_interface($/;"	f
make_hypersurface	userhooks.c	/^EXPORT	HYPER_SURF *make_hypersurface($/;"	f
make_hypersurface_boundary	userhooks.c	/^EXPORT	HYPER_SURF_BDRY *make_hypersurface_boundary(void)$/;"	f
make_interface	intfc.c	/^EXPORT INTERFACE *make_interface($/;"	f
make_interface_topology_lists	userhooks.c	/^EXPORT	boolean	make_interface_topology_lists($/;"	f
make_level_curves	imkcurve.c	/^EXPORT CURVE **make_level_curves($/;"	f
make_level_surface	imksurf.c	/^EXPORT boolean make_level_surface($/;"	f
make_line_interface	testintfc.c	/^LOCAL INTERFACE *make_line_interface($/;"	f
make_node	userhooks.c	/^EXPORT	NODE *make_node($/;"	f
make_onode	top.c	/^EXPORT O_NODE *make_onode($/;"	f
make_paraboloid_interface	testintfc.c	/^LOCAL 	INTERFACE *make_paraboloid_interface($/;"	f
make_plane_interface	testintfc.c	/^LOCAL 	INTERFACE *make_plane_interface($/;"	f
make_point	userhooks.c	/^EXPORT	POINT *make_point($/;"	f
make_point_comp_lists	comp1d.c	/^EXPORT boolean make_point_comp_lists($/;"	f
make_random_pert_interface	testintfc.c	/^LOCAL 	INTERFACE *make_random_pert_interface($/;"	f
make_surface	userhooks.c	/^EXPORT	SURFACE *make_surface($/;"	f
make_surfaces_from_comp	imksurf.c	/^EXPORT boolean make_surfaces_from_comp($/;"	f
make_surfaces_from_crx	imksurf.c	/^LOCAL	int	make_surfaces_from_crx($/;"	f
make_temp_comp3_interface	testintfc.c	/^LOCAL	INTERFACE *make_temp_comp3_interface($/;"	f
make_tri	userhooks.c	/^EXPORT	TRI	*make_tri($/;"	f
make_tri_comp_lists	comp3d.c	/^EXPORT boolean make_tri_comp_lists($/;"	f
make_tri_lists	comp3d.c	/^LIB_LOCAL boolean make_tri_lists($/;"	f
make_tri_pairs_with_constraint	itrisset.c	/^LOCAL	boolean	make_tri_pairs_with_constraint($/;"	f
makepointmap	triangle.c	/^LOCAL void makepointmap(void)$/;"	f
makeshelle	triangle.c	/^LOCAL void makeshelle(edge *newedge)$/;"	f
maketriangle	triangle.c	/^LOCAL void maketriangle(triedge *newtriedge)$/;"	f
mark	triangle.c	1011;"	d	file:
mark_end_of_bond	comp2d.c	/^LOCAL void mark_end_of_bond(void)$/;"	f
mark_end_of_tri	comp3d.c	2107;"	d	file:
markhull	triangle.c	/^LOCAL void markhull(void)$/;"	f
matchable_comps	top.c	/^LOCAL	boolean	matchable_comps($/;"	f
matrix_T	../util/vmalloc.h	153;"	d
max	../util/cdecs.h	258;"	d
max3	int.h	1010;"	d
max4	int.h	1012;"	d
max_comp	table.h	/^	COMPONENT	max_comp;	\/* Largest COMPONENT value *\/$/;"	m	struct:Table
max_component	table.h	218;"	d
max_cos	int.h	/^        double   cone_ratio, max_cos;$/;"	m	struct:__anon72
max_degree	geom.h	/^	int   max_degree;$/;"	m	struct:__anon31
max_front_speed	testintfc.c	/^LOCAL double max_front_speed($/;"	f
max_n	geom.h	/^        int min_n, max_n;$/;"	m	struct:__anon30
max_ncomps	int.h	/^	int ncomps, max_ncomps;$/;"	m	struct:_COMP_LIST
max_pp_index	table.h	232;"	d
max_pp_indx	table.h	/^	int		max_pp_indx;	\/* Largest pp_index *\/$/;"	m	struct:Table
max_side	itrisset.c	/^	int		max_side;$/;"	m	struct:__anon12	file:
max_size	comp2d.c	/^static	int count,max_size;$/;"	v	file:
max_sqr_area	int.h	/^        double   max_sqr_area;   \/* maximum triangle area        *\/$/;"	m	struct:_TRI_REDIST_PARAMS
max_sqr_length	int.h	/^        double   max_sqr_length; \/* maximun triangle side length *\/$/;"	m	struct:_TRI_REDIST_PARAMS
maxitems	triangle.c	/^    int       items, maxitems;$/;"	m	struct:memorypool	file:
maxx	igview.c	/^	double maxx;$/;"	m	struct:DATA	file:
maxy	igview.c	/^	double maxy;$/;"	m	struct:DATA	file:
memorypool	triangle.c	/^struct memorypool {$/;"	s	file:
memorypool	triangle.c	/^typedef struct memorypool memorypool;$/;"	t	typeref:struct:memorypool	file:
merge_and_delete_nodes	top.c	/^EXPORT	void merge_and_delete_nodes($/;"	f
merge_comp_equiv_lists	iecomps.c	/^LOCAL void merge_comp_equiv_lists($/;"	f
merge_tris_set	itrisset.c	/^EXPORT	int	merge_tris_set($/;"	f
mergehulls	triangle.c	/^LOCAL void mergehulls($/;"	f
mesh_dim	triangle.c	/^LOCAL int mesh_dim;                         \/* Dimension (ought to be 2). *\/$/;"	v
message	../util/cdecs.h	/^	const char *message;$/;"	m	struct:_Error
min	../util/cdecs.h	262;"	d
min3	int.h	1009;"	d
min4	int.h	1011;"	d
min_comp	table.h	/^	COMPONENT	min_comp;	\/* Smallest COMPONENT value *\/$/;"	m	struct:Table
min_component	table.h	220;"	d
min_len	itrisset.c	/^	double		min_len, cen[3];$/;"	m	struct:__anon13	file:
min_n	geom.h	/^        int min_n, max_n;$/;"	m	struct:__anon30
min_sqr_area	int.h	/^        double   min_sqr_area;   \/* minimum triangle area        *\/$/;"	m	struct:_TRI_REDIST_PARAMS
minangle	triangledefs.h	/^    REAL        minangle;$/;"	m	struct:TriangulateOpts
minus1mod3	triangle.c	/^LOCAL int minus1mod3[3] = {2, 0, 1};$/;"	v
minx	igview.c	/^	double minx;$/;"	m	struct:DATA	file:
miny	igview.c	/^	double miny;$/;"	m	struct:DATA	file:
mips_clean_up	../util/cleanup.c	/^LOCAL	Error_handler	mips_clean_up;$/;"	v
mips_clean_up	../util/cleanup.c	/^LOCAL	void	mips_clean_up($/;"	f
mips_exit	../util/cleanup.c	/^LOCAL	Error_handler	mips_exit;$/;"	v
mips_exit	../util/cleanup.c	/^LOCAL	void	mips_exit($/;"	f
mips_fpe_handler	../util/cleanup.c	/^LOCAL	void	mips_fpe_handler($/;"	f
mips_second_clean_up	../util/cleanup.c	/^LOCAL	Error_handler	mips_second_clean_up;$/;"	v
mips_second_clean_up	../util/cleanup.c	/^LOCAL	void	mips_second_clean_up($/;"	f
mkImg	igview.c	/^LOCAL void mkImg($/;"	f
modified	int.h	/^	boolean	modified;	\/* Interface Recently Modified *\/$/;"	m	struct:_INTERFACE
move	../util/plotdecs.h	271;"	d
move_3	../util/plotdecs.h	321;"	d
move_bdry_node	testintfc.c	/^LOCAL void move_bdry_node($/;"	f
move_bound_inside_grid	itrisset.c	/^EXPORT	void	move_bound_inside_grid($/;"	f
move_closed_loop_node	userhooks.c	/^EXPORT	boolean move_closed_loop_node($/;"	f
move_interface	testintfc.c	/^LOCAL void move_interface($/;"	f
mpi_timed_recv	../util/ppsub.c	/^LOCAL	int	mpi_timed_recv($/;"	f
multi_circle_func	imkcurve.c	/^EXPORT double multi_circle_func($/;"	f
multi_ellipsoid_func	imksurf.c	/^LOCAL	double multi_ellipsoid_func($/;"	f
multi_sine_mode_func	imkcurve.c	/^EXPORT double multi_sine_mode_func($/;"	f
n	int.h	/^		NODE	*n;$/;"	m	union:_HYPER_SURF_BDRY::__anon59
n_c_crx	table.h	/^	int       	n_c_crx;         $/;"	m	struct:Table
n_c_fr_pts	table.h	/^	int	  n_c_fr_pts;$/;"	m	struct:Table
n_c_node_points	table.h	/^	int       n_c_node_points;$/;"	m	struct:Table
n_c_reg_nodes	table.h	/^	int       n_c_reg_nodes;       \/* count on aug_comp_grid,$/;"	m	struct:Table
n_c_segs	table.h	/^	int       	n_c_segs;$/;"	m	struct:Table
n_c_tg_pts	table.h	/^	int	  n_c_tg_pts;$/;"	m	struct:Table
n_crx	int.h	/^        int             ***n_crx;   \/* Number of CRX on each grid line, multi $/;"	m	struct:_BLK_CRX2
n_crx	table.h	/^	int		n_crx;$/;"	m	struct:Table
n_curve_crx	table.h	/^        int     n_curve_crx;$/;"	m	struct:Table
n_equiv	int.h	/^        int                     n_equiv;        \/* num elements in *comp *\/$/;"	m	struct:_EQUIV_COMPS
n_max_wedges	int.h	/^	int		n_max_wedges;$/;"	m	struct:_NEIGHBORHOOD
n_pqs_in_blk	arrayutils.c	/^LOCAL	int n_pqs_in_blk = DEFAULT_N_PQS_IN_BLK;$/;"	v
n_queue	arrayutils.c	/^	int n_queue; \/* Number of elements in the list *\/$/;"	m	struct:_PQ_HEADER	file:
n_segs	table.h	/^	int		n_segs;$/;"	m	struct:Table
n_sides	itrisset.c	/^	int		n_sides;$/;"	m	struct:__anon12	file:
n_tris	int.h	/^	int	n_tris;$/;"	m	struct:_WEDGE
n_wedges	int.h	/^	int		n_wedges;$/;"	m	struct:_NEIGHBORHOOD
name	../util/fsort.c	/^	const char *name;$/;"	m	struct:_NAME_LIST	file:
name	../util/vectormalloc.c	/^	const char           *name;$/;"	m	struct:_ALLOC_HEADER	file:
name	iTaps.h	/^        char name[200];$/;"	m	struct:_FT_ETAG
nc	int.h	/^	struct _CURVE	**nc;$/;"	m	struct:_O_NODE	typeref:struct:_O_NODE::_CURVE
ncmp	../util/cdecs.h	/^	int	   ncmp;	\/* # of chars to uniquely identify select *\/$/;"	m	struct:_Prompt_type
ncomps	int.h	/^	int ncomps, max_ncomps;$/;"	m	struct:_COMP_LIST
ncurves	iloc.h	/^	uint64_t **ncurves;    \/* addresses of pos curves on surfaces *\/$/;"	m	struct:__anon51
nd	int.h	/^        TG_PT              *nd;$/;"	m	struct:_CRXING
ne	iloc.h	/^	uint64_t *ns, *ne;	    \/* addresses of start and end nodes *\/$/;"	m	struct:__anon51
nearest_boundary	top.c	/^EXPORT BDRY_SIDE nearest_boundary($/;"	f
nearest_boundary_point	top.c	/^EXPORT void nearest_boundary_point($/;"	f
nearest_interface_point	userhooks.c	/^EXPORT	boolean nearest_interface_point($/;"	f
nearest_interface_point1d	comp1d.c	/^LIB_LOCAL boolean nearest_interface_point1d($/;"	f
nearest_interface_point2d	comp2d.c	/^LIB_LOCAL boolean nearest_interface_point2d($/;"	f
nearest_interface_point3d	comp3d.c	/^LIB_LOCAL boolean nearest_interface_point3d($/;"	f
nearest_interface_point_within_range	userhooks.c	/^EXPORT	boolean nearest_interface_point_within_range($/;"	f
nearest_interface_point_within_range2d	comp2d.c	/^LIB_LOCAL boolean nearest_interface_point_within_range2d($/;"	f
nearest_interface_point_within_range3d	comp3d.c	/^LIB_LOCAL boolean nearest_interface_point_within_range3d($/;"	f
nearest_interior_comp	comp.c	/^EXPORT	COMPONENT nearest_interior_comp($/;"	f
nearest_local_on_front_grid_block	comp3d.c	/^LIB_LOCAL boolean	nearest_local_on_front_grid_block($/;"	f
nearest_on_front_grid_block	comp3d.c	/^LOCAL	void	nearest_on_front_grid_block($/;"	f
nearest_similar_interface_point	userhooks.c	/^EXPORT	boolean nearest_similar_interface_point($/;"	f
nearest_similar_interface_point2d	comp2d.c	/^LIB_LOCAL boolean nearest_similar_interface_point2d($/;"	f
nearest_similar_interface_point3d	comp3d.c	/^LIB_LOCAL boolean nearest_similar_interface_point3d($/;"	f
neg_comp	int.h	/^	COMPONENT pos_comp, neg_comp;$/;"	m	struct:_HYPER_SURF
neg_comp	int.h	/^        COMPONENT       neg_comp;$/;"	m	struct:_BLK_CRX2
neg_curves	int.h	/^	struct _CURVE **neg_curves;	\/* neg orient curves in bdry *\/$/;"	m	struct:_SURFACE	typeref:struct:_SURFACE::_CURVE
neg_surfaces	int.h	/^	struct _SURFACE **neg_surfaces;$/;"	m	struct:_CURVE	typeref:struct:_CURVE::_SURFACE
negative_component	int.h	928;"	d
neighbor	int.h	/^	TRI_NEIGHBOR neighbor[3];$/;"	m	struct:_TRI
neighbor_id	iscatter.c	/^EXPORT	int	neighbor_id($/;"	f
neighborlist	triangledefs.h	/^    int             *neighborlist;                             \/* Out only *\/$/;"	m	struct:triangulateio
neighbors	triangledefs.h	/^    boolean     neighbors;$/;"	m	struct:TriangulateOpts
new_address	int.h	1327;"	d
new_chunk	intfc.c	/^LIB_LOCAL  struct Chunk *new_chunk($/;"	f
new_comp	int.h	/^            COMPONENT  new_comp;$/;"	m	struct:_HYPER_SURF::_DYNAMIC_COMP_CHANGE
new_component	comp.c	/^EXPORT COMPONENT new_component($/;"	f
new_equiv_comps	iecomps.c	/^LOCAL EQUIV_COMPS *new_equiv_comps(void)$/;"	f
new_grid	table.h	/^	boolean		new_grid;	\/* Flags a change of grid. *\/$/;"	m	struct:Table
new_pointer_queue	arrayutils.c	/^LOCAL	POINTER_Q *new_pointer_queue($/;"	f
new_pp_index	int3d.c	/^LOCAL COMPONENT new_pp_index($/;"	f
new_table	intfc.c	/^LOCAL struct Table *new_table($/;"	f
new_tri_is_closer	comp3d.c	/^LOCAL	boolean	new_tri_is_closer($/;"	f
new_tris	isurgery.c	/^  	TRI		**new_tris;$/;"	m	struct:_SURGERY	file:
next	../util/cdecs.h	/^	struct _Error *next;$/;"	m	struct:_Error	typeref:struct:_Error::_Error
next	../util/debug.c	/^	struct entry *next;$/;"	m	struct:entry	typeref:struct:entry::entry	file:
next	../util/fsort.c	/^	struct	_FLIST	*next, *prev;$/;"	m	struct:_FLIST	typeref:struct:_FLIST::_FLIST	file:
next	../util/output.c	/^	long    next, current, prev;$/;"	m	struct:_IOUTPUT	file:
next	../util/output.c	/^	struct _READ_LIST *prev, *next;$/;"	m	struct:_READ_LIST	typeref:struct:_READ_LIST::	file:
next	../util/output.c	/^	struct _WRITE_LIST *prev, *next;$/;"	m	struct:_WRITE_LIST	typeref:struct:_WRITE_LIST::	file:
next	../util/vectormalloc.c	/^	struct _ALLOC_HEADER *prev, *next;$/;"	m	struct:_ALLOC_HEADER	typeref:struct:_ALLOC_HEADER::	file:
next	array.h	/^	struct _POINTER_Q *prev, *next;$/;"	m	struct:_POINTER_Q	typeref:struct:_POINTER_Q::
next	geom.h	/^	struct _RECT_BOX  *next;$/;"	m	struct:_RECT_BOX	typeref:struct:_RECT_BOX::_RECT_BOX
next	int.h	/^	struct	_C_BOND	*next;$/;"	m	struct:_C_BOND	typeref:struct:_C_BOND::_C_BOND
next	int.h	/^	struct _BOND *next;$/;"	m	struct:_BOND	typeref:struct:_BOND::_BOND
next	int.h	/^	struct _Cross *next;$/;"	m	struct:_Cross	typeref:struct:_Cross::_Cross
next	int.h	/^	struct _O_CURVE *next;$/;"	m	struct:_O_CURVE	typeref:struct:_O_CURVE::_O_CURVE
next	int.h	/^	struct _O_NODE	*prev, *next;$/;"	m	struct:_O_NODE	typeref:struct:_O_NODE::
next	int.h	/^	struct _TRI *next;$/;"	m	struct:_TRI	typeref:struct:_TRI::_TRI
next	int.h	/^        struct  _EQUIV_COMPS    *prev, *next;$/;"	m	struct:_EQUIV_COMPS	typeref:struct:_EQUIV_COMPS::
next	int.h	/^        struct _CRXING     *prev, *next;$/;"	m	struct:_CRXING	typeref:struct:_CRXING::
next	setb2d.c	/^	struct _BPOINT *prev, *next;$/;"	m	struct:_BPOINT	typeref:struct:_BPOINT::	file:
next	table.h	/^	struct Chunk 	*next;		\/* Pointer to Next Chunk *\/$/;"	m	struct:Chunk	typeref:struct:Chunk::Chunk
next	table.h	/^	struct Table 	*next; 		\/* Pointer to Next Table *\/$/;"	m	struct:Table	typeref:struct:Table::Table
next	triangle.c	/^    struct PoolBlock *next, *prev;$/;"	m	struct:PoolBlock	typeref:struct:PoolBlock::PoolBlock	file:
next_adjacent	isect3d.c	/^LOCAL   boolean  next_adjacent($/;"	f
next_bond	intfc.c	/^EXPORT boolean next_bond($/;"	f
next_curve	intfc.c	/^EXPORT boolean next_curve($/;"	f
next_hypersurface	userhooks.c	/^EXPORT	boolean next_hypersurface($/;"	f
next_hypersurface1d	intfc.c	/^EXPORT  boolean next_hypersurface1d($/;"	f
next_hypersurface2d	intfc.c	/^LIB_LOCAL	boolean	next_hypersurface2d($/;"	f
next_hypersurface3d	int3d.c	/^LIB_LOCAL	boolean	next_hypersurface3d($/;"	f
next_null_sided_tri	isurgery.c	/^EXPORT int next_null_sided_tri($/;"	f
next_output	../util/output.c	/^EXPORT boolean next_output($/;"	f
next_output_line_containing_string	../util/output.c	/^EXPORT const char *next_output_line_containing_string($/;"	f
next_point	userhooks.c	/^EXPORT	boolean next_point($/;"	f
next_point1d	intfc.c	/^LIB_LOCAL boolean next_point1d($/;"	f
next_point2d	intfc.c	/^LIB_LOCAL boolean next_point2d($/;"	f
next_point3d	int3d.c	/^LIB_LOCAL boolean next_point3d($/;"	f
next_t	int.h	/^			*next_t;$/;"	m	struct:_C_SURF	typeref:struct:_C_SURF::
next_tri	int3d.c	/^EXPORT boolean next_tri($/;"	f
nextitem	triangle.c	/^    void      *nextitem;$/;"	m	struct:memorypool	file:
nextras	triangle.c	/^LOCAL int nextras;                     \/* Number of attributes per point. *\/$/;"	v
nn	int.h	/^	int	nn;		\/* total number of nodes 		*\/	$/;"	m	struct:__anon70
no_bullet	igview.c	/^static boolean no_bullet;$/;"	v	file:
no_topology_lists	table.h	224;"	d
no_tris_on_surface	int.h	1170;"	d
nobisect	triangledefs.h	/^    boolean     nobisect;$/;"	m	struct:TriangulateOpts
nobound	triangledefs.h	/^    boolean     nobound;$/;"	m	struct:TriangulateOpts
node	int.h	/^	struct _NODE	*node;$/;"	m	struct:_O_NODE	typeref:struct:_O_NODE::_NODE
node	setb2d.c	/^	NODE           *node; \/* NULL unless point is on an interior curve *\/$/;"	m	struct:_BPOINT	file:
node_at_point	int.h	103;"	d
node_crx	imkcurve.c	/^        BBI_POINT       *node_crx;$/;"	m	struct:_BLK_CRX_2D	file:
node_crx	imkcurve.c	/^        BBI_POINT ***node_crx;$/;"	m	struct:_EG_CRX_2D	file:
node_crx	int.h	/^        BBI_POINT       *node_crx;$/;"	m	struct:_BLK_CRX
node_crx	int.h	/^        BBI_POINT ****node_crx;$/;"	m	struct:_EG_CRX
node_in_bpoint_list	setb2d.c	/^LOCAL	BPOINT*	node_in_bpoint_list($/;"	f
node_number	../util/fsort.c	/^	int        node_number;$/;"	m	struct:_NAME_LIST	file:
node_number	intfc.c	/^EXPORT	uint64_t node_number($/;"	f
node_of_point	intfc.c	/^EXPORT NODE *node_of_point($/;"	f
nodes	iloc.h	/^	uint64_t *nodes;       \/* addresses of nodes *\/$/;"	m	struct:__anon51
nodes	imkcurve.c	/^        CURVE     **nodes;$/;"	m	struct:_EG_CRX_2D	file:
nodes	int.h	/^	struct _NODE	**nodes;	\/* Pointer to Set of Nodes *\/$/;"	m	struct:_INTERFACE	typeref:struct:_INTERFACE::_NODE
nodwyer	triangledefs.h	/^    boolean     nodwyer;$/;"	m	struct:TriangulateOpts
noelewritten	triangledefs.h	/^    boolean     noelewritten;$/;"	m	struct:TriangulateOpts
noexact	triangledefs.h	/^    boolean     noexact;$/;"	m	struct:TriangulateOpts
noholes	triangledefs.h	/^    boolean     noholes;$/;"	m	struct:TriangulateOpts
noiterationnum	triangledefs.h	/^    boolean     noiterationnum;$/;"	m	struct:TriangulateOpts
nonodewritten	triangledefs.h	/^    boolean     nonodewritten;$/;"	m	struct:TriangulateOpts
nopolywritten	triangledefs.h	/^    boolean     nopolywritten;$/;"	m	struct:TriangulateOpts
nopp	int.h	/^	struct _NODE	**nopp;$/;"	m	struct:_O_NODE	typeref:struct:_O_NODE::_NODE
nor_d2	comp3d.c	/^	double   nor_d2;		\/* Square of distance pt to plane of tri *\/$/;"	m	struct:__anon3	file:
nor_end	int.h	/^	double nor_end[MAXD];$/;"	m	struct:_CURVE
nor_orient	geom.h	/^	ORIENTATION   nor_orient;	\/* Specifies inward or outward normal *\/$/;"	m	struct:__anon33
nor_orient	geom.h	/^        ORIENTATION   nor_orient;       \/* Specifies inward or outward normal *\/        $/;"	m	struct:__anon47
nor_start	int.h	/^	double nor_start[MAXD];$/;"	m	struct:_CURVE
normal_at_point	int.h	1071;"	d
normal_of_plane_surface	trisurf.c	/^LOCAL void normal_of_plane_surface($/;"	f
normal_unset	int.h	/^	boolean	normal_unset;	\/* Normal unset since last modify *\/$/;"	m	struct:_INTERFACE
normalize	iprt3d.c	/^LOCAL void normalize(GPT *v)$/;"	f
normalized_angle	geomutils.c	/^EXPORT  double  normalized_angle($/;"	f
normlist	triangledefs.h	/^    REAL            *normlist;   \/* Used only with Voronoi diagram; out only *\/$/;"	m	struct:triangulateio
not_int	igview.c	4343;"	d	file:
not_int	igview.c	4353;"	d	file:
not_int	igview.c	4445;"	d	file:
not_int	igview.c	4455;"	d	file:
not_int	igview.c	5815;"	d	file:
not_int	igview.c	5825;"	d	file:
not_int	igview.c	6395;"	d	file:
not_int	igview.c	6405;"	d	file:
nowblock	triangle.c	/^    PoolBlock *firstblock, *nowblock, *pathblock;$/;"	m	struct:memorypool	file:
np_do_n_curs	table.h	/^	int		np_do_n_curs;	\/* Used by next_point3d() *\/$/;"	m	struct:Table
np_do_p_curs	table.h	/^	int		np_do_p_curs;	\/* Used by next_point3d() *\/$/;"	m	struct:Table
nprintf	../util/navdecs.h	231;"	d
npt	int.h	/^	int     npt;$/;"	m	struct:_Cross
ns	iloc.h	/^	uint64_t *ns, *ne;	    \/* addresses of start and end nodes *\/$/;"	m	struct:__anon51
nsurfs	iloc.h	/^	uint64_t **nsurfs;     \/* addresses of neg surfaces on curves *\/$/;"	m	struct:__anon51
nu	geom.h	/^	double **nu;$/;"	m	struct:__anon30
null_side_tris_loop	itrisset.c	/^LOCAL	boolean null_side_tris_loop($/;"	f
null_sides_are_consistent	icheck3d.c	/^EXPORT	void	null_sides_are_consistent(void)$/;"	f
null_tri_array_numbers	int3d.c	/^EXPORT void null_tri_array_numbers($/;"	f
num_aligns	../util/cdecs.h	152;"	d
num_bonds	iloc.h	/^	int      *num_bonds;   \/* number of bonds on curves *\/$/;"	m	struct:__anon51
num_bonds	int.h	/^        int             num_bonds[4];$/;"	m	struct:_BLK_BOND
num_c	int.h	/^	int		num_c;$/;"	m	struct:_O_NODE
num_chunks	table.h	/^	int		num_chunks;	\/* Number of allocated chunks *\/$/;"	m	struct:Table
num_cir	geom.h	/^	int num_cir;$/;"	m	struct:__anon46
num_comps	imkcurve.c	/^        int             num_comps;$/;"	m	struct:_BLK_CRX_2D	file:
num_comps	int.h	/^        int             num_comps; $/;"	m	struct:_BLK_CRX2
num_comps	int.h	/^        int             num_comps;$/;"	m	struct:_BLK_CRX
num_cross	geom.h	/^	int num_cross;$/;"	m	struct:_RECT_BOX
num_curves	iloc.h	/^	int      num_curves;   \/* number of curves *\/$/;"	m	struct:__anon51
num_curves	int.h	/^        int             num_curves; \/* Number of curves inside this blk *\/$/;"	m	struct:_BLK_CRX2
num_curves	int.h	/^        int             num_curves;$/;"	m	struct:_BLK_BOND
num_curves	int.h	/^        int             num_curves;$/;"	m	struct:_BLK_INFO
num_curves	int.h	/^        int             num_curves;$/;"	m	struct:_BLK_TRI
num_curves	int.h	/^        int       num_curves;$/;"	m	struct:_EG_CRX
num_curves_at_node	top.c	/^EXPORT int num_curves_at_node($/;"	f
num_ellip	geom.h	/^        int           num_ellip;$/;"	m	struct:__anon47
num_errors	../util/error.c	/^LOCAL int num_errors = 0;$/;"	v
num_modes	geom.h	/^	int   num_modes;$/;"	m	struct:__anon30
num_ncurves	iloc.h	/^	int      *num_ncurves; \/* number of pos curves on surfaces *\/$/;"	m	struct:__anon51
num_nodes	iloc.h	/^	int      num_nodes;    \/* number of nodes *\/$/;"	m	struct:__anon51
num_nodes	imkcurve.c	/^        int       num_nodes;$/;"	m	struct:_EG_CRX_2D	file:
num_nsurfs	iloc.h	/^	int      *num_nsurfs;  \/* number of neg surfaces on curves *\/$/;"	m	struct:__anon51
num_null_sides	int.h	/^        int             num_null_sides[8];$/;"	m	struct:_BLK_TRI
num_of_bonds	table.h	/^	int		**num_of_bonds;	\/* Number BONDS in each Grid Block *\/$/;"	m	struct:Table
num_of_debug_names	../util/debug.c	183;"	d	file:
num_of_points	table.h	/^	int             *num_of_points; \/* Number POINTS in each Grid zone *\/$/;"	m	struct:Table
num_of_tris	table.h	/^	int		***num_of_tris;	\/* Number TRIS in each Grid Block *\/$/;"	m	struct:Table
num_pcurves	iloc.h	/^	int      *num_pcurves; \/* number of pos curves on surfaces *\/$/;"	m	struct:__anon51
num_physical_sectors	cross2d.c	/^LOCAL int num_physical_sectors($/;"	f
num_points	int.h	/^	int		num_points;	\/* Total from curves *\/$/;"	m	struct:_INTERFACE
num_points	int.h	/^	int	  num_points;$/;"	m	struct:_C_CURVE
num_points	int.h	/^	int num_points;$/;"	m	struct:_CURVE
num_points_on_curve	top.c	/^EXPORT	int num_points_on_curve($/;"	f
num_psurfs	iloc.h	/^	int      *num_psurfs;  \/* number of pos surfaces on curves *\/$/;"	m	struct:__anon51
num_surfaces	iloc.h	/^	int      num_surfaces; \/* number of surfaces *\/$/;"	m	struct:__anon51
num_surfaces	int.h	/^	int	  num_surfaces;$/;"	m	struct:_EG_CRX
num_surfaces	int.h	/^        int             num_surfaces;$/;"	m	struct:_BLK_TRI
num_surfs	iloc.h	/^	int      *num_surfs;   \/* number of surfaces on curves *\/$/;"	m	struct:__anon51
num_surfs	int.h	/^        int             num_surfs;$/;"	m	struct:_BLK_INFO
num_tri	int.h	/^	int num_tri;$/;"	m	struct:_SURFACE
num_tri	iprt3d.c	/^LOCAL int num_tri = 0;$/;"	v
num_tris	int.h	/^	int num_tris;$/;"	m	struct:_POINT
num_tris	int.h	/^        int             num_tris[8];$/;"	m	struct:_BLK_TRI
num_tris	isub.c	/^	int	num_tris;$/;"	m	struct:_TRI_LIST_AT_VERTEX	file:
num_waves	int.h	/^        int             num_waves;  \/* The number of different waves inside $/;"	m	struct:_BLK_CRX2
number	../util/cdecs.h	/^	int        number;$/;"	m	struct:_Error
number	int.h	/^	int	number;$/;"	m	struct:_CURVE
number	int.h	/^	int number;$/;"	m	struct:_SURFACE
number_of_labeled_components	table.h	215;"	d
number_of_stitches	isurgery.c	/^  	int	number_of_stitches;$/;"	m	struct:_SEAM	file:
numbernodes	triangle.c	/^LOCAL void numbernodes(void)$/;"	f
numberofcorners	triangledefs.h	/^    int             numberofcorners;                           \/* In \/ out *\/$/;"	m	struct:triangulateio
numberofedges	triangledefs.h	/^    long            numberofedges;                              \/* Out only *\/$/;"	m	struct:triangulateio
numberofholes	triangledefs.h	/^    int             numberofholes;                      \/* In \/ copied out *\/$/;"	m	struct:triangulateio
numberofpointattributes	triangledefs.h	/^    int             numberofpointattributes;                  \/* In \/ out *\/$/;"	m	struct:triangulateio
numberofpoints	triangledefs.h	/^    int             numberofpoints;                           \/* In \/ out *\/$/;"	m	struct:triangulateio
numberofregions	triangledefs.h	/^    int             numberofregions;                     \/* In \/ copied out *\/$/;"	m	struct:triangulateio
numberofsegments	triangledefs.h	/^    long            numberofsegments;                          \/* In \/ out *\/$/;"	m	struct:triangulateio
numberoftriangleattributes	triangledefs.h	/^    int             numberoftriangleattributes;                \/* In \/ out *\/$/;"	m	struct:triangulateio
numberoftriangles	triangledefs.h	/^    int             numberoftriangles;                         \/* In \/ out *\/$/;"	m	struct:triangulateio
nv	imkcurve.c	/^        int             nv[4];$/;"	m	struct:_BLK_CRX_2D	file:
nv	int.h	/^        int             nv[8];$/;"	m	struct:_BLK_CRX
obj	iTaps.h	/^        } obj;$/;"	m	struct:_FTEHANDLE	typeref:union:_FTEHANDLE::__anon74
obj	int.h	/^	struct _CURVE *obj;	\/* refers back to curve, see boundary macro *\/$/;"	m	struct:_CURVE	typeref:struct:_CURVE::_CURVE
obj	int.h	/^	struct _NODE *obj;	\/* refers back to node, see boundary macro *\/$/;"	m	struct:_NODE	typeref:struct:_NODE::_NODE
obj	int.h	/^	struct _POINT *obj;	\/* refers back to point, see boundary macro *\/$/;"	m	struct:_POINT	typeref:struct:_POINT::_POINT
obj	int.h	/^	struct _SURFACE *obj;	\/* refers back to surface, see boundary macro *\/$/;"	m	struct:_SURFACE	typeref:struct:_SURFACE::_SURFACE
obj	int.h	/^	} obj;$/;"	m	struct:_HYPER_SURF	typeref:union:_HYPER_SURF::__anon58
obj	int.h	/^	} obj;$/;"	m	struct:_HYPER_SURF_BDRY	typeref:union:_HYPER_SURF_BDRY::__anon59
oblique_planar_surface_triangulation	trisurf.c	/^EXPORT	void	oblique_planar_surface_triangulation($/;"	f
obtain_orthbases	isub.c	/^LOCAL void obtain_orthbases($/;"	f
old_tri_on_edge	comp3d.c	/^LOCAL	boolean old_tri_on_edge($/;"	f
old_tri_on_vertex	comp3d.c	/^LOCAL	boolean old_tri_on_vertex($/;"	f
omit_vertex_in_plane_fit	isub.c	/^EXPORT	void	omit_vertex_in_plane_fit(void)$/;"	f
on_front_block2d	comp2d.c	/^LOCAL	boolean on_front_block2d($/;"	f
onext	triangle.c	786;"	d	file:
onextself	triangle.c	790;"	d	file:
onfront_block	imksurf.c	/^EXPORT	boolean onfront_block($/;"	f
onfront_block2d	imkcurve.c	/^LOCAL	boolean onfront_block2d($/;"	f
opaque_pointer	int.h	105;"	d
open_3d_plot_file	iprt3d.c	/^LOCAL   void open_3d_plot_file(void)$/;"	f
open_close_file	../util/output.c	/^EXPORT	const IO_TYPE *open_close_file($/;"	f
openpl	../util/plotdecs.h	264;"	d
oprev	triangle.c	798;"	d	file:
oprevself	triangle.c	802;"	d	file:
order	../util/vectormalloc.c	/^	unsigned int         order;$/;"	m	struct:_ALLOC_HEADER	file:
order	int.h	/^	int order;		\/* used as an identification for a tri, avoid $/;"	m	struct:_TRI
order	int.h	/^            int         order;$/;"	m	union:_POINT::__anon53
order	triangle.c	/^LOCAL int order;$/;"	v
order	triangledefs.h	/^    int         order;$/;"	m	struct:TriangulateOpts
order_data	int.h	/^        } order_data;$/;"	m	struct:_POINT	typeref:union:_POINT::__anon53
order_interface	intfc.c	/^EXPORT	void	order_interface($/;"	f
ordinal_suffix	../util/other.c	/^EXPORT	const char *ordinal_suffix($/;"	f
org	triangle.c	861;"	d	file:
orient	int.h	/^	ORIENTATION	*orient;$/;"	m	struct:_O_NODE
orient	int.h	/^	ORIENTATION	orient;$/;"	m	struct:_O_SURFACE
orient	int.h	/^	ORIENTATION     orient;$/;"	m	struct:_BOND_TRI
orient	int.h	/^	ORIENTATION orient;$/;"	m	struct:_O_CURVE
orient	itrisset.c	/^	ORIENTATION	orient;$/;"	m	struct:__anon12	file:
orient	triangle.c	/^    int orient;                                       \/* Ranges from 0 to 2. *\/$/;"	m	struct:triedge	file:
orientation	int.h	/^	int orientation;	\/* Orientation of closed curve *\/$/;"	m	struct:_CURVE
orientation_name	geomutils.c	/^EXPORT const char *orientation_name($/;"	f
orientation_of_bond_at_tri	intfc.c	/^EXPORT	ORIENTATION orientation_of_bond_at_tri($/;"	f
out_curves	int.h	/^	struct _CURVE **out_curves;	\/* Pointer to Set of Out Curves *\/$/;"	m	struct:_NODE	typeref:struct:_NODE::_CURVE
out_of_limit	iprt3d.c	/^LOCAL int out_of_limit(GLINE lseg, GTRI tri)$/;"	f
output	../util/output.c	/^EXPORT boolean output(void)$/;"	f
output_blocked	../util/output.c	/^	boolean    output_blocked;$/;"	m	struct:_IOUTPUT	file:
outside_point	geomutils.c	/^EXPORT	int outside_point($/;"	f
p	int.h	/^		POINT	*p;$/;"	m	union:_HYPER_SURF::__anon58
p	int.h	/^	POINT	*p;$/;"	m	struct:_BBI_POINT
p	int.h	/^	POINT *p;		\/* Intersection POINT *\/$/;"	m	struct:_Cross
p	int.h	/^        POINT           *p;$/;"	m	struct:_BBI_POINT2
p	isub.c	/^	POINT	*p;$/;"	m	struct:_TRI_LIST_AT_VERTEX	file:
p1	comp3d.c	/^	POINT   *pv, *p1, *p2;	\/* Vertices marking boundary closest to pt *\/$/;"	m	struct:__anon3	file:
p2	comp3d.c	/^	POINT   *pv, *p1, *p2;	\/* Vertices marking boundary closest to pt *\/$/;"	m	struct:__anon3	file:
p2_indx	arrayutils.c	/^	int p2_indx; \/* Index of next free block in pointer storage list *\/$/;"	m	struct:_PQ_HEADER	file:
p2str	arrayutils.c	/^	POINTER_Q *p2str;  \/* Linked list of storage blocks for pointer *\/$/;"	m	struct:_PQ_HEADER	file:
p2sz	arrayutils.c	/^	size_t p2sz; \/* Size of structure to which pointer points *\/$/;"	m	struct:_PQ_HEADER	file:
p2sz	arrayutils.c	/^LOCAL	size_t p2sz = 0;$/;"	v
pADD_TO_DEBUG	../util/navdecs.h	100;"	d
pADD_TO_DEBUG_CNT	../util/navdecs.h	112;"	d
pADD_TO_DEBUG_STRING	../util/navdecs.h	138;"	d
pBLACK	int.h	/^	pBLACK   = 0,$/;"	e	enum:_SURFACE_COLOR
pBLUE	int.h	/^	pBLUE	 = 2,$/;"	e	enum:_SURFACE_COLOR
pBRIEFLY	../util/navdecs.h	93;"	d
pBRIEFLY_CNT	../util/navdecs.h	106;"	d
pCYAN	int.h	/^	pCYAN	 = 6,$/;"	e	enum:_SURFACE_COLOR
pC_COUNT	../util/navdecs.h	114;"	d
pDEPTH_LIMITING	../util/navdecs.h	98;"	d
pDETAILS	../util/navdecs.h	95;"	d
pDETAILS_CNT	../util/navdecs.h	108;"	d
pENTER	../util/navdecs.h	78;"	d
pEXPLAIN	../util/navdecs.h	96;"	d
pEXPLAIN_CNT	../util/navdecs.h	109;"	d
pFLOAT0	../util/navdecs.h	128;"	d
pFLOAT1	../util/navdecs.h	129;"	d
pFLOAT2	../util/navdecs.h	130;"	d
pFORCE	../util/navdecs.h	99;"	d
pFORCE_CNT	../util/navdecs.h	111;"	d
pGREEN	int.h	/^	pGREEN	 = 4,$/;"	e	enum:_SURFACE_COLOR
pINIT	../util/navdecs.h	77;"	d
pINT0	../util/navdecs.h	118;"	d
pINT1	../util/navdecs.h	119;"	d
pINTEGER0	../util/navdecs.h	123;"	d
pINTEGER1	../util/navdecs.h	124;"	d
pLEAVE	../util/navdecs.h	79;"	d
pLIMIT	../util/navdecs.h	82;"	d
pLIMIT_CNT	../util/navdecs.h	116;"	d
pLIMIT_VALUE	../util/navdecs.h	115;"	d
pLOOK	../util/navdecs.h	87;"	d
pMAGENTA	int.h	/^	pMAGENTA = 3,$/;"	e	enum:_SURFACE_COLOR
pNAVIGATE	../util/navdecs.h	97;"	d
pNAVIGATE_CNT	../util/navdecs.h	110;"	d
pPOINTER	../util/navdecs.h	134;"	d
pPRINT_STACK	../util/navdecs.h	83;"	d
pRED	int.h	/^	pRED	 = 1,$/;"	e	enum:_SURFACE_COLOR
pREMOVE_FROM_DEBUG	../util/navdecs.h	101;"	d
pREMOVE_FROM_DEBUG_CNT	../util/navdecs.h	113;"	d
pREMOVE_FROM_DEBUG_STRING	../util/navdecs.h	139;"	d
pSPACE	../util/navdecs.h	81;"	d
pSTART	../util/navdecs.h	89;"	d
pSTATIC	../util/navdecs.h	80;"	d
pSTOP	../util/navdecs.h	88;"	d
pSTRING_BUG	../util/navdecs.h	140;"	d
pSUMMARY	../util/navdecs.h	94;"	d
pSUMMARY_CNT	../util/navdecs.h	107;"	d
pSUPPRESS	../util/navdecs.h	102;"	d
pSUPPRESS_CNT	../util/navdecs.h	117;"	d
pWHITE	int.h	/^	pWHITE	 = 7$/;"	e	enum:_SURFACE_COLOR
pYELLOW	int.h	/^	pYELLOW	 = 5,$/;"	e	enum:_SURFACE_COLOR
p_closest	comp2d.c	/^LOCAL	POINT	*p_closest = NULL;$/;"	v
paraboloid_func	imksurf.c	/^LOCAL	double paraboloid_func($/;"	f
paraboloid_func	testintfc.c	/^LOCAL	double paraboloid_func($/;"	f
parsecommandline	triangle.c	/^LOCAL void parsecommandline($/;"	f
patch_bdry	int_amr.h	/^        int             patch_bdry;$/;"	m	struct:_PATCH_BDRY_FLAG
pathblock	triangle.c	/^    PoolBlock *firstblock, *nowblock, *pathblock;$/;"	m	struct:memorypool	file:
pathitem	triangle.c	/^    void      *pathitem;$/;"	m	struct:memorypool	file:
pathitemsleft	triangle.c	/^    int       pathitemsleft;$/;"	m	struct:memorypool	file:
pcurves	iloc.h	/^	uint64_t **pcurves;    \/* addresses of pos curves on surfaces *\/$/;"	m	struct:__anon51
phase	geom.h	/^	double *A, *phase;$/;"	m	struct:__anon30
phase	testintfc.c	/^	double phase;$/;"	m	struct:_SINE_MOTION_PARAMS	file:
phi	geom.h	/^        double phi;$/;"	m	struct:__anon50
pindent	../util/navdecs.h	230;"	d
pindent	../util/navdecs.h	73;"	d
pl	int.h	/^	POINTER pl, pr;$/;"	m	struct:_P_LINK
plague	triangle.c	/^LOCAL void plague(void)$/;"	f
planar_hole_surface_triangulation	trisurf.c	/^EXPORT	void	planar_hole_surface_triangulation($/;"	f
planar_surface_triangulation	trisurf.c	/^EXPORT  void  planar_surface_triangulation($/;"	f
plane_fit_normal3d	isub.c	/^EXPORT  void plane_fit_normal3d($/;"	f
plane_fit_normal3d_along_wall	isub.c	/^EXPORT  void plane_fit_normal3d_along_wall($/;"	f
plane_func	imksurf.c	/^EXPORT	double plane_func($/;"	f
plane_of_tri	itrisset.c	/^EXPORT	void	plane_of_tri($/;"	f
plane_segments_cross	isect3d.c	/^LOCAL	boolean plane_segments_cross($/;"	f
plane_side_intersection	itrisset.c	/^EXPORT	boolean plane_side_intersection($/;"	f
plot_interface	top.c	/^EXPORT	void plot_interface($/;"	f
plotfile	iprt3d.c	/^LOCAL FILE *plotfile = NULL;$/;"	v
plus1mod3	triangle.c	/^LOCAL int plus1mod3[3] = {1, 2, 0};$/;"	v
point	../util/plotdecs.h	283;"	d
point	iTaps.h	/^            struct _POINT *point;$/;"	m	union:_FTEHANDLE::__anon74	typeref:struct:_FTEHANDLE::__anon74::_POINT
point	triangle.c	/^typedef double *point;$/;"	t	file:
point2tri	triangle.c	1082;"	d	file:
point2triindex	triangle.c	/^LOCAL size_t point2triindex;\/* Index to find a triangle adjacent to a point. *\/$/;"	v
point_before_tri	iprt3d.c	/^LOCAL int point_before_tri(GPT pt, GTRI tri)$/;"	f
point_in_buffer	igrid.c	/^EXPORT boolean point_in_buffer($/;"	f
point_in_crx_tri	itrisset.c	/^EXPORT	boolean point_in_crx_tri($/;"	f
point_in_rect	itrisset.c	/^EXPORT boolean point_in_rect($/;"	f
point_is_in_tri	itrisset.c	/^boolean	point_is_in_tri($/;"	f
point_number	intfc.c	/^EXPORT	uint64_t point_number($/;"	f
point_tri_crossing	comp3d.c	/^LOCAL  boolean point_tri_crossing($/;"	f
point_tri_store	int.h	/^	struct	_TRI	**point_tri_store;$/;"	m	struct:_INTERFACE	typeref:struct:_INTERFACE::_TRI
point_within_range	ixgraph.c	/^EXPORT	boolean point_within_range($/;"	f
pointattributelist	triangledefs.h	/^    REAL            *pointattributelist;                      \/* In \/ out *\/$/;"	m	struct:triangulateio
pointdealloc	triangle.c	/^LOCAL void pointdealloc(point dyingpoint)$/;"	f
pointer	array.h	/^	POINTER pointer;$/;"	m	struct:_POINTER_Q
pointer_in_list	isub.c	/^EXPORT boolean pointer_in_list(         $/;"	f
pointer_is_in_array	array.h	50;"	d
pointlist	triangledefs.h	/^    REAL            *pointlist;                               \/* In \/ out *\/$/;"	m	struct:triangulateio
pointmark	triangle.c	1077;"	d	file:
pointmarkerlist	triangledefs.h	/^    int             *pointmarkerlist;                         \/* In \/ out *\/$/;"	m	struct:triangulateio
pointmarkindex	triangle.c	/^LOCAL size_t pointmarkindex; \/* Index to find boundary marker of a point. *\/$/;"	v
pointmedian	triangle.c	/^LOCAL void pointmedian($/;"	f
points	int.h	/^	struct _POINT	**points; \/* Pointer to Set of Points *\/$/;"	m	struct:_INTERFACE	typeref:struct:_INTERFACE::_POINT
points	iprt3d.c	/^	GPT points[2];$/;"	m	struct:__anon8	file:
points	iprt3d.c	/^	GPT points[3];$/;"	m	struct:__anon7	file:
points	triangle.c	/^LOCAL memorypool points;$/;"	v
points_in_strict_order	top.c	/^EXPORT boolean points_in_strict_order($/;"	f
points_of_interface	idiagnostic.c	/^EXPORT 	void 	points_of_interface($/;"	f
points_on_surface	idiagnostic.c	/^EXPORT  int 	points_on_surface($/;"	f
pointsort	triangle.c	/^LOCAL void pointsort($/;"	f
pointtraverse	triangle.c	/^LOCAL point pointtraverse(void)$/;"	f
poly	triangledefs.h	/^    boolean     poly;$/;"	m	struct:TriangulateOpts
polyfit2d_interp_edge	iredist_o2.c	/^void  polyfit2d_interp_edge($/;"	f
polyfit2d_interp_vertex	iredist_o2.c	/^void  polyfit2d_interp_vertex($/;"	f
polyfit2d_lhf	isub.c	/^LOCAL void polyfit2d_lhf($/;"	f
polyfit3d_lhf	isub.c	/^LOCAL void  polyfit3d_lhf($/;"	f
polyfit3d_walf_edge	iredist_o2.c	/^void  polyfit3d_walf_edge($/;"	f
polyfit3d_walf_vertex	iredist_o2.c	/^void  polyfit3d_walf_vertex($/;"	f
polygon	../util/plotdecs.h	273;"	d
polygon_3	../util/plotdecs.h	324;"	d
poolalloc	triangle.c	/^LOCAL void *poolalloc($/;"	f
pooldealloc	triangle.c	/^LOCAL void pooldealloc($/;"	f
pooldeinit	triangle.c	/^LOCAL void pooldeinit($/;"	f
poolinit	triangle.c	/^LOCAL void poolinit($/;"	f
poolrestart	triangle.c	/^LOCAL void poolrestart($/;"	f
pos_comp	int.h	/^	COMPONENT pos_comp, neg_comp;$/;"	m	struct:_HYPER_SURF
pos_comp	int.h	/^        COMPONENT       pos_comp;$/;"	m	struct:_BLK_CRX2
pos_curves	int.h	/^	struct _CURVE **pos_curves;	\/* pos orient curves in bdry *\/$/;"	m	struct:_SURFACE	typeref:struct:_SURFACE::_CURVE
pos_surfaces	int.h	/^	struct _SURFACE **pos_surfaces;$/;"	m	struct:_CURVE	typeref:struct:_CURVE::_SURFACE
positive_component	int.h	927;"	d
posn	int.h	/^	POINT *posn;$/;"	m	struct:_NODE
posn	int.h	/^	struct  _POINT	*posn;$/;"	m	struct:_NEIGHBORHOOD	typeref:struct:_NEIGHBORHOOD::_POINT
posn	setb2d.c	/^	POINT          *posn; \/* Location of the point *\/$/;"	m	struct:_BPOINT	file:
pp_abort	../util/ppsub.c	/^EXPORT	void pp_abort($/;"	f
pp_all_gather	../util/cdecs.h	242;"	d
pp_bcast	../util/cdecs.h	245;"	d
pp_comm_split	../util/ppsub.c	/^EXPORT   int     pp_comm_split($/;"	f
pp_f_allgatherv	../util/ppsub.c	/^EXPORT	void	pp_f_allgatherv($/;"	f
pp_finalize	../util/ppsub.c	/^EXPORT	int	pp_finalize(void)$/;"	f
pp_global_imax	../util/ppsub.c	/^EXPORT	void	pp_global_imax($/;"	f
pp_global_imin	../util/ppsub.c	/^EXPORT	void	pp_global_imin($/;"	f
pp_global_ior	../util/ppsub.c	/^EXPORT	void	pp_global_ior($/;"	f
pp_global_isum	../util/ppsub.c	/^EXPORT	void	pp_global_isum($/;"	f
pp_global_lmax	../util/ppsub.c	/^EXPORT	void	pp_global_lmax($/;"	f
pp_global_lmin	../util/ppsub.c	/^EXPORT	void	pp_global_lmin($/;"	f
pp_global_lor	../util/ppsub.c	/^EXPORT	void	pp_global_lor($/;"	f
pp_global_lsum	../util/ppsub.c	/^EXPORT	void	pp_global_lsum($/;"	f
pp_global_max	../util/ppsub.c	/^EXPORT	void	pp_global_max($/;"	f
pp_global_min	../util/ppsub.c	/^EXPORT	void	pp_global_min($/;"	f
pp_global_status	../util/ppsub.c	/^EXPORT	boolean	pp_global_status($/;"	f
pp_global_sum	../util/ppsub.c	/^EXPORT	void	pp_global_sum($/;"	f
pp_grid_set	int.h	1370;"	d
pp_gsync	../util/ppsub.c	/^EXPORT	void	pp_gsync(void)$/;"	f
pp_index	int.h	/^	int pp_index;  \/* Identifies families of connected hypersurfaces *\/$/;"	m	struct:_HYPER_SURF
pp_init	../util/ppsub.c	/^EXPORT	int	pp_init($/;"	f
pp_iprobe	../util/ppsub.c	/^EXPORT	boolean	pp_iprobe($/;"	f
pp_iprobe_any	../util/ppsub.c	/^EXPORT	boolean	pp_iprobe_any($/;"	f
pp_irecv	../util/cdecs.h	233;"	d
pp_isend	../util/cdecs.h	224;"	d
pp_l_allgather	../util/ppsub.c	/^EXPORT	void	pp_l_allgather($/;"	f
pp_max_status	../util/ppsub.c	/^EXPORT	boolean	pp_max_status($/;"	f
pp_min_status	../util/ppsub.c	/^EXPORT	boolean	pp_min_status($/;"	f
pp_mynode	../util/ppsub.c	/^EXPORT	int	pp_mynode(void)$/;"	f
pp_numnodes	../util/ppsub.c	/^EXPORT	int	pp_numnodes(void)$/;"	f
pp_okay_to_proceed	../util/ppsub.c	/^LOCAL	void	pp_okay_to_proceed($/;"	f
pp_recv	../util/cdecs.h	236;"	d
pp_recv_any	../util/cdecs.h	239;"	d
pp_send	../util/cdecs.h	227;"	d
pp_send_all	../util/cdecs.h	230;"	d
pp_test	../util/ppsub.c	/^EXPORT	boolean pp_test($/;"	f
pp_wait	../util/ppsub.c	/^EXPORT	void pp_wait($/;"	f
pq_alloc_type	arrayutils.c	/^LOCAL	PQ_ALLOCATOR pq_alloc_type = DEFAULT_ALLOC;$/;"	v
pq_block_size	arrayutils.c	482;"	d	file:
pq_header	arrayutils.c	/^	PQ_HEADER *pq_header; \/* Private part of POINTER_Q structure *\/$/;"	m	struct:_PTR_LIST	file:
pq_indx	arrayutils.c	/^	int pq_indx; \/* Index of next free block in POINTER_Q storage list *\/$/;"	m	struct:_PQ_HEADER	file:
pq_str	arrayutils.c	/^	POINTER_Q *pq_str; \/* Linked list of POINTER_Q storage blocks *\/$/;"	m	struct:_PQ_HEADER	file:
pr	int.h	/^	POINTER pl, pr;$/;"	m	struct:_P_LINK
preciselocate	triangle.c	/^LOCAL locateresult preciselocate($/;"	f
prev	../util/debug.c	/^	struct entry *prev;$/;"	m	struct:entry	typeref:struct:entry::entry	file:
prev	../util/fsort.c	/^	struct	_FLIST	*next, *prev;$/;"	m	struct:_FLIST	typeref:struct:_FLIST::	file:
prev	../util/output.c	/^	long    next, current, prev;$/;"	m	struct:_IOUTPUT	file:
prev	../util/output.c	/^	struct _READ_LIST *prev, *next;$/;"	m	struct:_READ_LIST	typeref:struct:_READ_LIST::_READ_LIST	file:
prev	../util/output.c	/^	struct _WRITE_LIST *prev, *next;$/;"	m	struct:_WRITE_LIST	typeref:struct:_WRITE_LIST::_WRITE_LIST	file:
prev	../util/vectormalloc.c	/^	struct _ALLOC_HEADER *prev, *next;$/;"	m	struct:_ALLOC_HEADER	typeref:struct:_ALLOC_HEADER::_ALLOC_HEADER	file:
prev	array.h	/^	struct _POINTER_Q *prev, *next;$/;"	m	struct:_POINTER_Q	typeref:struct:_POINTER_Q::_POINTER_Q
prev	geom.h	/^	struct _RECT_BOX  *prev;$/;"	m	struct:_RECT_BOX	typeref:struct:_RECT_BOX::_RECT_BOX
prev	int.h	/^	struct	_C_BOND	*prev;	\/* fields present in a normal BOND *\/$/;"	m	struct:_C_BOND	typeref:struct:_C_BOND::_C_BOND
prev	int.h	/^	struct _BOND *prev;$/;"	m	struct:_BOND	typeref:struct:_BOND::_BOND
prev	int.h	/^	struct _Cross *prev;$/;"	m	struct:_Cross	typeref:struct:_Cross::_Cross
prev	int.h	/^	struct _O_CURVE *prev;$/;"	m	struct:_O_CURVE	typeref:struct:_O_CURVE::_O_CURVE
prev	int.h	/^	struct _O_NODE	*prev, *next;$/;"	m	struct:_O_NODE	typeref:struct:_O_NODE::_O_NODE
prev	int.h	/^	struct _TRI *prev;$/;"	m	struct:_TRI	typeref:struct:_TRI::_TRI
prev	int.h	/^        struct  _EQUIV_COMPS    *prev, *next;$/;"	m	struct:_EQUIV_COMPS	typeref:struct:_EQUIV_COMPS::_EQUIV_COMPS
prev	int.h	/^        struct _CRXING     *prev, *next;$/;"	m	struct:_CRXING	typeref:struct:_CRXING::_CRXING
prev	setb2d.c	/^	struct _BPOINT *prev, *next;$/;"	m	struct:_BPOINT	typeref:struct:_BPOINT::_BPOINT	file:
prev	table.h	/^	struct Chunk 	*prev;		\/* Pointer to Previous Chunk *\/$/;"	m	struct:Chunk	typeref:struct:Chunk::Chunk
prev	table.h	/^	struct Table 	*prev; 		\/* Pointer to Previous Table *\/$/;"	m	struct:Table	typeref:struct:Table::Table
prev	triangle.c	/^    struct PoolBlock *next, *prev;$/;"	m	struct:PoolBlock	typeref:struct:PoolBlock::	file:
prev_adjacent	isect3d.c	/^LOCAL   boolean  prev_adjacent($/;"	f
prev_interf	int.h	/^	struct _INTERFACE  *prev_interf;$/;"	m	struct:_INTERFACE	typeref:struct:_INTERFACE::_INTERFACE
prev_interface	int.h	461;"	d
prev_null_sided_tri	isurgery.c	/^EXPORT int prev_null_sided_tri($/;"	f
prev_output	../util/output.c	/^EXPORT boolean prev_output($/;"	f
prev_t	int.h	/^			*prev_t,     \/* prev, next intscting tris *\/$/;"	m	struct:_C_SURF	typeref:struct:_C_SURF::
previous	../util/output.c	/^	long previous, last;$/;"	m	struct:_WRITE_LIST	file:
print_C_SURF_FLAG	isect3d.c	1525;"	d	file:
print_C_SURF_FLAG	isect3d.c	1698;"	d	file:
print_PP_GRID_structure	iscatter.c	/^EXPORT	void print_PP_GRID_structure($/;"	f
print_RECT_GRID_structure	igrid.c	/^EXPORT	void print_RECT_GRID_structure($/;"	f
print_alloc_header	../util/vectormalloc.c	/^LOCAL	void	print_alloc_header($/;"	f
print_angle	geom.h	303;"	d
print_angle_direction	geomutils.c	/^EXPORT void print_angle_direction($/;"	f
print_bdry_side	top.c	/^EXPORT	void print_bdry_side($/;"	f
print_blk_crx	imksurf.c	/^EXPORT  void print_blk_crx($/;"	f
print_blk_tri	idiagnostic.c	/^EXPORT 	void 	print_blk_tri($/;"	f
print_bond	top.c	/^EXPORT	void print_bond($/;"	f
print_bond_list	top.c	/^EXPORT	void print_bond_list($/;"	f
print_boolean	../util/other.c	/^EXPORT	void	print_boolean($/;"	f
print_bpoint	setb2d.c	/^LOCAL	void	print_bpoint($/;"	f
print_c_bond	iprt3d.c	/^EXPORT	void print_c_bond($/;"	f
print_c_curve	iprt3d.c	/^EXPORT	void	print_c_curve($/;"	f
print_c_surf	iprt3d.c	/^EXPORT	void print_c_surf($/;"	f
print_c_surf_flag	iprt3d.c	/^EXPORT	void	print_c_surf_flag($/;"	f
print_call_stack	../util/cleanup.c	/^EXPORT	void	print_call_stack(const char *mesg)$/;"	f
print_cross	cross2d.c	/^EXPORT 	void print_cross($/;"	f
print_cross_list	cross2d.c	/^EXPORT 	void print_cross_list($/;"	f
print_crossing_elements	userhooks.c	/^EXPORT	void print_crossing_elements($/;"	f
print_crxings	isub.c	/^EXPORT	void print_crxings($/;"	f
print_curve	userhooks.c	/^EXPORT	void print_curve($/;"	f
print_curve_with_orient	top.c	/^EXPORT void print_curve_with_orient($/;"	f
print_double_matrix	../util/cdecs.h	409;"	d
print_double_vector	../util/cdecs.h	412;"	d
print_double_vector_as_matrix	../util/cdecs.h	415;"	d
print_error_enum	iTaps.h	83;"	d
print_errors	../util/error.c	/^EXPORT void print_errors(void)$/;"	f
print_execution_times	../util/times.c	/^EXPORT void print_execution_times(void)$/;"	f
print_final_storage_and_error	../util/cleanup.c	/^LOCAL	void print_final_storage_and_error($/;"	f
print_float_matrix	../util/cdecs.h	418;"	d
print_float_vector	../util/cdecs.h	421;"	d
print_float_vector_as_matrix	../util/cdecs.h	424;"	d
print_function_values	../util/roots.c	/^EXPORT void print_function_values($/;"	f
print_general_vector	geomutils.c	/^EXPORT	void	print_general_vector($/;"	f
print_grid_float	igrid.c	1012;"	d	file:
print_grid_float	igrid.c	963;"	d	file:
print_hypersurface	intfc.c	/^EXPORT void print_hypersurface($/;"	f
print_hypersurface_boundaries	intfc.c	/^EXPORT	void	print_hypersurface_boundaries($/;"	f
print_int_matrix	../util/cdecs.h	430;"	d
print_int_vector	top.c	/^EXPORT	void print_int_vector($/;"	f
print_int_vector_as_matrix	../util/cdecs.h	433;"	d
print_interface	userhooks.c	/^EXPORT	void	print_interface($/;"	f
print_intersections	userhooks.c	/^EXPORT	void print_intersections($/;"	f
print_line_of_floats	../util/other.c	/^EXPORT void print_line_of_floats($/;"	f
print_machine_parameters	../util/simpleio.c	/^EXPORT	void	print_machine_parameters($/;"	f
print_matrix	../util/cdecs.h	427;"	d
print_node	userhooks.c	/^EXPORT	void	print_node($/;"	f
print_number_of_tangles	userhooks.c	/^EXPORT	int print_number_of_tangles($/;"	f
print_o_curve	top.c	/^EXPORT void print_o_curve($/;"	f
print_o_curve_family	top.c	/^EXPORT void print_o_curve_family($/;"	f
print_onode	top.c	/^EXPORT	void print_onode($/;"	f
print_onode_list	top.c	/^EXPORT	void print_onode_list($/;"	f
print_orientation	geomutils.c	/^EXPORT void print_orientation($/;"	f
print_point	userhooks.c	/^EXPORT	void print_point($/;"	f
print_polyline_description	igview.c	/^LOCAL  void    print_polyline_description($/;"	f
print_rectangular_grid	igrid.c	/^EXPORT void print_rectangular_grid($/;"	f
print_rss_usage	../util/times.c	/^LOCAL	void	print_rss_usage(void)$/;"	f
print_seam	isurgery.c	/^LOCAL	void print_seam($/;"	f
print_side	geomutils.c	/^EXPORT void print_side($/;"	f
print_storage	../util/cleanup.c	/^EXPORT	void print_storage($/;"	f
print_surface	userhooks.c	/^EXPORT	void	 print_surface($/;"	f
print_table	intfc.c	/^LIB_LOCAL void print_table(struct Table *T)$/;"	f
print_table_list	intfc.c	/^LIB_LOCAL void print_table_list(void)$/;"	f
print_title	../util/simpleio.c	/^EXPORT void print_title($/;"	f
print_tri	int3d.c	/^EXPORT void print_tri($/;"	f
print_tri_coords	idiagnostic.c	/^EXPORT void print_tri_coords(TRI* tri)$/;"	f
print_triangulateio	triangle.c	/^EXPORT	void	print_triangulateio($/;"	f
print_tris_on_surface	int3d.c	/^LIB_LOCAL void print_tris_on_surface($/;"	f
print_vector	../util/cdecs.h	436;"	d
print_vector_as_matrix	../util/cdecs.h	439;"	d
print_vector_of_floats	../util/cdecs.h	442;"	d
print_wall_crx	userhooks.c	/^EXPORT  void  print_wall_crx($/;"	f
print_wall_curve_crx	userhooks.c	/^EXPORT  void  print_wall_curve_crx($/;"	f
print_wall_curve_crx0	userhooks.c	/^EXPORT  void  print_wall_curve_crx0($/;"	f
private_data	int.h	/^	} private_data;$/;"	m	struct:_POINT	typeref:union:_POINT::__anon54
private_data	int.h	/^	} private_data;$/;"	m	struct:_TRI	typeref:union:_TRI::__anon55
process_lseg	iprt3d.c	/^LOCAL void process_lseg($/;"	f
project_lseg	iprt3d.c	/^LOCAL void project_lseg(GLINE lseg)$/;"	f
project_point	iprt3d.c	/^LOCAL void project_point(GPT p, double *xp, double *yp)$/;"	f
projectile_func	imkcurve.c	/^EXPORT double projectile_func($/;"	f
prompt	../util/cdecs.h	/^	const char *prompt;	\/* Full prompt name *\/$/;"	m	struct:_Prompt_type
prompt_for_curve	top.c	/^LOCAL CURVE *prompt_for_curve($/;"	f
prompt_for_fourier_multi_modes	ifourier.c	/^LOCAL	void	prompt_for_fourier_multi_modes($/;"	f
prompt_for_legendre_multi_modes	ifourier.c	/^LOCAL	void	prompt_for_legendre_multi_modes($/;"	f
prompt_for_remap	igrid.c	/^LOCAL	void	prompt_for_remap($/;"	f
prompt_make_bdry_surfaces	imksurf.c	/^EXPORT 	void prompt_make_bdry_surfaces($/;"	f
prompt_make_comp3_surfaces	imksurf.c	/^EXPORT	void prompt_make_comp3_surfaces($/;"	f
prompt_make_elliptic_curve	imkcurve.c	/^EXPORT 	CURVE *prompt_make_elliptic_curve($/;"	f
prompt_make_level_curves	imkcurve.c	/^EXPORT void prompt_make_level_curves($/;"	f
prompt_make_level_surface	imksurf.c	/^EXPORT	SURFACE *prompt_make_level_surface($/;"	f
prompt_make_linear_curve	imkcurve.c	/^EXPORT 	CURVE *prompt_make_linear_curve($/;"	f
propeller_func	imkcurve.c	/^EXPORT double propeller_func($/;"	f
ps_tol	itrisset.c	/^LOCAL  double  ps_tol = 1.0e-12;$/;"	v
psurfs	iloc.h	/^	uint64_t **psurfs;     \/* addresses of pos surfaces on curves *\/$/;"	m	struct:__anon51
pt	comp3d.c	/^	double   pt[3];		\/* Location being projected on tri *\/$/;"	m	struct:__anon3	file:
pt	int.h	/^	POINT		**pt;$/;"	m	struct:_O_NODE
pt	int.h	/^	POINT	**pt;	\/* Points that have crossed *\/$/;"	m	struct:_Cross
pt	int.h	/^        POINT              *pt;$/;"	m	struct:_CRXING
pt	int.h	/^        POINT   *pt;$/;"	m	struct:__anon71
pt_compr	comp1d.c	/^LOCAL	int	pt_compr($/;"	f
ptr	int.h	/^	POINTER          ptr;$/;"	m	union:_TRI_NEIGHBOR
ptr2ull	../util/cdecs.h	94;"	d
pts	itrisset.c	/^	POINT		**pts;$/;"	m	struct:__anon12	file:
pts_in_zone	table.h	/^	POINT           ***pts_in_zone; \/* points in each zone *\/$/;"	m	struct:Table
pv	comp3d.c	/^	POINT   *pv, *p1, *p2;	\/* Vertices marking boundary closest to pt *\/$/;"	m	struct:__anon3	file:
qr_safeguarded	iredist_o2.c	/^void  qr_safeguarded($/;"	f
quad_array	../util/vmalloc.h	112;"	d
quad_array	../util/vmalloc.h	95;"	d
quad_array_T	../util/vmalloc.h	155;"	d
quadratic_mid_point_on_edge2d	iredist_o2.c	/^void  quadratic_mid_point_on_edge2d($/;"	f
quadratic_mid_point_on_edge3d	iredist_o2.c	/^void  quadratic_mid_point_on_edge3d($/;"	f
quin_array	../util/vmalloc.h	113;"	d
quin_array	../util/vmalloc.h	99;"	d
quin_array_T	../util/vmalloc.h	156;"	d
r	geom.h	/^	double r[2];$/;"	m	struct:__anon44
r	geom.h	/^        double r;		$/;"	m	struct:__anon45
r	geom.h	/^        double r;$/;"	m	struct:__anon49
r0	geom.h	/^        double r0;$/;"	m	struct:__anon41
r0	geom.h	/^        double r0;$/;"	m	struct:__anon42
r1	geom.h	/^        double r1;$/;"	m	struct:__anon41
r1	geom.h	/^        double r1;$/;"	m	struct:__anon42
r1_mach	../util/machine.c	/^EXPORT TRUEfloat r1_mach(int i)$/;"	f
r2	geom.h	/^	double r2;$/;"	m	struct:__anon41
rad	geom.h	/^	double 	      rad[MAXD];		\/* Lengths of radii *\/$/;"	m	struct:__anon33
rad	geom.h	/^	double *rad;$/;"	m	struct:__anon46
rad	geom.h	/^        double         **rad;            \/* Lengths of radii 1 *\/$/;"	m	struct:__anon47
radial_motion_vel	testintfc.c	/^LOCAL int radial_motion_vel($/;"	f
radians	../util/cdecs.h	388;"	d
random01	userhooks.c	/^EXPORT	double random01($/;"	f
random_bond_on_curve	top.c	/^EXPORT	BOND	*random_bond_on_curve($/;"	f
random_bubble_num_modes	ifourier.c	/^EXPORT	int random_bubble_num_modes($/;"	f
random_gaussian	geomutils.c	/^EXPORT	double random_gaussian($/;"	f
random_pert_func	testintfc.c	/^LOCAL	double random_pert_func($/;"	f
randomnation	triangle.c	/^LOCAL size_t randomnation(size_t choices)$/;"	f
randomseed	triangle.c	/^LOCAL size_t randomseed;               \/* Current random number seed. *\/$/;"	v
rb_cell_index	iredist.c	/^LOCAL	int rb_cell_index($/;"	f
rbl_after_move_node	top.c	/^EXPORT void rbl_after_move_node($/;"	f
rcl_after_delete_bond_fragment_at_node	cross2d.c	/^EXPORT void rcl_after_delete_bond_fragment_at_node($/;"	f
rcl_after_insert_point	cross2d.c	/^EXPORT void rcl_after_insert_point($/;"	f
rcl_after_join	cross2d.c	/^EXPORT void rcl_after_join($/;"	f
rcl_after_split	cross2d.c	/^EXPORT void rcl_after_split($/;"	f
read_binary_int_array	../util/simpleio.c	/^EXPORT	size_t	read_binary_int_array($/;"	f
read_binary_real_array	../util/simpleio.c	/^EXPORT	size_t	read_binary_real_array($/;"	f
read_binary_uint64_t_array	../util/simpleio.c	/^EXPORT	size_t	read_binary_uint64_t_array($/;"	f
read_binary_uint_array	../util/simpleio.c	/^EXPORT	size_t	read_binary_uint_array($/;"	f
read_boundary_type_from_string	userhooks.c	/^EXPORT	int read_boundary_type_from_string($/;"	f
read_curve	userhooks.c	/^EXPORT	CURVE *read_curve($/;"	f
read_curve_from_file	top.c	/^EXPORT CURVE *read_curve_from_file($/;"	f
read_endian	../util/cdecs.h	/^	FT_ENDIAN   read_endian;$/;"	m	struct:_IO_TYPE
read_float_size	../util/cdecs.h	/^	size_t      read_float_size;$/;"	m	struct:_IO_TYPE
read_grid_float	igrid.c	1086;"	d	file:
read_grid_float	igrid.c	1160;"	d	file:
read_interface	intfc.c	/^EXPORT INTERFACE *read_interface(void)$/;"	f
read_node	userhooks.c	/^EXPORT	NODE *read_node($/;"	f
read_point	userhooks.c	/^EXPORT	POINT *read_point($/;"	f
read_print_curve	intfc.c	/^LOCAL	CURVE *read_print_curve($/;"	f
read_print_curve_boundary	intfc.c	/^LOCAL	boolean read_print_curve_boundary($/;"	f
read_print_curve_points	intfc.c	/^LOCAL boolean read_print_curve_points($/;"	f
read_print_float	../util/simpleio.c	/^EXPORT	double	read_print_float($/;"	f
read_print_interface	intfc.c	/^EXPORT INTERFACE *read_print_interface($/;"	f
read_print_intfc_rect_grids	userhooks.c	/^EXPORT	int read_print_intfc_rect_grids($/;"	f
read_print_node	intfc.c	/^LOCAL NODE *read_print_node($/;"	f
read_print_point	userhooks.c	/^EXPORT	POINT	*read_print_point($/;"	f
read_print_surface	int3d.c	/^LIB_LOCAL SURFACE *read_print_surface($/;"	f
read_print_tris_on_curve	int3d.c	/^LIB_LOCAL void read_print_tris_on_curve($/;"	f
read_rectangular_grid	igrid.c	/^EXPORT void read_rectangular_grid($/;"	f
read_remap_from_string	igrid.c	/^EXPORT	GEOMETRY_REMAP	read_remap_from_string($/;"	f
read_sdl_surface	imksurf.c	/^EXPORT boolean read_sdl_surface($/;"	f
read_surface	userhooks.c	/^EXPORT	SURFACE *read_surface($/;"	f
read_vtk_surface	imksurf.c	/^EXPORT boolean read_vtk_surface($/;"	f
readnodefile	triangle.c	/^LOCAL int readnodefile;                       \/* Has a .node file been read? *\/$/;"	v
real	../util/cdecs.h	/^        double real;$/;"	m	struct:_COMPLEX
real_time	../util/times.c	/^EXPORT double real_time(void)$/;"	f
reassign_lseg_end	iprt3d.c	/^LOCAL void reassign_lseg_end(GLINE *lseg, GTRI tri, int i_in)$/;"	f
receive_interface	userhooks.c	/^EXPORT	INTERFACE *receive_interface($/;"	f
recenttri	triangle.c	/^LOCAL triedge recenttri;$/;"	v
reconstruct_bond_pointers	userhooks.c	/^EXPORT	void reconstruct_bond_pointers($/;"	f
reconstruct_curve_pointers	userhooks.c	/^EXPORT	void reconstruct_curve_pointers($/;"	f
reconstruct_interface_pointers	userhooks.c	/^EXPORT	void reconstruct_interface_pointers($/;"	f
reconstruct_node_pointers	userhooks.c	/^EXPORT	void reconstruct_node_pointers($/;"	f
reconstruct_point_pointers	userhooks.c	/^EXPORT	void reconstruct_point_pointers($/;"	f
reconstruct_surface_pointers	userhooks.c	/^EXPORT	void reconstruct_surface_pointers($/;"	f
reconstruct_tri_pointers	userhooks.c	/^EXPORT	void reconstruct_tri_pointers($/;"	f
rect_bdry_curve_redist	iredist.c	/^EXPORT	void	rect_bdry_curve_redist($/;"	f
rect_bdry_redist2d	iredist.c	/^EXPORT  void rect_bdry_redist2d($/;"	f
rect_bdry_side_for_curve	isub.c	/^EXPORT	BDRY_SIDE rect_bdry_side_for_curve($/;"	f
rect_bdry_side_for_hyper_surf	isub.c	/^EXPORT	void rect_bdry_side_for_hyper_surf($/;"	f
rect_bdry_side_for_surface	isub.c	/^LOCAL	BDRY_SIDE rect_bdry_side_for_surface($/;"	f
rect_bdry_type	int.h	/^	int		rect_bdry_type[MAXD][2];$/;"	m	struct:_INTERFACE
rect_boundary_type	int.h	960;"	d
rect_boxes_from_tangled_tris	itrisset.c	/^EXPORT  int	rect_boxes_from_tangled_tris($/;"	f
rect_grid	table.h	/^	RECT_GRID 	rect_grid;	\/* Regular Rectangular Grid *\/$/;"	m	struct:Table
rect_grid_center	igrid.c	/^EXPORT  void  	rect_grid_center($/;"	f
rect_grid_corner	igrid.c	/^EXPORT  void	rect_grid_corner($/;"	f
rect_in_which	igrid.c	/^EXPORT boolean rect_in_which($/;"	f
rectangle	../util/plotdecs.h	274;"	d
rectangle_func	imkcurve.c	/^EXPORT double rectangle_func($/;"	f
recv_num_retries	../util/ppsub.c	/^LOCAL	unsigned	recv_num_retries = 60;$/;"	v
recv_wait_interval	../util/ppsub.c	/^LOCAL	unsigned	recv_wait_interval = 1;$/;"	v
redist_order	int.h	/^	int	redist_order;$/;"	m	struct:_CURVE
redist_order	int.h	/^	int redist_order;$/;"	m	struct:_SURFACE
redistribute_surface	iredist.c	/^EXPORT  boolean redistribute_surface($/;"	f
redistribute_surface_o1	iredist.c	/^LOCAL  boolean redistribute_surface_o1($/;"	f
redistribute_surface_o2	iredist_o2.c	/^EXPORT  boolean redistribute_surface_o2($/;"	f
refine	triangledefs.h	/^    boolean     refine;$/;"	m	struct:TriangulateOpts
reflect	isub.c	/^LOCAL void reflect($/;"	f
reflect_coords	irefl.c	/^LOCAL	void	reflect_coords($/;"	f
reflect_curve	userhooks.c	/^EXPORT	void	reflect_curve($/;"	f
reflect_interface	userhooks.c	/^EXPORT	void	reflect_interface($/;"	f
reflect_node	userhooks.c	/^EXPORT	void	reflect_node($/;"	f
reflect_point	userhooks.c	/^EXPORT	void	reflect_point($/;"	f
reflect_surface	userhooks.c	/^EXPORT	void	reflect_surface($/;"	f
regionattrib	triangledefs.h	/^    BinaryDigit regionattrib;$/;"	m	struct:TriangulateOpts
regionlist	triangledefs.h	/^    REAL            *regionlist;        \/* In \/ pointer to array copied out *\/$/;"	m	struct:triangulateio
regionplague	triangle.c	/^LOCAL void regionplague($/;"	f
regions	triangle.c	/^LOCAL int regions;                            \/* Number of input regions. *\/$/;"	v
remainder	table.h	/^	size_t		remainder;	\/* Space left in Top Chunk in ALIGNS *\/$/;"	m	struct:Table
remap	geom.h	/^	    GEOMETRY_REMAP remap;$/;"	m	struct:_RECT_GRID::_REMAP
remap_info	igrid.c	/^EXPORT	REMAP	*remap_info(void)$/;"	f
remap_interface	shift.c	/^EXPORT INTERFACE *remap_interface($/;"	f
remap_name	geom.h	/^	    const char     *remap_name;$/;"	m	struct:_RECT_GRID::_REMAP
remember	../util/debug.c	187;"	d	file:
remove_curve_from_surface_bdry	int3d.c	/^EXPORT boolean remove_curve_from_surface_bdry($/;"	f
remove_from_debug	../util/debug.c	/^EXPORT	void	remove_from_debug($/;"	f
remove_null_pair	iblkc2.c	/^EXPORT	void remove_null_pair($/;"	f
remove_null_pair_of_surface	iblkc2.c	/^LOCAL	void remove_null_pair_of_surface($/;"	f
remove_single_tri_null_loop	itrisset.c	/^EXPORT	int	remove_single_tri_null_loop($/;"	f
remove_tri_from_surface	int3d.c	/^EXPORT	void	remove_tri_from_surface($/;"	f
remove_tris_and_seal	iredist.c	/^LOCAL	int	remove_tris_and_seal($/;"	f
remove_tris_and_seal_o2	iredist_o2.c	/^LOCAL	int	remove_tris_and_seal_o2($/;"	f
removeghosts	triangle.c	/^LOCAL long removeghosts($/;"	f
rename_segment	../util/plotdecs.h	310;"	d
reopen_foutput	../util/output.c	/^LOCAL	boolean reopen_foutput($/;"	f
reorder_curve_link_list	userhooks.c	/^EXPORT	void reorder_curve_link_list($/;"	f
repeat	../util/plotdecs.h	282;"	d
replace_curve_seg_by_bond	iredist.c	/^EXPORT   void replace_curve_seg_by_bond($/;"	f
rescale_matrix	iredist_o2.c	/^void  rescale_matrix($/;"	f
reset_cross	cross2d.c	/^LOCAL void reset_cross($/;"	f
reset_domain_comp	imksurf.c	/^EXPORT	void reset_domain_comp($/;"	f
reset_domain_comp2d	imkcurve.c	/^LOCAL	void reset_domain_comp2d($/;"	f
reset_hash_table	isub.c	/^EXPORT	void reset_hash_table($/;"	f
reset_intfc_components	comp1d.c	/^EXPORT void reset_intfc_components($/;"	f
reset_intfc_num_points	isub.c	/^EXPORT void reset_intfc_num_points($/;"	f
reset_nodes	imksurf.c	/^LOCAL  void    reset_nodes(CURVE *c)$/;"	f
reset_nodes_posn	intfc.c	/^EXPORT  void  reset_nodes_posn($/;"	f
reset_normal_on_intfc	isub.c	/^EXPORT void reset_normal_on_intfc($/;"	f
reset_read_file_variables	../util/output.c	/^EXPORT void reset_read_file_variables($/;"	f
reset_sort_status	int3d.c	/^LOCAL void reset_sort_status($/;"	f
reset_surface_points	isub.c	/^EXPORT   void   reset_surface_points($/;"	f
reset_tri_points_at_bond	int3d.c	/^LOCAL	void reset_tri_points_at_bond($/;"	f
reset_tris_at_deleted_bond	intfc.c	/^LOCAL	boolean	reset_tris_at_deleted_bond($/;"	f
reset_wall_flag_for_surface	iwallsurf.c	/^EXPORT void  reset_wall_flag_for_surface(INTERFACE  *intfc)$/;"	f
resulterrbound	triangle.c	/^LOCAL double resulterrbound;$/;"	v
retriangulate_polygon	intfc.c	/^EXPORT	boolean	retriangulate_polygon($/;"	f
reverse_bond	userhooks.c	/^EXPORT	void reverse_bond($/;"	f
reverse_curve	userhooks.c	/^EXPORT	void reverse_curve($/;"	f
reverse_endian	../util/cdecs.h	/^	boolean        reverse_endian;$/;"	m	struct:_IO_TYPE
reverse_string	../util/machine.c	/^EXPORT	void reverse_string(char *s,size_t n)$/;"	f
rewind_read_file	../util/output.c	/^EXPORT boolean rewind_read_file($/;"	f
right_flush	../util/other.c	/^EXPORT	const char *right_flush($/;"	f
right_planar_surface_triangulation	trisurf.c	/^LOCAL void right_planar_surface_triangulation($/;"	f
rint	../util/machine.c	/^EXPORT	double rint(double x)$/;"	f
rk1	../util/runga.c	/^LOCAL	boolean rk1($/;"	f
rk_warning	../util/runga.c	112;"	d	file:
rk_warning	../util/runga.c	114;"	d	file:
rnext	triangle.c	834;"	d	file:
rnextself	triangle.c	839;"	d	file:
robust_cross_bond_circle	isub.c	/^EXPORT int robust_cross_bond_circle($/;"	f
robust_cross_bonds	isub.c	/^EXPORT	boolean	robust_cross_bonds($/;"	f
robust_extend_bond_to_cross_bond	isub.c	/^EXPORT	int robust_extend_bond_to_cross_bond($/;"	f
robust_extend_bonds_to_cross	isub.c	/^EXPORT	int robust_extend_bonds_to_cross($/;"	f
robust_quad_roots_in_interval	isub.c	/^EXPORT int robust_quad_roots_in_interval($/;"	f
rot24	iblkc2.c	/^EXPORT  void rot24($/;"	f
rot24	iblkc3.c	/^LOCAL  void rot24($/;"	f
rot_24	iblkb.c	/^LOCAL	void rot_24($/;"	f
rot_symmetry	igrid.c	/^LOCAL 	boolean	rot_symmetry;$/;"	v
rotate	../util/plotdecs.h	267;"	d
rotate_and_zoom_rect_grid	zoom.c	/^EXPORT	void rotate_and_zoom_rect_grid($/;"	f
rotate_interface	zoom.c	/^LOCAL void rotate_interface($/;"	f
rotate_matrix	../util/matrix.c	/^EXPORT void rotate_matrix($/;"	f
rotate_point	zoom.c	/^LOCAL void rotate_point($/;"	f
rotate_triangle	int3d.c	/^EXPORT	void rotate_triangle($/;"	f
rotate_vector	../util/matrix.c	/^EXPORT void rotate_vector($/;"	f
rprev	triangle.c	848;"	d	file:
rprevself	triangle.c	853;"	d	file:
rr	geom.h	/^        double rr;$/;"	m	struct:__anon35
runga_kutta	../util/runga.c	/^EXPORT	boolean runga_kutta($/;"	f
s	comp3d.c	/^	SURFACE *s;		\/* Surface containing tri *\/$/;"	m	struct:__anon3	file:
s	int.h	/^		SURFACE	*s;$/;"	m	union:_HYPER_SURF::__anon58
s	int.h	/^	SURFACE	  *s[2];$/;"	m	struct:_C_CURVE
s	int.h	/^	SURFACE	*s;$/;"	m	struct:_WEDGE
s	int.h	/^	struct	_C_SURF	s[2];  \/* 2 structures, one for each surface *\/$/;"	m	struct:_C_BOND	typeref:struct:_C_BOND::_C_SURF
s	int.h	/^        SURFACE *s;$/;"	m	struct:_BBI_POINT
s	int.h	/^typedef struct {struct _TRI tri; struct _SURFACE *s;} TRI_LIST_HEAD;$/;"	m	struct:__anon57	typeref:struct:__anon57::_SURFACE
safeqr	isub.c	/^LOCAL int safeqr($/;"	f
same_cb_pt	isect3d.c	/^LOCAL	boolean same_cb_pt($/;"	f
same_curves_cross	cross2d.c	/^LOCAL int same_curves_cross($/;"	f
same_point	iprt3d.c	/^LOCAL int same_point($/;"	f
same_sign	int.h	1013;"	d
samples	triangle.c	/^LOCAL long samples;          \/* Number of random samples for point location. *\/$/;"	v
save	../util/output.c	/^	long    save;$/;"	m	struct:_IOUTPUT	file:
save_read_file_variables	../util/output.c	/^EXPORT OUTPUT *save_read_file_variables($/;"	f
sbond	triangle.c	1018;"	d	file:
scalar	../util/vmalloc.h	70;"	d
scalar_T	../util/vmalloc.h	151;"	d
scalar_product	geomutils.c	/^EXPORT	double scalar_product($/;"	f
scalar_product_on_bonds	isub.c	/^EXPORT double scalar_product_on_bonds($/;"	f
scale_expansion_zeroelim	triangle.c	/^LOCAL int scale_expansion_zeroelim($/;"	f
scaled_bond_length	isub.c	/^EXPORT	double scaled_bond_length($/;"	f
scaled_hypot	geomutils.c	/^EXPORT	double scaled_hypot($/;"	f
scaled_separation	int.h	1079;"	d
scaled_tri_params	isub.c	/^EXPORT	void scaled_tri_params($/;"	f
scan_float_fmt	../util/simpleio.c	/^	static const char *scan_float_fmt = "%lf";$/;"	v	file:
scoutsegment	triangle.c	/^LOCAL int scoutsegment($/;"	f
screen	../util/screen.c	/^EXPORT	void screen(const char *fmt, ...)$/;"	f
screen_print_long_string	../util/screen.c	/^EXPORT	void	screen_print_long_string($/;"	f
sdecode	triangle.c	950;"	d	file:
sdest	triangle.c	999;"	d	file:
sdissolve	triangle.c	1025;"	d	file:
sdl_interface_plot	igview.c	/^EXPORT void sdl_interface_plot($/;"	f
seal_all_loops_wo_constraint	itrisset.c	/^EXPORT	int	seal_all_loops_wo_constraint($/;"	f
seal_degenerated_null_loop	itrisset.c	/^EXPORT	boolean	seal_degenerated_null_loop($/;"	f
seal_null_loop_in_center	itrisset.c	/^EXPORT	void  seal_null_loop_in_center($/;"	f
seal_null_loop_with_triangulation	itrisset.c	/^LOCAL	void	seal_null_loop_with_triangulation($/;"	f
seam1	isurgery.c	/^  	SEAM 		*seam1;$/;"	m	struct:_SURGERY	file:
seam2	isurgery.c	/^  	SEAM		*seam2;$/;"	m	struct:_SURGERY	file:
search_for	../util/screen.c	/^LOCAL int search_for(char ch)$/;"	f
search_harder_for_root	../util/roots.c	/^EXPORT	boolean	search_harder_for_root($/;"	f
search_the_tri_in_intfc	idiagnostic.c	/^EXPORT boolean search_the_tri_in_intfc(INTERFACE *intfc)$/;"	f
search_the_tri_in_surf	idiagnostic.c	/^EXPORT boolean search_the_tri_in_surf(SURFACE *s)$/;"	f
second_clean_up	../util/cleanup.c	/^LOCAL void second_clean_up($/;"	f
second_clean_up_handler	../util/cleanup.c	/^LOCAL	Error_handler	second_clean_up_handler;$/;"	v
second_clean_up_handler	../util/cleanup.c	/^LOCAL	void	second_clean_up_handler($/;"	f
sect_tris_in_box	itrisset.c	/^EXPORT  int	sect_tris_in_box($/;"	f
section	igview.c	/^	int section;$/;"	m	struct:DATA	file:
seekable	../util/output.c	/^	boolean seekable;$/;"	m	struct:_WRITE_LIST	file:
seg_crx_count	table.h	/^	int             *seg_crx_count;$/;"	m	struct:Table
seg_crx_lists	table.h	/^        int             **seg_crx_lists;$/;"	m	struct:Table
seg_crx_lists_store	table.h	/^        int             *seg_crx_lists_store;$/;"	m	struct:Table
seg_index2d	isub.c	/^EXPORT int  seg_index2d($/;"	f
seg_index3d	isub.c	/^EXPORT int  seg_index3d($/;"	f
segmentintersection	triangle.c	/^LOCAL void segmentintersection($/;"	f
segmentlist	triangledefs.h	/^    int             *segmentlist;                              \/* In \/ out *\/$/;"	m	struct:triangulateio
segmentmarkerlist	triangledefs.h	/^    int             *segmentmarkerlist;                        \/* In \/ out *\/$/;"	m	struct:triangulateio
select	../util/cdecs.h	/^	const char *select;  	\/* Abbreviated name for input *\/$/;"	m	struct:_Prompt_type
sencode	triangle.c	959;"	d	file:
send_interface	userhooks.c	/^EXPORT	void send_interface($/;"	f
sep_common_edge_from_loop	itrisset.c	/^EXPORT	boolean sep_common_edge_from_loop($/;"	f
sep_common_edge_from_tris	itrisset.c	/^EXPORT	int	sep_common_edge_from_tris($/;"	f
sep_common_point_from_loop	itrisset.c	/^EXPORT	boolean sep_common_point_from_loop($/;"	f
separation	isub.c	/^EXPORT	double separation($/;"	f
set_01_bdry	int.h	1202;"	d
set_12_bdry	int.h	1204;"	d
set_20_bdry	int.h	1206;"	d
set_MSG_BUF_SIZE	../util/ppsub.c	/^EXPORT	void	set_MSG_BUF_SIZE($/;"	f
set_alloc	../util/vmalloc.h	130;"	d
set_amr_intfc_tol	intfc_amr.c	/^EXPORT void set_amr_intfc_tol($/;"	f
set_area_weighted_normal	isub.c	/^LOCAL	void	set_area_weighted_normal($/;"	f
set_background_color	../util/plotdecs.h	295;"	d
set_bdry_side	int.h	919;"	d
set_binary_mode	../util/plotdecs.h	263;"	d
set_binary_output	../util/simpleio.c	/^EXPORT void set_binary_output($/;"	f
set_bond_and_curve_list_pointers	comp2d.c	/^LOCAL boolean set_bond_and_curve_list_pointers($/;"	f
set_bond_length	top.c	/^EXPORT	void set_bond_length($/;"	f
set_boundary	userhooks.c	/^EXPORT	boolean set_boundary($/;"	f
set_boundary_surface_components	setb3d.c	/^LOCAL int set_boundary_surface_components($/;"	f
set_bpoint	setb2d.c	/^LOCAL BPOINT	*set_bpoint($/;"	f
set_bpoint_at_corner	setb2d.c	/^LOCAL	BPOINT	*set_bpoint_at_corner($/;"	f
set_bpoint_at_node	setb2d.c	/^LOCAL	BPOINT*	set_bpoint_at_node($/;"	f
set_c_surf_flag	isect3d.c	1220;"	d	file:
set_c_surf_flag	isect3d.c	501;"	d	file:
set_color	../util/plotdecs.h	285;"	d
set_color_bar_data	../util/plotdecs.h	297;"	d
set_color_from_palette	../util/plotdecs.h	289;"	d
set_color_from_table	../util/plotdecs.h	291;"	d
set_color_rgb	../util/plotdecs.h	293;"	d
set_comm_pt_fac	itrisset.c	/^EXPORT	void	set_comm_pt_fac($/;"	f
set_comp_on_block	comp3d.c	/^LOCAL COMPONENT set_comp_on_block($/;"	f
set_convex_polyhedra	../util/plotdecs.h	329;"	d
set_cross_position	isub.c	/^LOCAL	void set_cross_position($/;"	f
set_current_interface	intfc.c	/^EXPORT void set_current_interface($/;"	f
set_curve_bdry_flag	trisurf.c	/^LOCAL         void set_curve_bdry_flag($/;"	f
set_curve_seam	isurgery.c	/^LOCAL	void 	set_curve_seam($/;"	f
set_curves_at_onode	top.c	/^LIB_LOCAL void set_curves_at_onode($/;"	f
set_debug_name	iblkc3.c	/^EXPORT  void  set_debug_name(const char *s)$/;"	f
set_debug_output	../util/debug.c	/^EXPORT	void	set_debug_output($/;"	f
set_dual_grid	igrid.c	/^EXPORT	void	set_dual_grid($/;"	f
set_dump_core	../util/cleanup.c	/^EXPORT	void set_dump_core($/;"	f
set_equivalent_comps	iecomps.c	/^EXPORT void set_equivalent_comps($/;"	f
set_error_handler	../util/cleanup.c	/^LOCAL	void set_error_handler($/;"	f
set_error_immediate	../util/error.c	/^EXPORT void set_error_immediate($/;"	f
set_error_message	../util/runga.c	118;"	d	file:
set_face_coords	imksurf.c	/^LOCAL   void set_face_coords($/;"	f
set_flag_end	isect3d.c	1222;"	d	file:
set_flag_end	isect3d.c	509;"	d	file:
set_flag_start	isect3d.c	1221;"	d	file:
set_flag_start	isect3d.c	506;"	d	file:
set_free	../util/vmalloc.h	136;"	d
set_grid_for_surface_construction	imksurf.c	/^EXPORT 	void set_grid_for_surface_construction($/;"	f
set_grid_lines	igrid.c	/^EXPORT	int set_grid_lines($/;"	f
set_hidden_line_removal	../util/plotdecs.h	327;"	d
set_hidden_surface_removal	../util/plotdecs.h	325;"	d
set_is_bdry	int.h	900;"	d
set_is_not_wall_surface	iwallsurf.c	/^EXPORT  void  set_is_not_wall_surface(SURFACE *s)$/;"	f
set_is_wall_surface	iwallsurf.c	/^EXPORT  void  set_is_wall_surface(SURFACE *s)$/;"	f
set_linestyle	../util/plotdecs.h	301;"	d
set_linux_floating_traps	../util/cleanup.c	/^LOCAL	void	set_linux_floating_traps(void)$/;"	f
set_mips_floating_traps	../util/cleanup.c	/^LOCAL	void	set_mips_floating_traps(void)$/;"	f
set_nel_max_normal	isub.c	/^LOCAL   void set_nel_max_normal($/;"	f
set_new_read_file	../util/output.c	/^LOCAL	void	set_new_read_file($/;"	f
set_no_alloc	../util/vmalloc.h	132;"	d
set_normal_from_tris	isub.c	/^EXPORT  void set_normal_from_tris($/;"	f
set_normal_of_tri	isub.c	/^EXPORT	void set_normal_of_tri($/;"	f
set_not_bdry	int.h	901;"	d
set_off_front_comp2d	comp2d.c	/^LOCAL void set_off_front_comp2d($/;"	f
set_off_front_comp3d	comp3d.c	/^LOCAL void set_off_front_comp3d($/;"	f
set_point_list_bounding_box	igview.c	/^EXPORT	void	set_point_list_bounding_box($/;"	f
set_point_of_bond	top.c	/^EXPORT void set_point_of_bond($/;"	f
set_pointer_queue_opts	arrayutils.c	/^EXPORT	void	set_pointer_queue_opts($/;"	f
set_pointers	../util/vectormalloc.c	/^LOCAL void set_pointers($/;"	f
set_pp_grid	iscatter.c	/^EXPORT	PP_GRID *set_pp_grid($/;"	f
set_pp_recv_num_retries	../util/ppsub.c	/^EXPORT	void	set_pp_recv_num_retries($/;"	f
set_pp_recv_timeout	../util/ppsub.c	/^EXPORT	void	set_pp_recv_timeout($/;"	f
set_pp_recv_wait_interval	../util/ppsub.c	/^EXPORT	void	set_pp_recv_wait_interval($/;"	f
set_ppfname	igview.c	/^LOCAL	char *set_ppfname($/;"	f
set_prime_components	iblkc2.c	/^LOCAL	void set_prime_components($/;"	f
set_prime_components	iblkc3.c	/^LOCAL	void set_prime_components($/;"	f
set_projection	../util/plotdecs.h	311;"	d
set_read_endian	../util/output.c	/^EXPORT	void	set_read_endian($/;"	f
set_read_float_size	../util/output.c	/^EXPORT	void	set_read_float_size($/;"	f
set_rect_grid	igrid.c	/^EXPORT void set_rect_grid($/;"	f
set_remap	igrid.c	/^EXPORT	void	set_remap($/;"	f
set_remap_and_rect_grid	igrid.c	/^EXPORT	void set_remap_and_rect_grid($/;"	f
set_remap_identity	igrid.c	/^EXPORT  void    set_remap_identity($/;"	f
set_reverse_endian	../util/output.c	/^EXPORT	void	set_reverse_endian($/;"	f
set_rotational_symmetry	igrid.c	/^EXPORT	void set_rotational_symmetry(boolean yes_no)$/;"	f
set_shift_for_tecplot	igview.c	/^EXPORT	void	set_shift_for_tecplot($/;"	f
set_side_bdry	int.h	1208;"	d
set_sort_tol	comp3d.c	/^void set_sort_tol(RECT_GRID  *gr)$/;"	f
set_surface_seam	isurgery.c	/^LOCAL	int	set_surface_seam($/;"	f
set_tag_shift	ppcopy.c	/^void	set_tag_shift($/;"	f
set_text_precision	../util/plotdecs.h	275;"	d
set_text_size	../util/plotdecs.h	277;"	d
set_tol_for_tri_sect	itrisset.c	/^EXPORT	void set_tol_for_tri_sect(double    tol)$/;"	f
set_topological_grid	comp.c	/^EXPORT void set_topological_grid($/;"	f
set_tri_and_surface_list_pointers	comp3d.c	/^LOCAL boolean set_tri_and_surface_list_pointers($/;"	f
set_tri_area_tol	itrisset.c	/^        boolean    set_tri_area_tol(double  tol)$/;"	f
set_tri_array_numbers	int3d.c	/^LIB_LOCAL void set_tri_array_numbers($/;"	f
set_tri_list_around_point	isub.c	/^EXPORT  int set_tri_list_around_point($/;"	f
set_tri_list_bounding_box	igview.c	/^EXPORT	void	set_tri_list_bounding_box($/;"	f
set_tri_list_tolerance	comp3d.c	/^LOCAL	void set_tri_list_tolerance(RECT_GRID *rgr)$/;"	f
set_tri_storage_type	isub.c	/^LIB_LOCAL	void	set_tri_storage_type($/;"	f
set_tris_set_in_box	itrisset.c	/^EXPORT	int	set_tris_set_in_box($/;"	f
set_tst_posn	igview.c	/^EXPORT	void	set_tst_posn(double    *pos)$/;"	f
set_up_color_palette	../util/plotdecs.h	286;"	d
set_up_color_table	../util/plotdecs.h	288;"	d
set_up_colors	../util/plotdecs.h	284;"	d
set_vector_bounding_box	igview.c	/^EXPORT	void set_vector_bounding_box($/;"	f
set_view_plane_normal	../util/plotdecs.h	315;"	d
set_view_reference_point	../util/plotdecs.h	313;"	d
set_view_up_vector	../util/plotdecs.h	317;"	d
set_visibility	../util/plotdecs.h	308;"	d
set_vmalloc_debug	../util/vmalloc.h	125;"	d
set_wall_flag_for_surface	iwallsurf.c	/^EXPORT void  set_wall_flag_for_surface(INTERFACE *intfc)$/;"	f
set_x_face_comps	comp3d.c	/^LOCAL	void	set_x_face_comps($/;"	f
set_xbdry_side	int.h	913;"	d
set_y_face_comps	comp3d.c	/^LOCAL	void	set_y_face_comps($/;"	f
set_ybdry_side	int.h	915;"	d
set_z_face_comps	comp3d.c	/^LOCAL	void	set_z_face_comps($/;"	f
set_zbdry_side	int.h	917;"	d
setapex	triangle.c	876;"	d	file:
setareabound	triangle.c	938;"	d	file:
setcolors	igview.c	/^LOCAL void setcolors(gdImagePtr im, int N)$/;"	f
setdest	triangle.c	873;"	d	file:
setelemattribute	triangle.c	931;"	d	file:
setmark	triangle.c	1013;"	d	file:
setorg	triangle.c	870;"	d	file:
setpoint2tri	triangle.c	1084;"	d	file:
setpointmark	triangle.c	1079;"	d	file:
setsdest	triangle.c	1005;"	d	file:
setsorg	triangle.c	1002;"	d	file:
setvertices2null	triangle.c	879;"	d	file:
sew_surface_to_curve	isurgery.c	/^LOCAL 	void	sew_surface_to_curve($/;"	f
sex_array	../util/vmalloc.h	103;"	d
sex_array	../util/vmalloc.h	114;"	d
sex_array_T	../util/vmalloc.h	157;"	d
sgetstring	../util/fgetstrin.c	/^EXPORT	const char *sgetstring($/;"	f
sgtsl	../util/uprotos.h	340;"	d
sh	triangle.c	/^    shelle *sh;$/;"	m	struct:edge	file:
shade	../util/plotdecs.h	299;"	d
shear_motion_vel	testintfc.c	/^LOCAL int shear_motion_vel($/;"	f
shelle	triangle.c	/^typedef double **shelle;                  \/* Really:  typedef shelle *shelle   *\/$/;"	t	file:
shellecopy	triangle.c	1030;"	d	file:
shelledealloc	triangle.c	/^LOCAL void shelledealloc(shelle *dyingshelle)$/;"	f
shelleequal	triangle.c	1036;"	d	file:
shelles	triangle.c	/^LOCAL memorypool shelles;$/;"	v
shelletraverse	triangle.c	/^LOCAL shelle *shelletraverse(void)$/;"	f
shift_l_seg	iprt3d.c	/^LOCAL void shift_l_seg(GLINE *l_seg, int i_d, int num_seg)$/;"	f
shorient	triangle.c	/^    int shorient;                                       \/* Ranges from 0 to 1. *\/$/;"	m	struct:edge	file:
shortest_2line_dist_dir	comp3d.c	/^LOCAL double shortest_2line_dist_dir($/;"	f
shortest_distance2d	comp2d.c	/^EXPORT double shortest_distance2d($/;"	f
shortest_distance3d	comp3d.c	/^LOCAL void shortest_distance3d($/;"	f
show_BOND_list	comp2d.c	/^LOCAL void show_BOND_list($/;"	f
show_COMP	comp.c	/^EXPORT void show_COMP($/;"	f
show_COMP_1d	comp1d.c	/^LIB_LOCAL void show_COMP_1d($/;"	f
show_COMP_2d	comp2d.c	/^LIB_LOCAL void show_COMP_2d($/;"	f
show_COMP_3d	comp3d.c	/^LIB_LOCAL void show_COMP_3d($/;"	f
show_Comp_list	comp1d.c	/^LOCAL void show_Comp_list($/;"	f
show_TRI_list	comp3d.c	/^LOCAL void show_TRI_list($/;"	f
show_box_comp_crx	comp2d.c	/^EXPORT	void show_box_comp_crx($/;"	f
show_bpoints	setb2d.c	/^LOCAL void show_bpoints($/;"	f
show_comp	imksurf.c	/^EXPORT	void show_comp($/;"	f
show_crossing_tris	isect3d.c	/^LOCAL	void	show_crossing_tris($/;"	f
show_point_comp_lists	comp1d.c	/^LIB_LOCAL void show_point_comp_lists($/;"	f
show_point_list	comp1d.c	/^LOCAL void show_point_list($/;"	f
show_tris_bound_tris	itrisset.c	/^void	show_tris_bound_tris($/;"	f
shwords	triangle.c	/^LOCAL size_t shwords;                      \/* Total words per shell edge. *\/$/;"	v
shx	igview.c	/^LOCAL double	shx=0.0, shy=0.0, shz=0.0;$/;"	v
shy	igview.c	/^LOCAL double	shx=0.0, shy=0.0, shz=0.0;$/;"	v
shz	igview.c	/^LOCAL double	shx=0.0, shy=0.0, shz=0.0;$/;"	v
side	comp3d.c	/^	SIDE    side;		\/* side of tri upon which pt lies *\/$/;"	m	struct:__anon3	file:
side	int.h	/^            int    side;$/;"	m	struct:_HYPER_SURF::_DYNAMIC_COMP_CHANGE
side	iredist.c	/^	int     side;$/;"	m	struct:_TRI_SURF	file:
side	iredist_o2.c	/^  int     side;$/;"	m	struct:_TRI_SURF	file:
side	setb2d.c	/^	BDRY_SIDE      side;  \/* Side containing the bpoint *\/$/;"	m	struct:_BPOINT	file:
side1	itrisset.c	/^	int		side1;$/;"	m	struct:__anon11	file:
side2	itrisset.c	/^	int		side2;$/;"	m	struct:__anon11	file:
side_index	comp3d.c	/^	int     side_index;	\/* used when side == ONEDGE or ONVERTEX *\/$/;"	m	struct:__anon3	file:
side_name	geomutils.c	/^EXPORT const char *side_name($/;"	f
side_of_tri_with_bond	intfc.c	/^EXPORT	int side_of_tri_with_bond($/;"	f
side_vector	isub.c	/^EXPORT	const double* const* side_vector($/;"	f
sides	itrisset.c	/^	int		*sides;$/;"	m	struct:__anon12	file:
sindx	int.h	/^	int  sindx, eindx;$/;"	m	struct:_CURVE
sine_motion_vel	testintfc.c	/^LOCAL int sine_motion_vel($/;"	f
sine_weighted_normal3d	isub.c	/^EXPORT  void sine_weighted_normal3d($/;"	f
single_tri_surface_on_bond	intfc.c	/^LOCAL	boolean single_tri_surface_on_bond($/;"	f
size	../util/vectormalloc.c	/^	unsigned int         size;$/;"	m	struct:_ALLOC_HEADER	file:
size	iTaps.h	/^        int size;       \/*in number of tag_type units *\/$/;"	m	struct:_FT_ETAG
size_bond	userint.h	/^	size_t	size_bond;$/;"	m	struct:_I_USER_INTERFACE
size_bond_tri	userint.h	/^	size_t	size_bond_tri;$/;"	m	struct:_I_USER_INTERFACE
size_curve	userint.h	/^	size_t	size_curve;$/;"	m	struct:_I_USER_INTERFACE
size_dummyshbase	triangle.c	/^LOCAL size_t size_dummyshbase;$/;"	v
size_dummytribase	triangle.c	/^LOCAL size_t   size_dummytribase;$/;"	v
size_edgelist	triangledefs.h	/^    size_t          size_edgelist;                              \/* Out only *\/$/;"	m	struct:triangulateio
size_edgemarkerlist	triangledefs.h	/^    size_t          size_edgemarkerlist;                         \/* Out only *\/$/;"	m	struct:triangulateio
size_hyper_surf	userint.h	/^	size_t	size_hyper_surf;$/;"	m	struct:_I_USER_INTERFACE
size_hyper_surf_bdry	userint.h	/^	size_t	size_hyper_surf_bdry;$/;"	m	struct:_I_USER_INTERFACE
size_hyper_surf_element	userint.h	/^	size_t	size_hyper_surf_element;$/;"	m	struct:_I_USER_INTERFACE
size_interface	userint.h	/^	size_t	size_interface;$/;"	m	struct:_I_USER_INTERFACE
size_neighborlist	triangledefs.h	/^    size_t          size_neighborlist;                         \/* Out only *\/$/;"	m	struct:triangulateio
size_node	userint.h	/^	size_t	size_node;$/;"	m	struct:_I_USER_INTERFACE
size_normlist	triangledefs.h	/^    size_t          size_normlist;                               \/* Out only *\/$/;"	m	struct:triangulateio
size_o_node	userint.h	/^	size_t	size_o_node;$/;"	m	struct:_I_USER_INTERFACE
size_of_pointers	array.h	83;"	d
size_point	userint.h	/^	size_t	size_point;$/;"	m	struct:_I_USER_INTERFACE
size_pointattributelist	triangledefs.h	/^    size_t          size_pointattributelist;                  \/* In \/ out *\/$/;"	m	struct:triangulateio
size_pointlist	triangledefs.h	/^    size_t          size_pointlist;                           \/* In \/ out *\/$/;"	m	struct:triangulateio
size_pointmarkerlist	triangledefs.h	/^    size_t          size_pointmarkerlist;                     \/* In \/ out *\/$/;"	m	struct:triangulateio
size_segmentlist	triangledefs.h	/^    size_t          size_segmentlist;                          \/* In \/ out *\/$/;"	m	struct:triangulateio
size_segmentmarkerlist	triangledefs.h	/^    size_t          size_segmentmarkerlist;                    \/* In \/ out *\/$/;"	m	struct:triangulateio
size_surface	userint.h	/^	size_t	size_surface;$/;"	m	struct:_I_USER_INTERFACE
size_t2uint64_t	../util/output.c	/^EXPORT	uint64_t size_t2uint64_t($/;"	f
size_tri	userint.h	/^	size_t	size_tri;$/;"	m	struct:_I_USER_INTERFACE
size_triangleattributelist	triangledefs.h	/^    size_t          size_triangleattributelist;$/;"	m	struct:triangulateio
size_trianglelist	triangledefs.h	/^    size_t          size_trianglelist;$/;"	m	struct:triangulateio
skip_bdry_tri	itrisset.c	/^EXPORT	boolean  skip_bdry_tri($/;"	f
skip_boundary_hs	int.h	1004;"	d
slotted_disk_func	imkcurve.c	/^EXPORT double slotted_disk_func($/;"	f
smax	geom.h	/^	int smax[MAXD];$/;"	m	struct:_RECT_BOX
smin	geom.h	/^	int smin[MAXD];$/;"	m	struct:_RECT_BOX
smooth_null_tris_loop	itrisset.c	/^EXPORT	void  smooth_null_tris_loop($/;"	f
snext	triangle.c	985;"	d	file:
snextself	triangle.c	989;"	d	file:
sorg	triangle.c	996;"	d	file:
sort_bond_tris	userhooks.c	/^EXPORT	boolean	sort_bond_tris($/;"	f
sort_bpoint	setb2d.c	/^LOCAL void sort_bpoint($/;"	f
sort_cross_curves	isect3d.c	/^LOCAL   C_CURVE	**sort_cross_curves($/;"	f
sort_in_files	../util/fsort.c	/^EXPORT	const char ***sort_in_files($/;"	f
sort_list	../util/fsort.c	/^LOCAL	void	sort_list($/;"	f
sort_point_list	comp1d.c	/^LOCAL	void sort_point_list($/;"	f
sort_pointer_queue	iredist.c	/^LOCAL void sort_pointer_queue($/;"	f
sort_pointer_queue	iredist_o2.c	/^LOCAL   void sort_pointer_queue($/;"	f
sort_tol	comp3d.c	/^LOCAL double	sort_tol = 0.0;$/;"	v
sort_tris_on_blocks	comp3d.c	/^void	sort_tris_on_blocks(INTERFACE	*intfc)$/;"	f
sort_tris_set	itrisset.c	/^EXPORT	void	sort_tris_set($/;"	f
sorted	int.h	104;"	d
space	../util/plotdecs.h	266;"	d
space	../util/vectormalloc.c	/^	size_t               space;$/;"	m	struct:_ALLOC_HEADER	file:
speed	testintfc.c	/^	double speed;$/;"	m	struct:_RADIAL_MOTION_PARAMS	file:
spherical_Volume	igrid.c	/^LOCAL	double spherical_Volume($/;"	f
spherical_num_modes	ifourier.c	/^EXPORT	int spherical_num_modes($/;"	f
spivot	triangle.c	974;"	d	file:
spivotself	triangle.c	978;"	d	file:
splev	../util/uprotos.h	348;"	d
split_curve	intfc.c	/^EXPORT CURVE **split_curve($/;"	f
split_curve2d	intfc.c	/^LOCAL  CURVE **split_curve2d($/;"	f
split_curve3d	intfc.c	/^LOCAL  CURVE **split_curve3d($/;"	f
split_tris_at_split_bond	intfc.c	/^LOCAL	void split_tris_at_split_bond($/;"	f
splitter	triangle.c	/^LOCAL double splitter;\/* Used to split double factors for exact multiplication.*\/$/;"	v
sprint_general_vector	geomutils.c	/^EXPORT	void sprint_general_vector($/;"	f
sqr	../util/cdecs.h	267;"	d
sqr_norm	iredist.c	/^	double   sqr_norm, dist;$/;"	m	struct:_TRI_SURF	file:
sqr_norm	iredist_o2.c	/^  double   sqr_norm, dist;$/;"	m	struct:_TRI_SURF	file:
sqr_norm	isub.c	/^EXPORT	double	sqr_norm($/;"	f
sqr_normal_vector	isub.c	1440;"	d	file:
sscan_float	../util/simpleio.c	/^EXPORT	int	sscan_float($/;"	f
ssym	triangle.c	964;"	d	file:
ssymself	triangle.c	968;"	d	file:
start	int.h	/^	NODE	  *start;$/;"	m	struct:_C_CURVE
start	int.h	/^	POINT  *start;$/;"	m	struct:_BOND
start	int.h	/^	struct	_POINT	*start;$/;"	m	struct:_C_BOND	typeref:struct:_C_BOND::_POINT
start	int.h	/^	struct _NODE *start;$/;"	m	struct:_CURVE	typeref:struct:_CURVE::_NODE
start_clock	../util/times.c	/^EXPORT void start_clock($/;"	f
start_pt	isurgery.c	/^  	POINT 		*start_pt;$/;"	m	struct:_STITCH	file:
start_up	testintfc.c	/^LOCAL	void	start_up($/;"	f
stat_free_from	../util/vmalloc.h	165;"	d
stat_matrix	../util/vmalloc.h	160;"	d
stat_quad_array	../util/vmalloc.h	162;"	d
stat_quin_array	../util/vmalloc.h	163;"	d
stat_scalar	../util/vmalloc.h	158;"	d
stat_sex_array	../util/vmalloc.h	164;"	d
stat_tri_array	../util/vmalloc.h	161;"	d
stat_vector	../util/vmalloc.h	159;"	d
stderr_file	../util/cdecs.h	/^	char    stderr_file[80];$/;"	m	struct:__anon79
stdin_argv	../util/cdecs.h	/^	char    stdin_argv[80];$/;"	m	struct:__anon79
stdin_data	../util/cdecs.h	/^	char    stdin_data[80];$/;"	m	struct:__anon79
stdissolve	triangle.c	1070;"	d	file:
stdout_file	../util/cdecs.h	/^	char    stdout_file[80];$/;"	m	struct:__anon79
steiner	triangledefs.h	/^    int         steiner;$/;"	m	struct:TriangulateOpts
steinerleft	triangle.c	/^LOCAL int steinerleft;$/;"	v
stitch	isurgery.c	/^  	STITCH 	*stitch;$/;"	m	struct:_SEAM	file:
stitch_adj_blk	iblkc2.c	/^EXPORT	void stitch_adj_blk($/;"	f
stitch_bonds	imksurf.c	/^LOCAL  void   stitch_bonds($/;"	f
stitch_curves_of_blk	imksurf.c	/^LOCAL void stitch_curves_of_blk($/;"	f
stitch_inside_bdry_blk	iblkb.c	/^LOCAL	void stitch_inside_bdry_blk($/;"	f
stitch_inside_blk	iblkc2.c	/^EXPORT	void stitch_inside_blk($/;"	f
stop_clock	../util/times.c	/^EXPORT void stop_clock($/;"	f
storage	iTaps.h	/^	byte		*storage;$/;"	m	struct:_IterData
storage_allocated	iTaps.h	/^	boolean		storage_allocated;$/;"	m	struct:_IterData
store	intfc.c	/^EXPORT  POINTER store($/;"	f
store_bond	comp2d.c	/^LOCAL void store_bond($/;"	f
stpivot	triangle.c	1053;"	d	file:
strip_curves_in_surface	trisurf.c	/^LOCAL void strip_curves_in_surface($/;"	f
stripcomm	../util/simpleio.c	/^EXPORT	void	stripcomm($/;"	f
subdomains	int.h	1368;"	d
substitute_a_point	isect3d.c	/^LOCAL  void  substitute_a_point($/;"	f
substitute_a_point_on_surface	isect3d.c	/^LOCAL  void  substitute_a_point_on_surface($/;"	f
suppress_prompts	../util/screen.c	/^EXPORT	boolean suppress_prompts = NO;$/;"	v
surf	int.h	/^	struct _SURFACE	*surf;		\/* surface in which the triangle lies *\/$/;"	m	struct:_TRI	typeref:struct:_TRI::_SURFACE
surf	int.h	/^        SURF            surf[3][2];    \/*six surfaces *\/$/;"	m	struct:_BLK_SURF
surf	iredist.c	/^	SURFACE *surf;$/;"	m	struct:_TRI_SURF	file:
surf	iredist_o2.c	/^  SURFACE *surf;$/;"	m	struct:_TRI_SURF	file:
surf_type	int.h	/^	int surf_type;$/;"	m	struct:_HYPER_SURF
surface	int.h	/^	struct _SURFACE *surface;$/;"	m	struct:_O_SURFACE	typeref:struct:_O_SURFACE::_SURFACE
surface	int.h	/^  	struct _SURFACE *surface;$/;"	m	struct:_BOND_TRI	typeref:struct:_BOND_TRI::_SURFACE
surface	isurgery.c	/^  	SURFACE *surface;$/;"	m	struct:_SEAM	file:
surface_for_head_of_tri_list	int.h	1163;"	d
surface_needs_redist	iredist.c	/^EXPORT boolean surface_needs_redist($/;"	f
surface_number	intfc.c	/^EXPORT	uint64_t surface_number($/;"	f
surfaces	iloc.h	/^	uint64_t *surfaces;    \/* addresses of surfaces *\/$/;"	m	struct:__anon51
surfaces	int.h	/^	SURFACE   **surfaces;$/;"	m	struct:_EG_CRX
surfaces	int.h	/^	struct _SURFACE **surfaces;	\/* Pointer to Set of Surfaces *\/$/;"	m	struct:_INTERFACE	typeref:struct:_INTERFACE::_SURFACE
surfaces	table.h	/^	SURFACE		*****surfaces;	\/* SURFACE lists in each Grid Block *\/$/;"	m	struct:Table
surfacestore	table.h	/^	SURFACE		**surfacestore;	\/* Storage for SURFACE Lists *\/$/;"	m	struct:Table
surfs	iloc.h	/^	uint64_t **surfs;      \/* addresses of surfaces on curves *\/$/;"	m	struct:__anon51
surfs	int.h	/^        SURFACE         **surfs;$/;"	m	struct:_BLK_INFO
surfs	int.h	/^        SURFACE         *surfs[8];$/;"	m	struct:_BLK_TRI
swap	../util/fsort.c	/^LOCAL	void	swap(NAME_LIST **files, int i, int j)$/;"	f
swap_positions	itrisset.c	/^EXPORT	void	swap_positions($/;"	f
sym	triangle.c	756;"	d	file:
symself	triangle.c	760;"	d	file:
t	int.h	/^    	struct	_TRI	*t,          \/* pair of intersecting triangles *\/$/;"	m	struct:_C_SURF	typeref:struct:_C_SURF::_TRI
t_last	comp2d.c	/^LOCAL	double	t_last;	\/* Parameter t on last call to shortest_distance2d *\/$/;"	v
table	int.h	/^	struct Table	*table;	\/* Pointer to Interface Table *\/$/;"	m	struct:_INTERFACE	typeref:struct:_INTERFACE::Table
table_number	intfc.c	/^EXPORT	uint64_t table_number($/;"	f
table_of_interface	intfc.c	/^EXPORT struct Table *table_of_interface($/;"	f
taegeuk_func	imkcurve.c	/^EXPORT double taegeuk_func($/;"	f
tag_array_length	iTaps.h	/^        int tag_array_length;  \/*length of entity tag array*\/$/;"	m	struct:_FTMESH
tag_shf	ppcopy.c	/^int	tag_shf = 100;$/;"	v
tags	iTaps.h	/^        void **tags;$/;"	m	struct:_FTEHANDLE
tail	arrayutils.c	/^	POINTER_Q *head, *tail;	\/* Head and Tail of linked list *\/$/;"	m	struct:_PQ_HEADER	file:
tail_of_pointer_queue	arrayutils.c	/^EXPORT	POINTER_Q *tail_of_pointer_queue($/;"	f
tail_of_tri_list	int.h	1165;"	d
tangled_tris_bound_box	itrisset.c	/^EXPORT	boolean	tangled_tris_bound_box($/;"	f
tecplot_blk_intfc_plot	igview.c	/^EXPORT	void	tecplot_blk_intfc_plot($/;"	f
tecplot_box	igview.c	/^EXPORT	void	tecplot_box($/;"	f
tecplot_curve	igview.c	/^EXPORT  void    tecplot_curve($/;"	f
tecplot_interface	igview.c	/^EXPORT  void    tecplot_interface($/;"	f
tecplot_interface_in_box	igview.c	/^EXPORT  void    tecplot_interface_in_box($/;"	f
tecplot_plot_surfaces	igview.c	/^LOCAL	void	tecplot_plot_surfaces($/;"	f
tecplot_show_box_tri	igview.c	/^EXPORT	void tecplot_show_box_tri($/;"	f
tecplot_show_box_tris	igview.c	/^EXPORT  void tecplot_show_box_tris($/;"	f
tecplot_show_tris	igview.c	/^EXPORT  void tecplot_show_tris($/;"	f
tecplot_surface	igview.c	/^EXPORT  void    tecplot_surface($/;"	f
tecplot_surface_in_ball	igview.c	/^EXPORT  void    tecplot_surface_in_ball($/;"	f
tecplot_surface_in_box	igview.c	/^LOCAL	void tecplot_surface_in_box($/;"	f
tecplot_surface_special	igview.c	/^LOCAL  void    tecplot_surface_special($/;"	f
tecplot_tri_queue	iredist.c	/^LOCAL  void  tecplot_tri_queue($/;"	f
tecplot_tri_queue	iredist_o2.c	/^LOCAL   void  tecplot_tri_queue($/;"	f
tecplot_triad	igview.c	/^EXPORT  void tecplot_triad($/;"	f
tecplot_tris	igview.c	/^EXPORT	void	tecplot_tris($/;"	f
tempspace	int.h	/^	int tempspace;   $/;"	m	struct:_INDEX
terminate_run	../util/cleanup.c	/^LOCAL	void	terminate_run($/;"	f
terminate_run_handler	../util/cleanup.c	/^LOCAL	Error_handler	terminate_run_handler;$/;"	v
terminate_run_handler	../util/cleanup.c	/^LOCAL	void	terminate_run_handler($/;"	f
test1d	testintfc.c	/^LOCAL	void	test1d(void)$/;"	f
test2d	testintfc.c	/^LOCAL	void test2d(void)$/;"	f
test3d	testintfc.c	/^LOCAL	void test3d(void)$/;"	f
test_and_bifurcate	iprt3d.c	/^LOCAL int test_and_bifurcate(GLINE *lseg, GTRI tri, GLINE *l_b)$/;"	f
test_coplanar_cross	isect3d.c	/^LOCAL C_BOND *test_coplanar_cross($/;"	f
test_cross	isect3d.c	/^LOCAL C_BOND *test_cross($/;"	f
test_tris_intersection	itrisset.c	/^EXPORT	boolean	test_tris_intersection($/;"	f
test_vmalloc_integrity	../util/vectormalloc.c	/^LOCAL	void	test_vmalloc_integrity(void)$/;"	f
text_height_angle	../util/plotdecs.h	279;"	d
the_bond	idiagnostic.c	/^EXPORT boolean the_bond(BOND *b)$/;"	f
the_point	idiagnostic.c	/^EXPORT boolean the_point(POINT *pt)$/;"	f
the_point_one	idiagnostic.c	/^LOCAL boolean the_point_one(POINT *pt, double *p)$/;"	f
the_pt	idiagnostic.c	/^EXPORT  boolean  the_pt(double *pt)$/;"	f
the_pt_one	idiagnostic.c	/^LOCAL   boolean the_pt_one(double *pt, double *p)$/;"	f
the_side	idiagnostic.c	/^EXPORT boolean the_side(TRI  *tri)$/;"	f
the_tri	idiagnostic.c	/^EXPORT boolean the_tri(TRI *tri)$/;"	f
the_tri1	idiagnostic.c	/^EXPORT boolean the_tri1(TRI *tri)$/;"	f
the_tri_rot	idiagnostic.c	/^EXPORT boolean the_tri_rot(TRI *tri)$/;"	f
theta	geom.h	/^	double theta;$/;"	m	struct:__anon49
theta	geom.h	/^        double theta;$/;"	m	struct:__anon38
three_D_pt_trans	iprt3d.c	/^LOCAL void three_D_pt_trans(GPT p, GPT *p_t)$/;"	f
three_D_tri_list_trans	iprt3d.c	/^LOCAL void three_D_tri_list_trans(void)$/;"	f
threed_interface_plot	iprt3d.c	/^LIB_LOCAL void threed_interface_plot($/;"	f
time_step	../util/fsort.c	/^	int        time_step;$/;"	m	struct:_NAME_LIST	file:
title	../util/cdecs.h	535;"	d
tnor	itrisset.c	/^	double		*tnor;$/;"	m	struct:__anon12	file:
top	../util/times.c	/^LOCAL int  top = 0;			\/* Pointer To top of Stack *\/$/;"	v
top	table.h	/^	ALIGN		*top;		\/* Low Free location in Top Chunk *\/$/;"	m	struct:Table
topo	iTaps.h	/^        int             topo;           \/* The type of entities being *\/$/;"	m	struct:_IterData
topo	iTaps.h	/^        int topo;       \/*the object type (iMesh_TOPOLOGY) *\/$/;"	m	struct:_FTEHANDLE
topological_grid	table.h	234;"	d
total_alloc	../util/vectormalloc.c	/^LOCAL	int	total_alloc = 0;$/;"	v
total_num_of_bonds	comp2d.c	/^LOCAL int total_num_of_bonds;	\/* Computes sum of num_of_bonds[iy][ix] *\/$/;"	v
total_num_of_tri_blocks	comp3d.c	/^LOCAL	int total_num_of_tri_blocks;	\/* sum of num_of_tris[iz][iy][ix] *\/$/;"	v
trace_foutput	../util/output.c	/^EXPORT void trace_foutput($/;"	f
trace_output	../util/output.c	/^EXPORT void trace_output(void)$/;"	f
transfernodes	triangle.c	/^LOCAL void transfernodes($/;"	f
translation_vel	testintfc.c	/^LOCAL int translation_vel($/;"	f
traversalinit	triangle.c	/^LOCAL void traversalinit($/;"	f
traverse	triangle.c	/^LOCAL void *traverse($/;"	f
tri	comp3d.c	/^	TRI     *tri;		\/* Triangle being projected upon *\/$/;"	m	struct:__anon3	file:
tri	iTaps.h	/^            struct _TRI *tri;$/;"	m	union:_FTEHANDLE::__anon74	typeref:struct:_FTEHANDLE::__anon74::_TRI
tri	int.h	/^	TRI	tri;$/;"	m	union:_HYPER_SURF_ELEMENT
tri	int.h	/^	struct _TRI      *tri;$/;"	m	union:_TRI_NEIGHBOR	typeref:struct:_TRI_NEIGHBOR::_TRI
tri	int.h	/^	struct _TRI     *tri;$/;"	m	struct:_BOND_TRI	typeref:struct:_BOND_TRI::_TRI
tri	int.h	/^        TRI                *tri;$/;"	m	struct:_CRXING
tri	int.h	/^        TRI     *tri;$/;"	m	struct:__anon71
tri	int.h	/^typedef struct {struct _TRI tri; struct _SURFACE *s;} TRI_LIST_HEAD;$/;"	m	struct:__anon57	typeref:struct:__anon57::_TRI
tri	iredist.c	/^	TRI	*tri;$/;"	m	struct:_TRI_SURF	file:
tri	iredist_o2.c	/^  TRI	*tri;$/;"	m	struct:_TRI_SURF	file:
tri	triangle.c	/^    triangle *tri;$/;"	m	struct:triedge	file:
tri1	itrisset.c	/^	TRI		*tri1;$/;"	m	struct:__anon11	file:
tri2	itrisset.c	/^	TRI		*tri2;$/;"	m	struct:__anon11	file:
tri_area_tol	itrisset.c	/^LOCAL   double   tri_area_tol;$/;"	v
tri_array	../util/vmalloc.h	111;"	d
tri_array	../util/vmalloc.h	91;"	d
tri_array_T	../util/vmalloc.h	154;"	d
tri_at_bond	int3d.c	/^LOCAL	TRI*	tri_at_bond($/;"	f
tri_blocks	comp3d.c	/^LOCAL	int *tri_blocks = NULL;	\/* Points to temporary array *\/$/;"	v
tri_blocks_size	comp3d.c	/^LOCAL	int tri_blocks_size, tri_blocks_top;$/;"	v
tri_blocks_top	comp3d.c	/^LOCAL	int tri_blocks_size, tri_blocks_top;$/;"	v
tri_bound_block	itrisset.c	/^EXPORT	void	tri_bound_block($/;"	f
tri_edge_crossing	comp3d.c	/^EXPORT boolean tri_edge_crossing($/;"	f
tri_in_grid_block	itrisset.c	/^EXPORT  boolean tri_in_grid_block($/;"	f
tri_list	iprt3d.c	/^LOCAL GTRI *tri_list = NULL;$/;"	v
tri_list_computed_by_normal	isub.c	/^EXPORT	int	tri_list_computed_by_normal($/;"	f
tri_number	intfc.c	/^EXPORT	uint64_t tri_number($/;"	f
tri_queue_test	iredist.c	/^LOCAL  void  tri_queue_test($/;"	f
tri_queue_test	iredist_o2.c	/^LOCAL   void  tri_queue_test($/;"	f
tri_recorded	itrisset.c	/^EXPORT	boolean tri_recorded($/;"	f
tri_side_consistent	icheck3d.c	/^LOCAL	boolean tri_side_consistent($/;"	f
tri_side_intersect	itrisset.c	/^LOCAL  boolean tri_side_intersect($/;"	f
tri_status	iredist.c	/^LOCAL	TRI_STATUS tri_status($/;"	f
tri_status	iredist_o2.c	/^LOCAL	TRI_STATUS tri_status($/;"	f
tri_storage_type	isub.c	/^LOCAL	TRI_STORAGE_TYPE tri_storage_type = TRI_PLUS_NORMAL;$/;"	v
tri_surface_from_queue	iredist.c	567;"	d	file:
tri_surface_from_queue	iredist_o2.c	856;"	d	file:
tri_workspace	int.h	/^	POINTER  tri_workspace;$/;"	m	struct:_INDEX
triangle	triangle.c	/^typedef double **triangle;            \/* Really:  typedef triangle *triangle   *\/$/;"	t	file:
triangle_func	imkcurve.c	/^EXPORT double triangle_func($/;"	f
trianglearealist	triangledefs.h	/^    REAL            *trianglearealist;                         \/* In only *\/$/;"	m	struct:triangulateio
triangleattributelist	triangledefs.h	/^    REAL            *triangleattributelist;                    \/* In \/ out *\/$/;"	m	struct:triangulateio
triangledealloc	triangle.c	/^LOCAL void triangledealloc(triangle *dyingtriangle)$/;"	f
triangledeinit	triangle.c	/^LOCAL void triangledeinit(void)$/;"	f
triangleinit	triangle.c	/^LOCAL void triangleinit(void)$/;"	f
trianglelist	triangledefs.h	/^    int             *trianglelist;                            \/* In \/ out *\/$/;"	m	struct:triangulateio
triangles	triangle.c	/^LOCAL memorypool triangles;$/;"	v
triangletraverse	triangle.c	/^LOCAL triangle *triangletraverse(void)$/;"	f
triangulate	triangle.c	/^EXPORT void triangulate($/;"	f
triangulateio	triangledefs.h	/^struct triangulateio {$/;"	s
triangulateio	triangledefs.h	/^typedef struct triangulateio triangulateio;$/;"	t	typeref:struct:triangulateio
triangulatepolygon	triangle.c	/^LOCAL void triangulatepolygon($/;"	f
triedge	triangle.c	/^struct triedge {$/;"	s	file:
triedge	triangle.c	/^typedef struct triedge triedge;$/;"	t	typeref:struct:triedge	file:
triedgecopy	triangle.c	900;"	d	file:
triedgeequal	triangle.c	906;"	d	file:
triple_product	geomutils.c	/^EXPORT double triple_product($/;"	f
tris	iloc.h	/^	int      ***tris;	    \/* tri numbers of tris bounding curve *\/$/;"	m	struct:__anon51
tris	int.h	/^	TRI	**tris;$/;"	m	struct:_WEDGE
tris	int.h	/^	struct _TRI **tris;	\/* 3D for tris with vertex as the point *\/$/;"	m	struct:_POINT	typeref:struct:_POINT::_TRI
tris	isub.c	/^	TRI	**tris;$/;"	m	struct:_TRI_LIST_AT_VERTEX	file:
tris	itrisset.c	/^	TRI		**tris;$/;"	m	struct:__anon12	file:
tris	table.h	/^	TRI		*****tris;	\/* TRI lists in each Grid Block *\/$/;"	m	struct:Table
tris_bound_box	itrisset.c	/^EXPORT	void	tris_bound_box($/;"	f
tris_crx_plane	itrisset.c	/^EXPORT	boolean	tris_crx_plane($/;"	f
tris_intersection	itrisset.c	/^EXPORT	int	tris_intersection($/;"	f
tris_on_side_of_bond_for_join	int3d.c	/^EXPORT	boolean tris_on_side_of_bond_for_join($/;"	f
tris_sect	itrisset.c	/^EXPORT	boolean	tris_sect($/;"	f
tris_set_in_top_box	itrisset.c	/^EXPORT	int	tris_set_in_top_box($/;"	f
tris_with_crx_pts	itrisset.c	/^LOCAL	int	tris_with_crx_pts($/;"	f
tris_with_pt_inside	itrisset.c	/^EXPORT	boolean tris_with_pt_inside($/;"	f
tristore	table.h	/^	TRI		**tristore;	\/* Storage for TRI Lists *\/$/;"	m	struct:Table
triwords	triangle.c	/^LOCAL size_t triwords;                       \/* Total words per triangle. *\/$/;"	v
trk_wv_val	int.h	/^        int         (*trk_wv_val)(CURVE*); $/;"	m	struct:_BLK_CRX2
tsbond	triangle.c	1059;"	d	file:
tsdissolve	triangle.c	1065;"	d	file:
tspivot	triangle.c	1046;"	d	file:
tst_pt	igview.c	/^LOCAL  double  tst_pt[3] = { 1.01255, 0.1418, 1.435 };$/;"	v
tst_pt1	igview.c	/^LOCAL  double  tst_pt1[3] = { 1.01255, 0.1418, 1.435 };$/;"	v
two_points_share_side	isub.c	/^EXPORT 	int two_points_share_side($/;"	f
two_tris_share_pts	itrisset.c	/^EXPORT	boolean two_tris_share_pts($/;"	f
two_tris_share_side	itrisset.c	/^EXPORT  boolean two_tris_share_side($/;"	f
type	../util/cdecs.h	/^	union {int itype; const char *ctype;} type;$/;"	m	struct:_Prompt_type	typeref:union:_Prompt_type::__anon81
type	iTaps.h	/^	int type;$/;"	m	struct:_FT_ESET_HANDLE
type	iTaps.h	/^        int type;       \/* int\/float\/EH\/etc *\/$/;"	m	struct:_FT_ETAG
u_pp_all_gather	../util/ppsub.c	/^EXPORT	void	u_pp_all_gather($/;"	f
u_pp_bcast	../util/ppsub.c	/^EXPORT	void	u_pp_bcast($/;"	f
u_pp_irecv	../util/ppsub.c	/^EXPORT	void	u_pp_irecv($/;"	f
u_pp_isend	../util/ppsub.c	/^EXPORT	void	u_pp_isend($/;"	f
u_pp_recv	../util/ppsub.c	/^EXPORT	void	u_pp_recv($/;"	f
u_pp_recv_any	../util/ppsub.c	/^EXPORT	void	u_pp_recv_any($/;"	f
u_pp_send	../util/ppsub.c	/^EXPORT	void	u_pp_send($/;"	f
u_pp_send_all	../util/ppsub.c	/^EXPORT	void	u_pp_send_all($/;"	f
u_ptr2ull	../util/simpleio.c	/^EXPORT	uint64_t u_ptr2ull(void* p)$/;"	f
ubuf	geom.h	/^	int   ubuf[3];	  \/* Upper buffer zone width *\/$/;"	m	struct:_RECT_GRID
uc_head	../util/fsort.c	/^FLIST	*uc_head;$/;"	v
ucomp	int.h	/^	COMPONENT          lcomp, ucomp;$/;"	m	struct:_CRXING
ucomp	int.h	/^        COMPONENT       lcomp, ucomp;   \/* add for 2d bond construction *\/$/;"	m	struct:_BBI_POINT2
uint64_t	../util/cdecs.h	/^typedef u_int64_t uint64_t;$/;"	t
uint64_t	../util/cdecs.h	/^typedef unsigned long long uint64_t;$/;"	t
umax	geom.h	/^        int umax[4][2][3];$/;"	m	struct:_COMM_BOX
umin	geom.h	/^        int umin[4][2][3];$/;"	m	struct:_COMM_BOX
unallocateditems	triangle.c	/^    int       unallocateditems;$/;"	m	struct:memorypool	file:
undo_insert_point_in_tri	userhooks.c	/^EXPORT	boolean	undo_insert_point_in_tri($/;"	f
undo_insert_point_in_tri_side	userhooks.c	/^EXPORT	boolean	undo_insert_point_in_tri_side($/;"	f
uni_array	../util/vmalloc.h	109;"	d
uni_array	../util/vmalloc.h	83;"	d
uninfect	triangle.c	917;"	d	file:
unique_add_to_pointers	array.h	64;"	d
unset_debug	../util/debug.c	/^EXPORT	void unset_debug()$/;"	f
untangle_and_delete_loops	testintfc.c	/^LOCAL void untangle_and_delete_loops(INTERFACE *intfc, CROSS *cross)$/;"	f
update_neighbor_tris	int3d.c	/^LOCAL  boolean update_neighbor_tris($/;"	f
update_num_points	top.c	/^EXPORT	void update_num_points($/;"	f
user_clean_up	../util/cleanup.c	/^LOCAL	void	(*user_clean_up)(void) = NULL;$/;"	v
user_copy_hyper_surf	userhooks.c	/^EXPORT	void user_copy_hyper_surf($/;"	f
user_fprint_curve	userhooks.c	/^EXPORT	void user_fprint_curve($/;"	f
user_fprint_interface	userhooks.c	/^EXPORT	void user_fprint_interface($/;"	f
user_fprint_intfc_rect_grids	userhooks.c	/^EXPORT	void user_fprint_intfc_rect_grids($/;"	f
user_fprint_node	userhooks.c	/^EXPORT	void user_fprint_node($/;"	f
user_fprint_point	userhooks.c	/^EXPORT	void user_fprint_point($/;"	f
user_fprint_surface	userhooks.c	/^EXPORT	void user_fprint_surface($/;"	f
user_install_faces	userhooks.c	/^EXPORT	void user_install_faces($/;"	f
user_join_curves	userhooks.c	/^EXPORT	boolean user_join_curves($/;"	f
user_make_interface	userhooks.c	/^EXPORT	void user_make_interface($/;"	f
user_read_curve	userhooks.c	/^EXPORT	void user_read_curve($/;"	f
user_read_node	userhooks.c	/^EXPORT	int user_read_node($/;"	f
user_read_point	userhooks.c	/^EXPORT	void user_read_point($/;"	f
user_read_print_curve	userhooks.c	/^EXPORT	boolean user_read_print_curve($/;"	f
user_read_print_interface	userhooks.c	/^EXPORT	int user_read_print_interface($/;"	f
user_read_print_intfc_rect_grids	userhooks.c	/^EXPORT	void user_read_print_intfc_rect_grids($/;"	f
user_read_print_node	userhooks.c	/^EXPORT	void user_read_print_node($/;"	f
user_read_print_point	userhooks.c	/^EXPORT	void user_read_print_point($/;"	f
user_read_print_surface	userhooks.c	/^EXPORT	void user_read_print_surface($/;"	f
user_read_surface	userhooks.c	/^EXPORT	void user_read_surface($/;"	f
user_split_curve	userhooks.c	/^EXPORT	boolean user_split_curve($/;"	f
user_type	int.h	/^	int user_type;		\/\/ Set via api, and returned to user when$/;"	m	struct:_CURVE
useshelles	triangle.c	/^LOCAL int useshelles;$/;"	v
ux	geom.h	/^        int ux;$/;"	m	struct:_COMM_BOX
uy	geom.h	/^        int uy;$/;"	m	struct:_COMM_BOX
value_x	trisurf.c	/^LOCAL double value_x($/;"	f
value_y	trisurf.c	/^LOCAL double value_y($/;"	f
value_z	trisurf.c	/^LOCAL double value_z($/;"	f
vararea	triangledefs.h	/^    boolean     vararea;$/;"	m	struct:TriangulateOpts
variable_mesh	geom.h	/^	int   variable_mesh[3]; \/* YES for variable dh in ith direction *\/$/;"	m	struct:_RECT_GRID
vd_cell_edge	geom.h	244;"	d
vec_sub	iprt3d.c	/^LOCAL void vec_sub(GPT v1, GPT v2, GPT *v3)$/;"	f
vector_T	../util/vmalloc.h	152;"	d
vector_on_tri_side	isub.c	/^EXPORT	const double *vector_on_tri_side($/;"	f
vector_product	geomutils.c	/^EXPORT	double vector_product($/;"	f
vector_product_on_bonds	isub.c	/^EXPORT 	void 	vector_product_on_bonds($/;"	f
vector_product_on_points	geomutils.c	/^EXPORT 	double 	vector_product_on_points($/;"	f
vel	int.h	/^	double           vel[3];$/;"	m	struct:_POINT
vel	testintfc.c	/^	double vel[MAXD];$/;"	m	struct:_TRANS_PARAMS	file:
vertex	int.h	/^        POINT           *vertex;$/;"	m	struct:__anon61
vertex_index	comp3d.c	/^	int     vertex_index;	\/* used when side == ONVERTEX *\/$/;"	m	struct:__anon3	file:
vertex_on_bond	int.h	1211;"	d
viewport	../util/plotdecs.h	269;"	d
viri	triangle.c	/^LOCAL memorypool viri;$/;"	v
visible	iprt3d.c	/^LOCAL int visible(GPT *f)$/;"	f
vmalloc_debug	../util/vmalloc.h	124;"	d
vmalloc_debug_on	../util/vectormalloc.c	/^EXPORT    int  vmalloc_debug_on = 0;$/;"	v
vmalloc_debug_on	../util/vmalloc.h	/^IMPORT int vmalloc_debug_on;$/;"	v
vmax	testintfc.c	/^	double vmax;$/;"	m	struct:_SINE_MOTION_PARAMS	file:
vol_frac	table.h	/^	double		***vol_frac;	\/* Volume frac in each Grid Block *\/$/;"	m	struct:Table
volume_corner1_case06	iblkc2.c	/^LOCAL double volume_corner1_case06($/;"	f
volume_corner1_case14	iblkc2.c	/^LOCAL double volume_corner1_case14($/;"	f
volume_corner1_p2_case14	iblkc2.c	/^LOCAL double volume_corner1_p2_case14($/;"	f
volume_corner2_case06	iblkc2.c	/^LOCAL double volume_corner2_case06($/;"	f
volume_corner2_case09	iblkc2.c	/^LOCAL double volume_corner2_case09($/;"	f
volume_corner4_case14	iblkc2.c	/^LOCAL double volume_corner4_case14($/;"	f
volume_corner_case03	iblkc2.c	/^LOCAL double volume_corner_case03($/;"	f
volume_corner_case08	iblkc2.c	/^LOCAL double volume_corner_case08($/;"	f
volume_edge1_case11	iblkc2.c	/^LOCAL double volume_edge1_case11($/;"	f
volume_edge1_p2_case11	iblkc2.c	/^LOCAL double volume_edge1_p2_case11($/;"	f
volume_edge2_case11	iblkc2.c	/^LOCAL double volume_edge2_case11($/;"	f
volume_edge_case02	iblkc2.c	/^LOCAL double volume_edge_case02($/;"	f
volume_edge_case08	iblkc2.c	/^LOCAL double volume_edge_case08($/;"	f
volume_fraction	int.h	/^	double		volume_fraction;$/;"	m	struct:_BLK_TRI
volume_glider_case04	iblkc2.c	/^LOCAL double volume_glider_case04($/;"	f
volume_glider_case13	iblkc2.c	/^LOCAL double volume_glider_case13($/;"	f
volume_glider_p2_case13	iblkc2.c	/^LOCAL double volume_glider_p2_case13($/;"	f
volume_hexagon_case05	iblkc2.c	/^LOCAL double volume_hexagon_case05($/;"	f
volume_hexagon_p4_case14	iblkc2.c	/^LOCAL double volume_hexagon_p4_case14($/;"	f
volume_hexagon_p5_case14	iblkc2.c	/^LOCAL double volume_hexagon_p5_case14($/;"	f
volume_hexagon_p6_case14	iblkc2.c	/^LOCAL double volume_hexagon_p6_case14($/;"	f
volume_plane_case01	iblkc2.c	/^LOCAL double volume_plane_case01($/;"	f
volume_twister_case07	iblkc2.c	/^LOCAL double volume_twister_case07($/;"	f
volume_twister_case10	iblkc2.c	/^LOCAL double volume_twister_case10($/;"	f
voronoi	triangledefs.h	/^    boolean     voronoi;$/;"	m	struct:TriangulateOpts
vtk_interface_plot	igview.c	/^EXPORT void vtk_interface_plot($/;"	f
vtk_interface_plot_byname	igview.c	/^EXPORT void vtk_interface_plot_byname($/;"	f
vtk_plot_curves	igview.c	/^LOCAL   void    vtk_plot_curves($/;"	f
vtk_plot_curves_byname	igview.c	/^LOCAL   void    vtk_plot_curves_byname($/;"	f
vtk_plot_surfaces	igview.c	/^LOCAL	void	vtk_plot_surfaces($/;"	f
vtk_plot_surfaces_byname	igview.c	/^LOCAL	void	vtk_plot_surfaces_byname($/;"	f
vtk_print_box	igview.c	/^LOCAL	void   vtk_print_box($/;"	f
vtp_interface_plot	igview.c	/^EXPORT void vtp_interface_plot($/;"	f
vtp_plot_surfaces	igview.c	/^LOCAL	void	vtp_plot_surfaces($/;"	f
w	geom.h	/^        double w;		$/;"	m	struct:__anon45
wave_length	testintfc.c	/^	double wave_length;$/;"	m	struct:_SINE_MOTION_PARAMS	file:
wedge	int.h	/^	struct  _WEDGE	*wedge;$/;"	m	struct:_NEIGHBORHOOD	typeref:struct:_NEIGHBORHOOD::_WEDGE
winding_number	intfc.c	/^LIB_LOCAL int	winding_number($/;"	f
window	../util/plotdecs.h	268;"	d
wing_func	imkcurve.c	/^EXPORT double wing_func($/;"	f
within	iprt3d.c	/^LOCAL int within(double arg)$/;"	f
within_interval	int.h	1017;"	d
within_tri	comp3d.c	/^EXPORT boolean within_tri($/;"	f
wordsize	triangle.c	/^    size_t    wordsize;$/;"	m	struct:memorypool	file:
work	../util/ppsub.c	/^static	void	*work = NULL;$/;"	v	file:
work_len	../util/ppsub.c	/^static	size_t	work_len = 0;$/;"	v	file:
write_color	igview.c	/^LOCAL 	void 	write_color( 		\/* for geomview files *\/$/;"	f
write_interpolated_color	igview.c	/^LOCAL void write_interpolated_color($/;"	f
writeedges	triangle.c	/^LOCAL void writeedges($/;"	f
writeelements	triangle.c	/^LOCAL void writeelements($/;"	f
writeneighbors	triangle.c	/^LOCAL void writeneighbors($/;"	f
writenodes	triangle.c	/^LOCAL void writenodes($/;"	f
writepoly	triangle.c	/^LOCAL void writepoly($/;"	f
writevoronoi	triangle.c	/^LOCAL void writevoronoi($/;"	f
x	geom.h	/^        double x[1];$/;"	m	struct:__anon44
x	geom.h	/^        double x[3];$/;"	m	struct:__anon39
x0	geom.h	/^	double x0;$/;"	m	struct:__anon43
x0	geom.h	/^        double x0;		$/;"	m	struct:__anon37
x0	geom.h	/^        double x0;		$/;"	m	struct:__anon45
x0	geom.h	/^        double x0;$/;"	m	struct:__anon35
x0	geom.h	/^        double x0;$/;"	m	struct:__anon38
x0	geom.h	/^        double x0;$/;"	m	struct:__anon40
x0	geom.h	/^        double x0;$/;"	m	struct:__anon41
x0	geom.h	/^        double x0;$/;"	m	struct:__anon42
x1	geom.h	/^	double x1;$/;"	m	struct:__anon41
x1	geom.h	/^	double x1;$/;"	m	struct:__anon43
x1	geom.h	/^        double x1;$/;"	m	struct:__anon35
x1	geom.h	/^        double x1;$/;"	m	struct:__anon42
x2	geom.h	/^	double x2;$/;"	m	struct:__anon41
x2	geom.h	/^        double x2;$/;"	m	struct:__anon42
x3	geom.h	/^	double x3;$/;"	m	struct:__anon42
x4	geom.h	/^	double x4;$/;"	m	struct:__anon42
x_0	testintfc.c	/^	double x_0,y_0;$/;"	m	struct:_SHEAR_MOTION_PARAMS	file:
x_crx	imkcurve.c	/^        BBI_POINT ***x_crx;$/;"	m	struct:_EG_CRX_2D	file:
x_crx	int.h	/^        BBI_POINT ****x_crx;$/;"	m	struct:_EG_CRX
x_curve_crx	imkcurve.c	/^        BBI_POINT ***x_curve_crx;$/;"	m	struct:_EG_CRX_2D	file:
x_curve_crx	int.h	/^        BBI_POINT ****x_curve_crx;$/;"	m	struct:_EG_CRX
x_rot	iblkb.c	/^LOCAL	void x_rot(BLK_CRX *blk_crx)$/;"	f
x_rotation	iblkc2.c	/^LOCAL   void x_rotation(BLK_CRX *blk_crx)$/;"	f
x_rotation	iblkc3.c	/^LOCAL   void x_rotation(BLK_CRX *blk_crx)$/;"	f
xbdry_side	int.h	907;"	d
xgraph_2d_intfc	ixgraph.c	/^EXPORT	void xgraph_2d_intfc($/;"	f
xgraph_2d_intfc_within_range	ixgraph.c	/^EXPORT	void xgraph_2d_intfc_within_range($/;"	f
xgraph_2d_reflection	ixgraph.c	/^EXPORT	void xgraph_2d_reflection($/;"	f
xgraph_RECT_GRID	ixgraph.c	/^EXPORT 	void 	xgraph_RECT_GRID($/;"	f
xgraph_affine_vector	ixgraph.c	/^EXPORT 	void 	xgraph_affine_vector($/;"	f
xgraph_curve	ixgraph.c	/^EXPORT 	void 	xgraph_curve($/;"	f
xgraph_curve_file	ixgraph.c	/^LOCAL  	void 	xgraph_curve_file($/;"	f
xgraph_curve_within_range	ixgraph.c	/^LOCAL	void xgraph_curve_within_range($/;"	f
xgraph_file_open	ixgraph.c	/^EXPORT 	FILE 	*xgraph_file_open($/;"	f
xgraph_grid	ixgraph.c	/^LOCAL  	void 	xgraph_grid($/;"	f
xgraph_interface_curves	ixgraph.c	/^EXPORT  void 	xgraph_interface_curves($/;"	f
xgraph_interface_nodes	ixgraph.c	/^EXPORT 	void	xgraph_interface_nodes($/;"	f
xgraph_interface_surfaces	ixgraph.c	/^EXPORT 	void	xgraph_interface_surfaces($/;"	f
xgraph_line_segment	ixgraph.c	/^EXPORT 	void 	xgraph_line_segment($/;"	f
xgraph_new_data_set	ixgraph.c	/^EXPORT 	void 	xgraph_new_data_set($/;"	f
xgraph_point	ixgraph.c	/^EXPORT 	void 	xgraph_point($/;"	f
xgraph_surface_tris	ixgraph.c	/^LOCAL  	void 	xgraph_surface_tris($/;"	f
xgraph_tri	ixgraph.c	/^EXPORT 	void 	xgraph_tri($/;"	f
xgraph_tris_list	ixgraph.c	/^EXPORT 	void 	xgraph_tris_list($/;"	f
xheight	igview.c	/^	double xheight;$/;"	m	struct:DATA	file:
xmax	igview.c	/^	int xmax;$/;"	m	struct:DATA	file:
xmax	triangle.c	/^LOCAL double xmin, xmax, ymin, ymax;                    \/* x and y bounds. *\/$/;"	v
xmin	igview.c	/^	int xmin;$/;"	m	struct:DATA	file:
xmin	triangle.c	/^LOCAL double xmin, xmax, ymin, ymax;                    \/* x and y bounds. *\/$/;"	v
xtransform	igview.c	/^LOCAL double xtransform(double x)$/;"	f
y	geom.h	/^        double y;$/;"	m	struct:__anon35
y	geom.h	/^        double y;$/;"	m	struct:__anon41
y	geom.h	/^        double y;$/;"	m	struct:__anon42
y	geom.h	/^        double y[1];$/;"	m	struct:__anon44
y	geom.h	/^        double y[3];$/;"	m	struct:__anon39
y0	geom.h	/^	double y0;$/;"	m	struct:__anon43
y0	geom.h	/^        double y0;		$/;"	m	struct:__anon37
y0	geom.h	/^        double y0;		$/;"	m	struct:__anon45
y0	geom.h	/^        double y0;$/;"	m	struct:__anon38
y0	geom.h	/^        double y0;$/;"	m	struct:__anon40
y1	geom.h	/^	double y1;$/;"	m	struct:__anon43
y_0	testintfc.c	/^	double x_0,y_0;$/;"	m	struct:_SHEAR_MOTION_PARAMS	file:
y_crx	imkcurve.c	/^        BBI_POINT ***y_crx;$/;"	m	struct:_EG_CRX_2D	file:
y_crx	int.h	/^        BBI_POINT ****y_crx;$/;"	m	struct:_EG_CRX
y_curve_crx	imkcurve.c	/^        BBI_POINT ***y_curve_crx;$/;"	m	struct:_EG_CRX_2D	file:
y_curve_crx	int.h	/^        BBI_POINT ****y_curve_crx;$/;"	m	struct:_EG_CRX
y_or_n	../util/other.c	/^EXPORT	const	char	*y_or_n($/;"	f
y_rot	iblkb.c	/^LOCAL	void y_rot(BLK_CRX *blk_crx)$/;"	f
y_rotation	iblkc2.c	/^LOCAL   void y_rotation(BLK_CRX *blk_crx)$/;"	f
y_rotation	iblkc3.c	/^LOCAL   void y_rotation(BLK_CRX *blk_crx)$/;"	f
ybdry_side	int.h	908;"	d
yheight	igview.c	/^	double yheight;$/;"	m	struct:DATA	file:
ymax	igview.c	/^	int ymax;$/;"	m	struct:DATA	file:
ymax	triangle.c	/^LOCAL double xmin, xmax, ymin, ymax;                    \/* x and y bounds. *\/$/;"	v
ymin	igview.c	/^	int ymin;$/;"	m	struct:DATA	file:
ymin	triangle.c	/^LOCAL double xmin, xmax, ymin, ymax;                    \/* x and y bounds. *\/$/;"	v
ytransform	igview.c	/^LOCAL double ytransform(double y)$/;"	f
z	geom.h	/^        double z;$/;"	m	struct:__anon35
z0	geom.h	/^	double z0;$/;"	m	struct:__anon30
z0	geom.h	/^        double z0;$/;"	m	struct:__anon50
z_crx	int.h	/^        BBI_POINT ****z_crx;$/;"	m	struct:_EG_CRX
z_curve_crx	int.h	/^        BBI_POINT ****z_curve_crx;$/;"	m	struct:_EG_CRX
z_rot	iblkb.c	/^LOCAL	void z_rot(BLK_CRX *blk_crx)$/;"	f
z_rotation	iblkc2.c	/^LOCAL   void z_rotation(BLK_CRX *blk_crx)$/;"	f
z_rotation	iblkc3.c	/^LOCAL   void z_rotation(BLK_CRX *blk_crx)$/;"	f
zbdry_side	int.h	909;"	d
zero_array	arrayutils.c	/^LOCAL POINTER zero_array($/;"	f
zero_scalar	../util/cdecs.h	280;"	d
zoom_interface	userhooks.c	/^EXPORT	INTERFACE *zoom_interface($/;"	f
zoom_rect_grid	igrid.c	/^EXPORT	void zoom_rect_grid($/;"	f
